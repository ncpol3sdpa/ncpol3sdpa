from _typeshed import Incomplete
from typing import Callable, List, Optional
from types import TracebackType
import numpy
from numpy.typing import NDArray

__all__ = [
    "Env",
    "Error",
    "LinAlg",
    "MosekException",
    "Task",
    "basindtype",
    "boundkey",
    "mark",
    "simprecision",
    "simdegen",
    "transpose",
    "uplo",
    "simreform",
    "simdupvec",
    "simhotstart",
    "intpnthotstart",
    "callbackcode",
    "compresstype",
    "conetype",
    "domaintype",
    "nametype",
    "symmattype",
    "dataformat",
    "solformat",
    "dinfitem",
    "feature",
    "dparam",
    "liinfitem",
    "iinfitem",
    "inftype",
    "iomode",
    "iparam",
    "branchdir",
    "miqcqoreformmethod",
    "miodatapermmethod",
    "miocontsoltype",
    "miomode",
    "mionodeseltype",
    "miovarseltype",
    "mpsformat",
    "objsense",
    "onoffkey",
    "optimizertype",
    "orderingtype",
    "presolvemode",
    "foldingmode",
    "parametertype",
    "problemitem",
    "problemtype",
    "prosta",
    "rescode",
    "rescodetype",
    "scalingtype",
    "scalingmethod",
    "sensitivitytype",
    "simseltype",
    "solitem",
    "solsta",
    "soltype",
    "solveform",
    "sparam",
    "stakey",
    "startpointtype",
    "streamtype",
    "value",
    "variabletype",
]

class MSKException(Exception): ...

class MosekException(MSKException):
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    msg: str
    errno: int

class Error(MosekException): ...

basindtype: Incomplete
boundkey: Incomplete  # TODO Enum
mark: Incomplete
simprecision: Incomplete
simdegen: Incomplete
transpose: Incomplete
uplo: Incomplete
simreform: Incomplete
simdupvec: Incomplete
simhotstart: Incomplete
intpnthotstart: Incomplete
callbackcode: Incomplete
compresstype: Incomplete
conetype: Incomplete
domaintype: Incomplete
nametype: Incomplete
symmattype: Incomplete
dataformat: Incomplete
solformat: Incomplete
dinfitem: Incomplete
feature: Incomplete
dparam: Incomplete
liinfitem: Incomplete
iinfitem: Incomplete
inftype: Incomplete
iomode: Incomplete
iparam: Incomplete
branchdir: Incomplete
miqcqoreformmethod: Incomplete
miodatapermmethod: Incomplete
miocontsoltype: Incomplete
miomode: Incomplete
mionodeseltype: Incomplete
miovarseltype: Incomplete
mpsformat: Incomplete
objsense: Incomplete  # TODO Enum
onoffkey: Incomplete
optimizertype: Incomplete
orderingtype: Incomplete
presolvemode: Incomplete
foldingmode: Incomplete
parametertype: Incomplete
problemitem: Incomplete
problemtype: Incomplete
prosta: Incomplete
rescode: Incomplete  # TODO Enum
rescodetype: Incomplete
scalingtype: Incomplete
scalingmethod: Incomplete
sensitivitytype: Incomplete
simseltype: Incomplete
solitem: Incomplete
solsta: Incomplete  # TODO Enum
soltype: Incomplete  # TODO Enum
solveform: Incomplete
sparam: Incomplete
stakey: Incomplete
startpointtype: Incomplete
streamtype: Incomplete  # TODO Enum
value: Incomplete
variabletype: Incomplete

class Env:
    def set_Stream(
        self, whichstream: streamtype, func: Callable[[str], None]
    ) -> None: ...
    def __del__(self) -> None: ...
    def __enter__(self) -> Env: ...
    def __exit__(
        self,
        exc_type: type[BaseException] | None,
        exc_value: BaseException | None,
        traceback: TracebackType | None,
    ) -> None: ...
    def Task(self, numcon: int = 0, numvar: int = 0) -> Task: ...
    # def optimizebatch(self, *args, **kwds): ...
    # def checkoutlicense(self, *args, **kwds): ...
    # def checkinlicense(self, *args, **kwds): ...
    # def checkinall(self, *args, **kwds): ...
    # def expirylicenses(self, *args, **kwds): ...
    # def resetexpirylicenses(self, *args, **kwds): ...
    # def echointro(self, *args, **kwds): ...
    # @staticmethod
    # def getcodedesc(*args, **kwds): ...
    # @staticmethod
    # def getversion(*args, **kwds): ...
    # def linkfiletostream(self, *args, **kwds): ...
    # def putlicensedebug(self, *args, **kwds): ...
    # def putlicensecode(self, *args, **kwds): ...
    # def putlicensewait(self, *args, **kwds): ...
    # def putlicensepath(self, *args, **kwds): ...
    # def axpy(self, *args, **kwds): ...
    # def dot(self, *args, **kwds): ...
    # def gemv(self, *args, **kwds): ...
    # def gemm(self, *args, **kwds): ...
    # def syrk(self, *args, **kwds): ...
    # def computesparsecholesky(self, *args, **kwds): ...
    # def sparsetriangularsolvedense(self, *args, **kwds): ...
    # def potrf(self, *args, **kwds): ...
    # def syeig(self, *args, **kwds): ...
    # def syevd(self, *args, **kwds): ...
    # @staticmethod
    # def licensecleanup(*args, **kwds): ...

class Task:
    def __init__(
        self, env: Optional[Env] = None, numcon: int = 0, numvar: int = 0
    ) -> None: ...
    def __del__(self) -> None: ...
    def __enter__(self) -> Task: ...
    def __exit__(
        self,
        exc_type: type[BaseException] | None,
        exc_value: BaseException | None,
        traceback: TracebackType | None,
    ) -> None: ...
    def set_Stream(
        self, whichstream: streamtype, func: Callable[[str], None]
    ) -> None: ...
    # def set_Progress(self, func) -> None: ...
    # def set_InfoCallback(self, func) -> None: ...
    # def writedatastream(self, dformat, compress, stream) -> None: ...
    # def analyzeproblem(self, *args, **kwds): ...
    # def analyzenames(self, *args, **kwds): ...
    # def analyzesolution(self, *args, **kwds): ...
    # def initbasissolve(self, *args, **kwds): ...
    # def solvewithbasis(self, *args, **kwds): ...
    # def basiscond(self, *args, **kwds): ...
    def appendcons(self, num: int) -> None: ...
    # def appendvars(self, *args, **kwds): ...
    # def removecons(self, *args, **kwds): ...
    # def removevars(self, *args, **kwds): ...
    # def removebarvars(self, *args, **kwds): ...
    # def removecones(self, *args, **kwds): ...
    def appendbarvars(self, dim: List[int]) -> None: ...
    # def appendcone(self, *args, **kwds): ...
    # def appendconeseq(self, *args, **kwds): ...
    # def appendconesseq(self, *args, **kwds): ...
    # def chgconbound(self, *args, **kwds): ...
    # def chgvarbound(self, *args, **kwds): ...
    # def getaij(self, *args, **kwds): ...
    # def getapiecenumnz(self, *args, **kwds): ...
    # def getacolnumnz(self, *args, **kwds): ...
    # def getacol(self, *args, **kwds): ...
    # def getacolslice(self, *args, **kwds): ...
    # def getarownumnz(self, *args, **kwds): ...
    # def getarow(self, *args, **kwds): ...
    # def getacolslicenumnz(self, *args, **kwds): ...
    # def getarowslicenumnz(self, *args, **kwds): ...
    # def getarowslice(self, *args, **kwds): ...
    # def getatrip(self, *args, **kwds): ...
    # def getarowslicetrip(self, *args, **kwds): ...
    # def getacolslicetrip(self, *args, **kwds): ...
    # def getconbound(self, *args, **kwds): ...
    # def getvarbound(self, *args, **kwds): ...
    # def getconboundslice(self, *args, **kwds): ...
    # def getvarboundslice(self, *args, **kwds): ...
    # def getcj(self, *args, **kwds): ...
    # def getc(self, *args, **kwds): ...
    # def getcfix(self, *args, **kwds): ...
    # def getcone(self, *args, **kwds): ...
    # def getconeinfo(self, *args, **kwds): ...
    # def getclist(self, *args, **kwds): ...
    # def getcslice(self, *args, **kwds): ...
    # def getdouinf(self, *args, **kwds): ...
    # def getdouparam(self, *args, **kwds): ...
    def getdualobj(self, whichsol: soltype) -> float: ...
    # def getintinf(self, *args, **kwds): ...
    # def getlintinf(self, *args, **kwds): ...
    # def getintparam(self, *args, **kwds): ...
    # def getlintparam(self, *args, **kwds): ...
    # def getmaxnumanz(self, *args, **kwds): ...
    # def getmaxnumcon(self, *args, **kwds): ...
    # def getmaxnumvar(self, *args, **kwds): ...
    # def getbarvarnamelen(self, *args, **kwds): ...
    # def getbarvarname(self, *args, **kwds): ...
    # def getbarvarnameindex(self, *args, **kwds): ...
    # def generatebarvarnames(self, *args, **kwds): ...
    # def generatevarnames(self, *args, **kwds): ...
    # def generateconnames(self, *args, **kwds): ...
    # def generateconenames(self, *args, **kwds): ...
    # def generateaccnames(self, *args, **kwds): ...
    # def generatedjcnames(self, *args, **kwds): ...
    # def putconname(self, *args, **kwds): ...
    # def putvarname(self, *args, **kwds): ...
    # def putconename(self, *args, **kwds): ...
    # def putbarvarname(self, *args, **kwds): ...
    # def putdomainname(self, *args, **kwds): ...
    # def putdjcname(self, *args, **kwds): ...
    # def putaccname(self, *args, **kwds): ...
    # def getvarnamelen(self, *args, **kwds): ...
    # def getvarname(self, *args, **kwds): ...
    # def getconnamelen(self, *args, **kwds): ...
    # def getconname(self, *args, **kwds): ...
    # def getconnameindex(self, *args, **kwds): ...
    # def getvarnameindex(self, *args, **kwds): ...
    # def getconenamelen(self, *args, **kwds): ...
    # def getconename(self, *args, **kwds): ...
    # def getconenameindex(self, *args, **kwds): ...
    # def getdomainnamelen(self, *args, **kwds): ...
    # def getdomainname(self, *args, **kwds): ...
    # def getdjcnamelen(self, *args, **kwds): ...
    # def getdjcname(self, *args, **kwds): ...
    # def getaccnamelen(self, *args, **kwds): ...
    # def getaccname(self, *args, **kwds): ...
    # def getnumanz(self, *args, **kwds): ...
    # def getnumcon(self, *args, **kwds): ...
    # def getnumcone(self, *args, **kwds): ...
    # def getnumconemem(self, *args, **kwds): ...
    # def getnumintvar(self, *args, **kwds): ...
    # def getnumparam(self, *args, **kwds): ...
    # def getnumqconknz(self, *args, **kwds): ...
    # def getnumqobjnz(self, *args, **kwds): ...
    # def getnumvar(self, *args, **kwds): ...
    # def getnumbarvar(self, *args, **kwds): ...
    # def getmaxnumbarvar(self, *args, **kwds): ...
    # def getdimbarvarj(self, *args, **kwds): ...
    # def getlenbarvarj(self, *args, **kwds): ...
    # def getobjname(self, *args, **kwds): ...
    # def getobjnamelen(self, *args, **kwds): ...
    def getprimalobj(self, whichsol: soltype) -> float: ...
    # def getprobtype(self, *args, **kwds): ...
    # def getqconk(self, *args, **kwds): ...
    # def getqobj(self, *args, **kwds): ...
    # def getqobjij(self, *args, **kwds): ...
    # def getsolution(self, *args, **kwds): ...
    # def getsolutionnew(self, *args, **kwds): ...
    def getsolsta(self, whichsol: soltype) -> solsta: ...
    # def getprosta(self, *args, **kwds): ...
    # def getskc(self, *args, **kwds): ...
    # def getskx(self, *args, **kwds): ...
    # def getskn(self, *args, **kwds): ...
    # def getxc(self, *args, **kwds): ...
    # def getxx(self, *args, **kwds): ...
    # def gety(self, *args, **kwds): ...
    # def getslc(self, *args, **kwds): ...
    # def getaccdoty(self, *args, **kwds): ...
    # def getaccdotys(self, *args, **kwds): ...
    # def evaluateacc(self, *args, **kwds): ...
    # def evaluateaccs(self, *args, **kwds): ...
    # def getsuc(self, *args, **kwds): ...
    # def getslx(self, *args, **kwds): ...
    # def getsux(self, *args, **kwds): ...
    # def getsnx(self, *args, **kwds): ...
    # def getskcslice(self, *args, **kwds): ...
    # def getskxslice(self, *args, **kwds): ...
    # def getxcslice(self, *args, **kwds): ...
    # def getxxslice(self, *args, **kwds): ...
    # def getyslice(self, *args, **kwds): ...
    def getslcslice(
        self,
        whichsol : mosek.soltype,
        first : int,
        last : float
    ) -> List[float]: ...
    def getsucslice(
        self,
        whichsol : mosek.soltype,
        first : int,
        last : float
    ) -> List[float]: ...
    # def getslxslice(self, *args, **kwds): ...
    # def getsuxslice(self, *args, **kwds): ...
    # def getsnxslice(self, *args, **kwds): ...
    def getbarxj(
        self,
        whichsol : mosek.soltype,
        j : int,
        barxj : NDArray[numpy.float64]
    ) -> None: ...
    # def getbarxslice(self, *args, **kwds): ...
    def getbarsj(
        self,
        whichsol : mosek.soltype,
        j : int,
        barsj : NDArray[numpy.float64]
    ) -> None: ...
    # def getbarsslice(self, *args, **kwds): ...
    # def putskc(self, *args, **kwds): ...
    # def putskx(self, *args, **kwds): ...
    # def putxc(self, *args, **kwds): ...
    # def putxx(self, *args, **kwds): ...
    # def puty(self, *args, **kwds): ...
    # def putslc(self, *args, **kwds): ...
    # def putsuc(self, *args, **kwds): ...
    # def putslx(self, *args, **kwds): ...
    # def putsux(self, *args, **kwds): ...
    # def putsnx(self, *args, **kwds): ...
    # def putaccdoty(self, *args, **kwds): ...
    # def putskcslice(self, *args, **kwds): ...
    # def putskxslice(self, *args, **kwds): ...
    # def putxcslice(self, *args, **kwds): ...
    # def putxxslice(self, *args, **kwds): ...
    # def putyslice(self, *args, **kwds): ...
    # def putslcslice(self, *args, **kwds): ...
    # def putsucslice(self, *args, **kwds): ...
    # def putslxslice(self, *args, **kwds): ...
    # def putsuxslice(self, *args, **kwds): ...
    # def putsnxslice(self, *args, **kwds): ...
    # def putbarxj(self, *args, **kwds): ...
    # def putbarsj(self, *args, **kwds): ...
    # def getpviolcon(self, *args, **kwds): ...
    # def getpviolvar(self, *args, **kwds): ...
    # def getpviolbarvar(self, *args, **kwds): ...
    # def getpviolcones(self, *args, **kwds): ...
    # def getpviolacc(self, *args, **kwds): ...
    # def getpvioldjc(self, *args, **kwds): ...
    # def getdviolcon(self, *args, **kwds): ...
    # def getdviolvar(self, *args, **kwds): ...
    # def getdviolbarvar(self, *args, **kwds): ...
    # def getdviolcones(self, *args, **kwds): ...
    # def getdviolacc(self, *args, **kwds): ...
    # def getsolutioninfo(self, *args, **kwds): ...
    # def getsolutioninfonew(self, *args, **kwds): ...
    # def getdualsolutionnorms(self, *args, **kwds): ...
    # def getprimalsolutionnorms(self, *args, **kwds): ...
    # def getsolutionslice(self, *args, **kwds): ...
    # def getreducedcosts(self, *args, **kwds): ...
    # def getstrparam(self, *args, **kwds): ...
    # def getstrparamlen(self, *args, **kwds): ...
    # def gettasknamelen(self, *args, **kwds): ...
    # def gettaskname(self, *args, **kwds): ...
    # def getvartype(self, *args, **kwds): ...
    # def getvartypelist(self, *args, **kwds): ...
    # def inputdata(self, *args, **kwds): ...
    # def isdouparname(self, *args, **kwds): ...
    # def isintparname(self, *args, **kwds): ...
    # def isstrparname(self, *args, **kwds): ...
    # def linkfiletostream(self, *args, **kwds): ...
    # def primalrepair(self, *args, **kwds): ...
    # def infeasibilityreport(self, *args, **kwds): ...
    # def toconic(self, *args, **kwds): ...
    def optimize(self) -> rescode: ...
    # def commitchanges(self, *args, **kwds): ...
    # def getatruncatetol(self, *args, **kwds): ...
    # def putatruncatetol(self, *args, **kwds): ...
    # def putaij(self, *args, **kwds): ...
    # def putaijlist(self, *args, **kwds): ...
    # def putacol(self, *args, **kwds): ...
    # def putarow(self, *args, **kwds): ...
    # def putarowslice(self, *args, **kwds): ...
    # def putarowlist(self, *args, **kwds): ...
    # def putacolslice(self, *args, **kwds): ...
    # def putacollist(self, *args, **kwds): ...
    # def putbaraij(self, *args, **kwds): ...
    # def putbaraijlist(self, *args, **kwds): ...
    # def putbararowlist(self, *args, **kwds): ...
    # def getnumbarcnz(self, *args, **kwds): ...
    # def getnumbaranz(self, *args, **kwds): ...
    # def getbarcsparsity(self, *args, **kwds): ...
    # def getbarasparsity(self, *args, **kwds): ...
    # def getbarcidxinfo(self, *args, **kwds): ...
    # def getbarcidxj(self, *args, **kwds): ...
    # def getbarcidx(self, *args, **kwds): ...
    # def getbaraidxinfo(self, *args, **kwds): ...
    # def getbaraidxij(self, *args, **kwds): ...
    # def getbaraidx(self, *args, **kwds): ...
    # def getnumbarcblocktriplets(self, *args, **kwds): ...
    def putbarcblocktriplet(
        self, subj: List[int], subk: List[int], subl: List[int], valjkl: List[float]
    ) -> None: ...
    # def getbarcblocktriplet(self, *args, **kwds): ...
    def putbarablocktriplet(
        self,
        subi: List[int],
        subj: List[int],
        subk: List[int],
        subl: List[int],
        valijkl: List[float],
    ) -> None: ...
    # def getnumbarablocktriplets(self, *args, **kwds): ...
    # def getbarablocktriplet(self, *args, **kwds): ...
    # def putmaxnumafe(self, *args, **kwds): ...
    # def getnumafe(self, *args, **kwds): ...
    # def appendafes(self, *args, **kwds): ...
    # def putafefentry(self, *args, **kwds): ...
    # def putafefentrylist(self, *args, **kwds): ...
    # def emptyafefrow(self, *args, **kwds): ...
    # def emptyafefcol(self, *args, **kwds): ...
    # def emptyafefrowlist(self, *args, **kwds): ...
    # def emptyafefcollist(self, *args, **kwds): ...
    # def putafefrow(self, *args, **kwds): ...
    # def putafefrowlist(self, *args, **kwds): ...
    # def putafefcol(self, *args, **kwds): ...
    # def getafefrownumnz(self, *args, **kwds): ...
    # def getafefnumnz(self, *args, **kwds): ...
    # def getafefrow(self, *args, **kwds): ...
    # def getafeftrip(self, *args, **kwds): ...
    # def putafebarfentry(self, *args, **kwds): ...
    # def putafebarfentrylist(self, *args, **kwds): ...
    # def putafebarfrow(self, *args, **kwds): ...
    # def emptyafebarfrow(self, *args, **kwds): ...
    # def emptyafebarfrowlist(self, *args, **kwds): ...
    # def putafebarfblocktriplet(self, *args, **kwds): ...
    # def getafebarfnumblocktriplets(self, *args, **kwds): ...
    # def getafebarfblocktriplet(self, *args, **kwds): ...
    # def getafebarfnumrowentries(self, *args, **kwds): ...
    # def getafebarfrowinfo(self, *args, **kwds): ...
    # def getafebarfrow(self, *args, **kwds): ...
    # def putafeg(self, *args, **kwds): ...
    # def putafeglist(self, *args, **kwds): ...
    # def getafeg(self, *args, **kwds): ...
    # def getafegslice(self, *args, **kwds): ...
    # def putafegslice(self, *args, **kwds): ...
    # def putmaxnumdjc(self, *args, **kwds): ...
    # def getnumdjc(self, *args, **kwds): ...
    # def getdjcnumdomain(self, *args, **kwds): ...
    # def getdjcnumdomaintot(self, *args, **kwds): ...
    # def getdjcnumafe(self, *args, **kwds): ...
    # def getdjcnumafetot(self, *args, **kwds): ...
    # def getdjcnumterm(self, *args, **kwds): ...
    # def getdjcnumtermtot(self, *args, **kwds): ...
    # def putmaxnumacc(self, *args, **kwds): ...
    # def getnumacc(self, *args, **kwds): ...
    # def appendacc(self, *args, **kwds): ...
    # def appendaccs(self, *args, **kwds): ...
    # def appendaccseq(self, *args, **kwds): ...
    # def appendaccsseq(self, *args, **kwds): ...
    # def putacc(self, *args, **kwds): ...
    # def putacclist(self, *args, **kwds): ...
    # def putaccb(self, *args, **kwds): ...
    # def putaccbj(self, *args, **kwds): ...
    # def getaccdomain(self, *args, **kwds): ...
    # def getaccn(self, *args, **kwds): ...
    # def getaccntot(self, *args, **kwds): ...
    # def getaccafeidxlist(self, *args, **kwds): ...
    # def getaccb(self, *args, **kwds): ...
    # def getaccs(self, *args, **kwds): ...
    # def getaccfnumnz(self, *args, **kwds): ...
    # def getaccftrip(self, *args, **kwds): ...
    # def getaccgvector(self, *args, **kwds): ...
    # def getaccbarfnumblocktriplets(self, *args, **kwds): ...
    # def getaccbarfblocktriplet(self, *args, **kwds): ...
    # def appenddjcs(self, *args, **kwds): ...
    # def putdjc(self, *args, **kwds): ...
    # def putdjcslice(self, *args, **kwds): ...
    # def getdjcdomainidxlist(self, *args, **kwds): ...
    # def getdjcafeidxlist(self, *args, **kwds): ...
    # def getdjcb(self, *args, **kwds): ...
    # def getdjctermsizelist(self, *args, **kwds): ...
    # def getdjcs(self, *args, **kwds): ...
    # def putconbound(self, *args, **kwds): ...
    def putconboundlist(
        self, sub: boundkey, bkc: List[float], blc: List[float], buc: List[int]
    ) -> None: ...
    # def putconboundlistconst(self, *args, **kwds): ...
    # def putconboundslice(self, *args, **kwds): ...
    # def putconboundsliceconst(self, *args, **kwds): ...
    # def putvarbound(self, *args, **kwds): ...
    # def putvarboundlist(self, *args, **kwds): ...
    # def putvarboundlistconst(self, *args, **kwds): ...
    # def putvarboundslice(self, *args, **kwds): ...
    # def putvarboundsliceconst(self, *args, **kwds): ...
    # def putcfix(self, *args, **kwds): ...
    # def putcj(self, *args, **kwds): ...
    def putobjsense(self, sense: objsense) -> None: ...
    # def getobjsense(self, *args, **kwds): ...
    # def putclist(self, *args, **kwds): ...
    # def putcslice(self, *args, **kwds): ...
    # def putbarcj(self, *args, **kwds): ...
    # def putcone(self, *args, **kwds): ...
    # def putmaxnumdomain(self, *args, **kwds): ...
    # def getnumdomain(self, *args, **kwds): ...
    # def appendrplusdomain(self, *args, **kwds): ...
    # def appendrminusdomain(self, *args, **kwds): ...
    # def appendrdomain(self, *args, **kwds): ...
    # def appendrzerodomain(self, *args, **kwds): ...
    # def appendquadraticconedomain(self, *args, **kwds): ...
    # def appendrquadraticconedomain(self, *args, **kwds): ...
    # def appendprimalexpconedomain(self, *args, **kwds): ...
    # def appenddualexpconedomain(self, *args, **kwds): ...
    # def appendprimalgeomeanconedomain(self, *args, **kwds): ...
    # def appenddualgeomeanconedomain(self, *args, **kwds): ...
    # def appendprimalpowerconedomain(self, *args, **kwds): ...
    # def appenddualpowerconedomain(self, *args, **kwds): ...
    # def appendsvecpsdconedomain(self, *args, **kwds): ...
    # def getdomaintype(self, *args, **kwds): ...
    # def getdomainn(self, *args, **kwds): ...
    # def getpowerdomaininfo(self, *args, **kwds): ...
    # def getpowerdomainalpha(self, *args, **kwds): ...
    # def appendsparsesymmat(self, *args, **kwds): ...
    # def appendsparsesymmatlist(self, *args, **kwds): ...
    # def getsymmatinfo(self, *args, **kwds): ...
    # def getnumsymmat(self, *args, **kwds): ...
    # def getsparsesymmat(self, *args, **kwds): ...
    # def putdouparam(self, *args, **kwds): ...
    # def resetdouparam(self, *args, **kwds): ...
    # def putintparam(self, *args, **kwds): ...
    # def putlintparam(self, *args, **kwds): ...
    # def resetintparam(self, *args, **kwds): ...
    # def putmaxnumcon(self, *args, **kwds): ...
    # def putmaxnumcone(self, *args, **kwds): ...
    # def getmaxnumcone(self, *args, **kwds): ...
    # def putmaxnumvar(self, *args, **kwds): ...
    # def putmaxnumbarvar(self, *args, **kwds): ...
    # def putmaxnumanz(self, *args, **kwds): ...
    # def putmaxnumqnz(self, *args, **kwds): ...
    # def getmaxnumqnz(self, *args, **kwds): ...
    # def putnadouparam(self, *args, **kwds): ...
    # def putnaintparam(self, *args, **kwds): ...
    # def putnastrparam(self, *args, **kwds): ...
    # def putobjname(self, *args, **kwds): ...
    # def putparam(self, *args, **kwds): ...
    # def putqcon(self, *args, **kwds): ...
    # def putqconk(self, *args, **kwds): ...
    # def putqobj(self, *args, **kwds): ...
    # def putqobjij(self, *args, **kwds): ...
    # def putsolution(self, *args, **kwds): ...
    # def putsolutionnew(self, *args, **kwds): ...
    # def putconsolutioni(self, *args, **kwds): ...
    # def putvarsolutionj(self, *args, **kwds): ...
    # def putsolutionyi(self, *args, **kwds): ...
    # def putstrparam(self, *args, **kwds): ...
    # def resetstrparam(self, *args, **kwds): ...
    # def puttaskname(self, *args, **kwds): ...
    # def putvartype(self, *args, **kwds): ...
    # def putvartypelist(self, *args, **kwds): ...
    # def readdataformat(self, *args, **kwds): ...
    # def readdata(self, *args, **kwds): ...
    # def readparamfile(self, *args, **kwds): ...
    # def readsolution(self, *args, **kwds): ...
    # def readjsonsol(self, *args, **kwds): ...
    # def readsummary(self, *args, **kwds): ...
    # def resizetask(self, *args, **kwds): ...
    # def checkmem(self, *args, **kwds): ...
    # def getmemusage(self, *args, **kwds): ...
    # def resetparameters(self, *args, **kwds): ...
    # def solutiondef(self, *args, **kwds): ...
    # def deletesolution(self, *args, **kwds): ...
    # def onesolutionsummary(self, *args, **kwds): ...
    # def solutionsummary(self, *args, **kwds): ...
    # def updatesolutioninfo(self, *args, **kwds): ...
    # def optimizersummary(self, *args, **kwds): ...
    # def strtoconetype(self, *args, **kwds): ...
    # def strtosk(self, *args, **kwds): ...
    # def writedata(self, *args, **kwds): ...
    # def writetask(self, *args, **kwds): ...
    # def writebsolution(self, *args, **kwds): ...
    # def readbsolution(self, *args, **kwds): ...
    # def writesolutionfile(self, *args, **kwds): ...
    # def readsolutionfile(self, *args, **kwds): ...
    # def readtask(self, *args, **kwds): ...
    # def readopfstring(self, *args, **kwds): ...
    # def readlpstring(self, *args, **kwds): ...
    # def readjsonstring(self, *args, **kwds): ...
    # def readptfstring(self, *args, **kwds): ...
    # def writeparamfile(self, *args, **kwds): ...
    # def getinfeasiblesubproblem(self, *args, **kwds): ...
    # def getdualproblem(self, *args, **kwds): ...
    # def writesolution(self, *args, **kwds): ...
    # def writejsonsol(self, *args, **kwds): ...
    # def primalsensitivity(self, *args, **kwds): ...
    # def sensitivityreport(self, *args, **kwds): ...
    # def dualsensitivity(self, *args, **kwds): ...
    # def optimizermt(self, *args, **kwds): ...
    # def asyncoptimize(self, *args, **kwds): ...
    # def asyncstop(self, *args, **kwds): ...
    # def asyncpoll(self, *args, **kwds): ...
    # def asyncgetresult(self, *args, **kwds): ...
    # def putoptserverhost(self, *args, **kwds): ...

class LinAlg:
    axpy: Incomplete
    dot: Incomplete
    gemv: Incomplete
    gemm: Incomplete
    syrk: Incomplete
    syeig: Incomplete
    syevd: Incomplete
    potrf: Incomplete
