from _typeshed import Incomplete
from cvxpy.lin_ops.lin_constraints import LinEqConstr as LinEqConstr, LinLeqConstr as LinLeqConstr

class Counter:
    count: int
    def __init__(self) -> None: ...

ID_COUNTER: Incomplete

def get_id() -> int: ...
def create_var(shape: tuple[int, ...], var_id: Incomplete | None = None): ...
def create_param(shape: tuple[int, ...], param_id: Incomplete | None = None): ...
def create_const(value, shape: tuple[int, ...], sparse: bool = False): ...
def is_scalar(operator) -> bool: ...
def is_const(operator) -> bool: ...
def sum_expr(operators): ...
def neg_expr(operator): ...
def sub_expr(lh_op, rh_op): ...
def promote_lin_ops_for_mul(lh_op, rh_op): ...
def mul_expr(lh_op, rh_op, shape: tuple[int, ...]): ...
def rmul_expr(lh_op, rh_op, shape: tuple[int, ...]): ...
def multiply(lh_op, rh_op): ...
def kron_r(lh_op, rh_op, shape: tuple[int, ...]): ...
def kron_l(lh_op, rh_op, shape: tuple[int, ...]): ...
def div_expr(lh_op, rh_op): ...
def promote(operator, shape: tuple[int, ...]): ...
def broadcast_to(operators, shape: tuple[int, ...]): ...
def sum_entries(operator, shape: tuple[int, ...], axis: Incomplete | None = None, keepdims: Incomplete | None = None): ...
def trace(operator): ...
def index(operator, shape: tuple[int, ...], keys): ...
def conv(lh_op, rh_op, shape: tuple[int, ...]): ...
def transpose(operator): ...
def reshape(operator, shape: tuple[int, ...]): ...
def diag_vec(operator, k: int = 0): ...
def diag_mat(operator, k: int = 0): ...
def upper_tri(operator): ...
def hstack(operators, shape: tuple[int, ...]): ...
def vstack(operators, shape: tuple[int, ...]): ...
def concatenate(operators, shape: tuple[int, ...], axis: int | None = 0): ...
def get_constr_expr(lh_op, rh_op): ...
def create_eq(lh_op, rh_op: Incomplete | None = None, constr_id: Incomplete | None = None): ...
def create_leq(lh_op, rh_op: Incomplete | None = None, constr_id: Incomplete | None = None): ...
def create_geq(lh_op, rh_op: Incomplete | None = None, constr_id: Incomplete | None = None): ...
def get_expr_vars(operator): ...
def get_expr_params(operator): ...
def copy_constr(constr, func): ...
def replace_new_vars(expr, id_to_new_var): ...
def check_param_val(param): ...
def replace_params_with_consts(expr): ...
