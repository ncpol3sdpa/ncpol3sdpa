from _typeshed import Incomplete

class _SwigNonDynamicMeta(type):
    __setattr__: Incomplete

class SwigPyIterator:
    thisown: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Incomplete
    def value(self): ...
    def incr(self, n: int = 1): ...
    def decr(self, n: int = 1): ...
    def distance(self, x): ...
    def equal(self, x): ...
    def copy(self): ...
    def next(self): ...
    def __next__(self): ...
    def previous(self): ...
    def advance(self, n): ...
    def __eq__(self, x): ...
    def __ne__(self, x): ...
    def __iadd__(self, n): ...
    def __isub__(self, n): ...
    def __add__(self, n): ...
    def __sub__(self, *args): ...
    def __iter__(self): ...

VARIABLE: Incomplete
PARAM: Incomplete
PROMOTE: Incomplete
MUL: Incomplete
RMUL: Incomplete
MUL_ELEM: Incomplete
DIV: Incomplete
SUM: Incomplete
NEG: Incomplete
INDEX: Incomplete
TRANSPOSE: Incomplete
SUM_ENTRIES: Incomplete
TRACE: Incomplete
RESHAPE: Incomplete
DIAG_VEC: Incomplete
DIAG_MAT: Incomplete
UPPER_TRI: Incomplete
CONV: Incomplete
HSTACK: Incomplete
VSTACK: Incomplete
SCALAR_CONST: Incomplete
DENSE_CONST: Incomplete
SPARSE_CONST: Incomplete
NO_OP: Incomplete
KRON: Incomplete
KRON_R: Incomplete
KRON_L: Incomplete

class LinOp:
    thisown: Incomplete
    def __init__(self, type, shape, args) -> None: ...
    def get_type(self): ...
    def is_constant(self): ...
    def get_shape(self): ...
    def get_args(self): ...
    def get_slice(self): ...
    def push_back_slice_vec(self, slice_vec): ...
    def has_numerical_data(self): ...
    def get_linOp_data(self): ...
    def set_linOp_data(self, tree): ...
    def get_data_ndim(self): ...
    def set_data_ndim(self, ndim): ...
    def is_sparse(self): ...
    def get_sparse_data(self): ...
    def get_dense_data(self): ...
    def set_dense_data(self, matrix): ...
    def set_sparse_data(self, data, row_idxs, col_idxs, rows, cols): ...
    __swig_destroy__: Incomplete

def vecprod(vec): ...
def vecprod_before(vec, end): ...
def tensor_mul(lh_ten, rh_ten): ...
def acc_tensor(lh_ten, rh_ten): ...
def diagonalize(mat): ...

class ProblemData:
    thisown: Incomplete
    TensorV: Incomplete
    TensorI: Incomplete
    TensorJ: Incomplete
    param_id: Incomplete
    vec_idx: Incomplete
    def init_id(self, new_param_id, param_size): ...
    def getLen(self): ...
    def getV(self, values): ...
    def getI(self, values): ...
    def getJ(self, values): ...
    def __init__(self) -> None: ...
    __swig_destroy__: Incomplete

cvar: Incomplete
CONSTANT_ID: Incomplete

class IntVector:
    thisown: Incomplete
    def iterator(self): ...
    def __iter__(self): ...
    def __nonzero__(self): ...
    def __bool__(self) -> bool: ...
    def __len__(self) -> int: ...
    def __getslice__(self, i, j): ...
    def __setslice__(self, *args): ...
    def __delslice__(self, i, j): ...
    def __delitem__(self, *args) -> None: ...
    def __getitem__(self, *args): ...
    def __setitem__(self, *args) -> None: ...
    def pop(self): ...
    def append(self, x): ...
    def empty(self): ...
    def size(self): ...
    def swap(self, v): ...
    def begin(self): ...
    def end(self): ...
    def rbegin(self): ...
    def rend(self): ...
    def clear(self): ...
    def get_allocator(self): ...
    def pop_back(self): ...
    def erase(self, *args): ...
    def __init__(self, *args) -> None: ...
    def push_back(self, x): ...
    def front(self): ...
    def back(self): ...
    def assign(self, n, x): ...
    def resize(self, *args): ...
    def insert(self, *args): ...
    def reserve(self, n): ...
    def capacity(self): ...
    __swig_destroy__: Incomplete

class DoubleVector:
    thisown: Incomplete
    def iterator(self): ...
    def __iter__(self): ...
    def __nonzero__(self): ...
    def __bool__(self) -> bool: ...
    def __len__(self) -> int: ...
    def __getslice__(self, i, j): ...
    def __setslice__(self, *args): ...
    def __delslice__(self, i, j): ...
    def __delitem__(self, *args) -> None: ...
    def __getitem__(self, *args): ...
    def __setitem__(self, *args) -> None: ...
    def pop(self): ...
    def append(self, x): ...
    def empty(self): ...
    def size(self): ...
    def swap(self, v): ...
    def begin(self): ...
    def end(self): ...
    def rbegin(self): ...
    def rend(self): ...
    def clear(self): ...
    def get_allocator(self): ...
    def pop_back(self): ...
    def erase(self, *args): ...
    def __init__(self, *args) -> None: ...
    def push_back(self, x): ...
    def front(self): ...
    def back(self): ...
    def assign(self, n, x): ...
    def resize(self, *args): ...
    def insert(self, *args): ...
    def reserve(self, n): ...
    def capacity(self): ...
    __swig_destroy__: Incomplete

class IntVector2D:
    thisown: Incomplete
    def iterator(self): ...
    def __iter__(self): ...
    def __nonzero__(self): ...
    def __bool__(self) -> bool: ...
    def __len__(self) -> int: ...
    def __getslice__(self, i, j): ...
    def __setslice__(self, *args): ...
    def __delslice__(self, i, j): ...
    def __delitem__(self, *args) -> None: ...
    def __getitem__(self, *args): ...
    def __setitem__(self, *args) -> None: ...
    def pop(self): ...
    def append(self, x): ...
    def empty(self): ...
    def size(self): ...
    def swap(self, v): ...
    def begin(self): ...
    def end(self): ...
    def rbegin(self): ...
    def rend(self): ...
    def clear(self): ...
    def get_allocator(self): ...
    def pop_back(self): ...
    def erase(self, *args): ...
    def __init__(self, *args) -> None: ...
    def push_back(self, x): ...
    def front(self): ...
    def back(self): ...
    def assign(self, n, x): ...
    def resize(self, *args): ...
    def insert(self, *args): ...
    def reserve(self, n): ...
    def capacity(self): ...
    __swig_destroy__: Incomplete

class DoubleVector2D:
    thisown: Incomplete
    def iterator(self): ...
    def __iter__(self): ...
    def __nonzero__(self): ...
    def __bool__(self) -> bool: ...
    def __len__(self) -> int: ...
    def __getslice__(self, i, j): ...
    def __setslice__(self, *args): ...
    def __delslice__(self, i, j): ...
    def __delitem__(self, *args) -> None: ...
    def __getitem__(self, *args): ...
    def __setitem__(self, *args) -> None: ...
    def pop(self): ...
    def append(self, x): ...
    def empty(self): ...
    def size(self): ...
    def swap(self, v): ...
    def begin(self): ...
    def end(self): ...
    def rbegin(self): ...
    def rend(self): ...
    def clear(self): ...
    def get_allocator(self): ...
    def pop_back(self): ...
    def erase(self, *args): ...
    def __init__(self, *args) -> None: ...
    def push_back(self, x): ...
    def front(self): ...
    def back(self): ...
    def assign(self, n, x): ...
    def resize(self, *args): ...
    def insert(self, *args): ...
    def reserve(self, n): ...
    def capacity(self): ...
    __swig_destroy__: Incomplete

class IntIntMap:
    thisown: Incomplete
    def iterator(self): ...
    def __iter__(self): ...
    def __nonzero__(self): ...
    def __bool__(self) -> bool: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def iterkeys(self): ...
    def itervalues(self): ...
    def iteritems(self): ...
    def __getitem__(self, key): ...
    def __delitem__(self, key) -> None: ...
    def has_key(self, key): ...
    def keys(self): ...
    def values(self): ...
    def items(self): ...
    def __contains__(self, key) -> bool: ...
    def key_iterator(self): ...
    def value_iterator(self): ...
    def __setitem__(self, *args) -> None: ...
    def asdict(self): ...
    def __init__(self, *args) -> None: ...
    def empty(self): ...
    def size(self): ...
    def swap(self, v): ...
    def begin(self): ...
    def end(self): ...
    def rbegin(self): ...
    def rend(self): ...
    def clear(self): ...
    def get_allocator(self): ...
    def count(self, x): ...
    def erase(self, *args): ...
    def find(self, x): ...
    def lower_bound(self, x): ...
    def upper_bound(self, x): ...
    __swig_destroy__: Incomplete

class LinOpVector:
    thisown: Incomplete
    def iterator(self): ...
    def __iter__(self): ...
    def __nonzero__(self): ...
    def __bool__(self) -> bool: ...
    def __len__(self) -> int: ...
    def __getslice__(self, i, j): ...
    def __setslice__(self, *args): ...
    def __delslice__(self, i, j): ...
    def __delitem__(self, *args) -> None: ...
    def __getitem__(self, *args): ...
    def __setitem__(self, *args) -> None: ...
    def pop(self): ...
    def append(self, x): ...
    def empty(self): ...
    def size(self): ...
    def swap(self, v): ...
    def begin(self): ...
    def end(self): ...
    def rbegin(self): ...
    def rend(self): ...
    def clear(self): ...
    def get_allocator(self): ...
    def pop_back(self): ...
    def erase(self, *args): ...
    def __init__(self, *args) -> None: ...
    def push_back(self, x): ...
    def front(self): ...
    def back(self): ...
    def assign(self, n, x): ...
    def resize(self, *args): ...
    def insert(self, *args): ...
    def reserve(self, n): ...
    def capacity(self): ...
    __swig_destroy__: Incomplete

class ConstLinOpVector:
    thisown: Incomplete
    def iterator(self): ...
    def __iter__(self): ...
    def __nonzero__(self): ...
    def __bool__(self) -> bool: ...
    def __len__(self) -> int: ...
    def __getslice__(self, i, j): ...
    def __setslice__(self, *args): ...
    def __delslice__(self, i, j): ...
    def __delitem__(self, *args) -> None: ...
    def __getitem__(self, *args): ...
    def __setitem__(self, *args) -> None: ...
    def pop(self): ...
    def append(self, x): ...
    def empty(self): ...
    def size(self): ...
    def swap(self, v): ...
    def begin(self): ...
    def end(self): ...
    def rbegin(self): ...
    def rend(self): ...
    def clear(self): ...
    def get_allocator(self): ...
    def pop_back(self): ...
    def erase(self, *args): ...
    def __init__(self, *args) -> None: ...
    def push_back(self, x): ...
    def front(self): ...
    def back(self): ...
    def assign(self, n, x): ...
    def resize(self, *args): ...
    def insert(self, *args): ...
    def reserve(self, n): ...
    def capacity(self): ...
    __swig_destroy__: Incomplete

def build_matrix(*args): ...
