import cvxpy as cp
from _typeshed import Incomplete
from cvxpy.atoms.affine.upper_tri import upper_tri as upper_tri
from cvxpy.constraints.constraint import Constraint as Constraint
from cvxpy.constraints.exponential import ExpCone as ExpCone, OpRelEntrConeQuad as OpRelEntrConeQuad, RelEntrConeQuad as RelEntrConeQuad
from cvxpy.constraints.zero import Zero as Zero
from cvxpy.expressions.variable import Variable as Variable
from cvxpy.reductions.canonicalization import Canonicalization as Canonicalization
from cvxpy.reductions.dcp2cone.canonicalizers.von_neumann_entr_canon import von_neumann_entr_canon as von_neumann_entr_canon

APPROX_CONES: Incomplete

def gauss_legendre(n): ...
def rotated_quad_cone(X: cp.Expression, y: cp.Expression, z: cp.Expression): ...
def RelEntrConeQuad_canon(con: RelEntrConeQuad, args) -> tuple[Constraint, list[Constraint]]: ...
def OpRelEntrConeQuad_canon(con: OpRelEntrConeQuad, args) -> tuple[Constraint, list[Constraint]]: ...
def von_neumann_entr_QuadApprox(expr, args): ...
def von_neumann_entr_canon_dispatch(expr, args): ...

class QuadApprox(Canonicalization):
    CANON_METHODS: Incomplete
    def __init__(self, problem: Incomplete | None = None) -> None: ...
