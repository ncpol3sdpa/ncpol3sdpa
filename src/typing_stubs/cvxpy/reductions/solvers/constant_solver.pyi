from _typeshed import Incomplete
from cvxpy.reductions.solution import Solution as Solution
from cvxpy.reductions.solvers.solver import Solver as Solver

class ConstantSolver(Solver):
    MIP_CAPABLE: bool
    def accepts(self, problem) -> bool: ...
    def apply(self, problem): ...
    def invert(self, solution, inverse_data): ...
    def name(self) -> str: ...
    def import_solver(self) -> None: ...
    def is_installed(self) -> bool: ...
    def solve_via_data(self, data, warm_start: bool, verbose: bool, solver_opts, solver_cache: Incomplete | None = None): ...
    def solve(self, problem, warm_start: bool, verbose: bool, solver_opts): ...
