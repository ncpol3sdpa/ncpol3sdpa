from _typeshed import Incomplete
from cvxpy.constraints import SOC as SOC
from cvxpy.reductions.solution import Solution as Solution
from cvxpy.reductions.solvers import utilities as utilities
from cvxpy.reductions.solvers.conic_solvers.conic_solver import ConicSolver as ConicSolver, dims_to_solver_dict as dims_to_solver_dict
from cvxpy.utilities.versioning import Version as Version

def makeMstart(A, n, ifCol: int = 1): ...

class XPRESS(ConicSolver):
    solvecount: int
    version: int
    MIP_CAPABLE: bool
    SUPPORTED_CONSTRAINTS: Incomplete
    MI_SUPPORTED_CONSTRAINTS = SUPPORTED_CONSTRAINTS
    prob_: Incomplete
    def __init__(self) -> None: ...
    def name(self): ...
    def import_solver(self) -> None: ...
    def accepts(self, problem) -> bool: ...
    def apply(self, problem): ...
    def invert(self, solution, inverse_data): ...
    def solve_via_data(self, data, warm_start: bool, verbose: bool, solver_opts, solver_cache: Incomplete | None = None): ...

def get_status_maps(): ...
