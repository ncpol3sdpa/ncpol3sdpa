from _typeshed import Incomplete
from cvxpy.constraints import SOC as SOC
from cvxpy.reductions.solution import Solution as Solution, failure_solution as failure_solution
from cvxpy.reductions.solvers import utilities as utilities
from cvxpy.reductions.solvers.conic_solvers.conic_solver import ConicSolver as ConicSolver, dims_to_solver_dict as dims_to_solver_dict
from typing import NamedTuple

class _CpxConstr(NamedTuple):
    constr_type: Incomplete
    index: Incomplete

def set_parameters(model, solver_opts) -> None: ...
def hide_solver_output(model) -> None: ...
def get_status(model): ...

class CPLEX(ConicSolver):
    MIP_CAPABLE: bool
    SUPPORTED_CONSTRAINTS: Incomplete
    MI_SUPPORTED_CONSTRAINTS = SUPPORTED_CONSTRAINTS
    def name(self): ...
    def import_solver(self) -> None: ...
    def accepts(self, problem) -> bool: ...
    def apply(self, problem): ...
    def invert(self, solution, inverse_data): ...
    def solve_via_data(self, data, warm_start: bool, verbose: bool, solver_opts, solver_cache: Incomplete | None = None): ...
    def add_model_lin_constr(self, model, variables, rows, ctype, mat, vec): ...
    def add_model_soc_constr(self, model, variables, rows, mat, vec): ...
