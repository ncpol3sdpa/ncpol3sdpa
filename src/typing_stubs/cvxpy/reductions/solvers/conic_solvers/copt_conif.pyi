from _typeshed import Incomplete
from cvxpy.constraints import ExpCone as ExpCone, PSD as PSD, SOC as SOC
from cvxpy.reductions.solution import Solution as Solution, failure_solution as failure_solution
from cvxpy.reductions.solvers import utilities as utilities
from cvxpy.reductions.solvers.conic_solvers.conic_solver import ConicSolver as ConicSolver, dims_to_solver_dict as dims_to_solver_dict

def tri_to_full(lower_tri, n): ...

class COPT(ConicSolver):
    MIP_CAPABLE: bool
    SUPPORTED_CONSTRAINTS: Incomplete
    REQUIRES_CONSTR: bool
    EXP_CONE_ORDER: Incomplete
    MI_SUPPORTED_CONSTRAINTS: Incomplete
    INTERFACE_ARGS: Incomplete
    STATUS_MAP: Incomplete
    def name(self): ...
    def import_solver(self) -> None: ...
    def accepts(self, problem): ...
    @staticmethod
    def psd_format_mat(constr): ...
    @staticmethod
    def extract_dual_value(result_vec, offset, constraint): ...
    def apply(self, problem): ...
    def invert(self, solution, inverse_data): ...
    def solve_via_data(self, data, warm_start: bool, verbose: bool, solver_opts, solver_cache: Incomplete | None = None): ...
