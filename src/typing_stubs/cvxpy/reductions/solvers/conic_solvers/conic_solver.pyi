import abc
from _typeshed import Incomplete
from cvxpy.constraints import ExpCone as ExpCone, NonNeg as NonNeg, PSD as PSD, PowCone3D as PowCone3D, SOC as SOC, Zero as Zero
from cvxpy.reductions.cvx_attr2constr import convex_attributes as convex_attributes
from cvxpy.reductions.dcp2cone.cone_matrix_stuffing import ParamConeProg as ParamConeProg
from cvxpy.reductions.solution import Solution as Solution, failure_solution as failure_solution
from cvxpy.reductions.solvers import utilities as utilities
from cvxpy.reductions.solvers.solver import Solver as Solver

class LinearOperator:
    shape: Incomplete
    def __init__(self, linear_op, shape: tuple[int, ...]) -> None: ...
    def __call__(self, X): ...

class IdentityOperator(LinearOperator):
    shape: Incomplete
    def __init__(self, n) -> None: ...
    def __call__(self, X): ...

class NegativeIdentityOperator(LinearOperator):
    shape: Incomplete
    def __init__(self, n) -> None: ...
    def __call__(self, X): ...

def as_linear_operator(linear_op): ...
def as_block_diag_linear_operator(matrices) -> LinearOperator: ...
def dims_to_solver_dict(cone_dims): ...

class ConicSolver(Solver, metaclass=abc.ABCMeta):
    DIMS: str
    SUPPORTED_CONSTRAINTS: Incomplete
    REQUIRES_CONSTR: bool
    EXP_CONE_ORDER: Incomplete
    def supports_quad_obj(self) -> bool: ...
    def accepts(self, problem): ...
    @staticmethod
    def get_spacing_matrix(shape: tuple[int, ...], spacing, streak, num_blocks, offset): ...
    @staticmethod
    def psd_format_mat(constr): ...
    @classmethod
    def format_constraints(cls, problem, exp_cone_order): ...
    def invert(self, solution, inverse_data): ...
    def apply(self, problem): ...
