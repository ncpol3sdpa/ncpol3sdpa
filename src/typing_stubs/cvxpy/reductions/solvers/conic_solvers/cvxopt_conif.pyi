from _typeshed import Incomplete
from cvxpy.constraints import NonNeg as NonNeg, PSD as PSD, SOC as SOC, Zero as Zero
from cvxpy.reductions.solvers.compr_matrix import compress_matrix as compress_matrix
from cvxpy.reductions.solvers.conic_solvers.conic_solver import ConicSolver as ConicSolver
from cvxpy.reductions.solvers.kktsolver import setup_ldl_factor as setup_ldl_factor

def dims_to_solver_dict(cone_dims) -> dict[str, list[int] | int]: ...

class CVXOPT(ConicSolver):
    MIP_CAPABLE: bool
    SUPPORTED_CONSTRAINTS: Incomplete
    STATUS_MAP: Incomplete
    MIN_CONSTRAINT_LENGTH: int
    def name(self): ...
    def import_solver(self) -> None: ...
    def accepts(self, problem) -> bool: ...
    def apply(self, problem): ...
    def invert(self, solution, inverse_data): ...
    def solve_via_data(self, data, warm_start: bool, verbose: bool, solver_opts, solver_cache: Incomplete | None = None): ...
    @staticmethod
    def remove_redundant_rows(data): ...
    @staticmethod
    def get_kktsolver_opt(solver_opts): ...
