import numpy as np
from _typeshed import Incomplete
from cvxpy.constraints import ExpCone as ExpCone, PSD as PSD, PowCone3D as PowCone3D, SOC as SOC
from cvxpy.expressions.expression import Expression as Expression
from cvxpy.reductions.solution import Solution as Solution, failure_solution as failure_solution
from cvxpy.reductions.solvers import utilities as utilities
from cvxpy.reductions.solvers.conic_solvers.conic_solver import ConicSolver as ConicSolver

def dims_to_solver_cones(cone_dims): ...
def triu_to_full(upper_tri, n): ...
def clarabel_psdvec_to_psdmat(vec: Expression, indices: np.ndarray) -> Expression: ...

class CLARABEL(ConicSolver):
    MIP_CAPABLE: bool
    SUPPORTED_CONSTRAINTS: Incomplete
    STATUS_MAP: Incomplete
    EXP_CONE_ORDER: Incomplete
    def name(self): ...
    def import_solver(self) -> None: ...
    def supports_quad_obj(self) -> bool: ...
    @staticmethod
    def psd_format_mat(constr): ...
    @staticmethod
    def extract_dual_value(result_vec, offset, constraint): ...
    def invert(self, solution, inverse_data): ...
    @staticmethod
    def parse_solver_opts(verbose, opts, settings: Incomplete | None = None): ...
    def solve_via_data(self, data, warm_start: bool, verbose: bool, solver_opts, solver_cache: Incomplete | None = None): ...
