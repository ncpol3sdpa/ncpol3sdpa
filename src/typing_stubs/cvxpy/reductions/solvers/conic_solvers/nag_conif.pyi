from _typeshed import Incomplete
from cvxpy.constraints import NonNeg as NonNeg, SOC as SOC, Zero as Zero
from cvxpy.reductions.solution import Solution as Solution, failure_solution as failure_solution
from cvxpy.reductions.solvers.conic_solvers.conic_solver import ConicSolver as ConicSolver

class NAG(ConicSolver):
    MIP_CAPABLE: bool
    SUPPORTED_CONSTRAINTS: Incomplete
    STATUS_MAP: Incomplete
    def import_solver(self) -> None: ...
    def name(self): ...
    def supports_quad_obj(self) -> bool: ...
    def accepts(self, problem) -> bool: ...
    def apply(self, problem): ...
    def invert(self, solution, inverse_data): ...
    def solve_via_data(self, data, warm_start: bool, verbose: bool, solver_opts, solver_cache: Incomplete | None = None): ...
