from _typeshed import Incomplete
from cvxpy import problems as problems
from cvxpy.atoms.affine.upper_tri import vec_to_upper_tri as vec_to_upper_tri
from cvxpy.constraints import Equality as Equality, OpRelEntrConeQuad as OpRelEntrConeQuad, PSD as PSD, SOC as SOC, Zero as Zero
from cvxpy.constraints.constraint import Constraint as Constraint
from cvxpy.expressions import cvxtypes as cvxtypes
from cvxpy.reductions import InverseData as InverseData, Solution as Solution
from cvxpy.reductions.reduction import Reduction as Reduction

def accepts(problem) -> bool: ...

class Complex2Real(Reduction):
    UNIMPLEMENTED_COMPLEX_DUALS: Incomplete
    def accepts(self, problem) -> None: ...
    def apply(self, problem): ...
    def invert(self, solution, inverse_data): ...
    def canonicalize_tree(self, expr, real2imag, leaf_map): ...
    def canonicalize_expr(self, expr, real_args, imag_args, real2imag, leaf_map): ...
