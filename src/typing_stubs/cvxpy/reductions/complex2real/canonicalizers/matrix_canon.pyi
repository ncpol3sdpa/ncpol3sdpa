from cvxpy.atoms import bmat as bmat, lambda_sum_largest as lambda_sum_largest, normNuc as normNuc, quantum_rel_entr as quantum_rel_entr, reshape as reshape, symmetric_wrap as symmetric_wrap, von_neumann_entr as von_neumann_entr, vstack as vstack
from cvxpy.atoms.affine.wraps import psd_wrap as psd_wrap
from cvxpy.constraints.exponential import OpRelEntrConeQuad as OpRelEntrConeQuad
from cvxpy.expressions.constants.constant import Constant as Constant
from cvxpy.expressions.expression import Expression as Expression

def expand_complex(real_part: Expression | None, imag_part: Expression | None): ...
def expand_and_reapply(expr: Expression, real_part: Expression | None, imag_part: Expression | None): ...
def hermitian_canon(expr: Expression, real_args: list[Expression | None], imag_args: list[Expression | None], real2imag): ...
def trace_canon(expr: Expression, real_args: list[Expression | None], imag_args: list[Expression | None], real2imag): ...
def norm_nuc_canon(expr: normNuc, real_args: list[Expression | None], imag_args: list[Expression | None], real2imag): ...
def lambda_sum_largest_canon(expr: lambda_sum_largest, real_args: list[Expression | None], imag_args: list[Expression | None], real2imag): ...
def von_neumann_entr_canon(expr: von_neumann_entr, real_args: list[Expression | None], imag_args: list[Expression | None], real2imag): ...
def quantum_rel_entr_canon(expr: quantum_rel_entr, real_args: list[Expression | None], imag_args: list[Expression | None], real2imag): ...
def op_rel_entr_cone_canon(expr: OpRelEntrConeQuad, real_args: list[Expression | None], imag_args: list[Expression | None], real2imag): ...
def at_least_2D(expr: Expression): ...
def quad_canon(expr, real_args: list[Expression | None], imag_args: list[Expression | None], real2imag): ...
def quad_over_lin_canon(expr, real_args: list[Expression | None], imag_args: list[Expression | None], real2imag): ...
def matrix_frac_canon(expr, real_args: list[Expression | None], imag_args: list[Expression | None], real2imag): ...
