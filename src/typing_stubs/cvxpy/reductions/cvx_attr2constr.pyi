import numpy as np
from _typeshed import Incomplete
from cvxpy.atoms import diag as diag, reshape as reshape
from cvxpy.atoms.affine.upper_tri import upper_tri_to_full as upper_tri_to_full
from cvxpy.expressions import cvxtypes as cvxtypes
from cvxpy.expressions.constants import Constant as Constant
from cvxpy.expressions.variable import Variable as Variable
from cvxpy.reductions.reduction import Reduction as Reduction
from cvxpy.reductions.solution import Solution as Solution

CONVEX_ATTRIBUTES: Incomplete
BOUND_ATTRIBUTES: Incomplete
SYMMETRIC_ATTRIBUTES: Incomplete

def convex_attributes(variables) -> list[str]: ...
def attributes_present(variables, attr_map) -> list[str]: ...
def recover_value_for_variable(variable, lowered_value, project: bool = True): ...
def lower_value(variable, value) -> np.ndarray: ...

class CvxAttr2Constr(Reduction):
    reduce_bounds: Incomplete
    def __init__(self, problem: Incomplete | None = None, reduce_bounds: bool = False) -> None: ...
    def reduction_attributes(self) -> list[str]: ...
    def accepts(self, problem) -> bool: ...
    def apply(self, problem): ...
    def invert(self, solution, inverse_data) -> Solution: ...
