import cvxpy.lin_ops.lin_op as lo
from _typeshed import Incomplete
from cvxpy.atoms.affine.affine_atom import AffAtom as AffAtom
from cvxpy.constraints.constraint import Constraint as Constraint
from cvxpy.expressions.expression import Expression as Expression
from typing import Any, Iterable

class AddExpression(AffAtom):
    args: Incomplete
    def __init__(self, arg_groups: Iterable[Expression]) -> None: ...
    def shape_from_args(self) -> tuple[int, ...]: ...
    def expand_args(self, expr: Expression) -> list[Expression]: ...
    def name(self) -> str: ...
    def numeric(self, values: Iterable[Any]) -> Any: ...
    def is_atom_log_log_convex(self) -> bool: ...
    def is_atom_log_log_concave(self) -> bool: ...
    def is_symmetric(self) -> bool: ...
    def is_hermitian(self) -> bool: ...
    def copy(self, args: Incomplete | None = None, id_objects: Incomplete | None = None) -> AddExpression: ...
    def graph_implementation(self, arg_objs, shape: tuple[int, ...], data: Incomplete | None = None) -> tuple[lo.LinOp, list[Constraint]]: ...
