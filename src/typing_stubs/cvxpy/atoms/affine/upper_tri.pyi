import cvxpy.lin_ops.lin_op as lo
import scipy.sparse as sp
from _typeshed import Incomplete
from cvxpy.atoms.affine.affine_atom import AffAtom as AffAtom
from cvxpy.atoms.affine.reshape import reshape as reshape
from cvxpy.atoms.affine.vec import vec as vec
from cvxpy.constraints.constraint import Constraint as Constraint
from cvxpy.expressions.expression import Expression as Expression

class upper_tri(AffAtom):
    def __init__(self, expr) -> None: ...
    def numeric(self, values): ...
    def validate_arguments(self) -> None: ...
    def shape_from_args(self) -> tuple[int, int]: ...
    def is_atom_log_log_convex(self) -> bool: ...
    def is_atom_log_log_concave(self) -> bool: ...
    def graph_implementation(self, arg_objs, shape: tuple[int, ...], data: Incomplete | None = None) -> tuple[lo.LinOp, list[Constraint]]: ...

def vec_to_upper_tri(expr, strict: bool = False): ...
def upper_tri_to_full(n: int) -> sp.csc_matrix: ...
