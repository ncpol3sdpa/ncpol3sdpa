import cvxpy.lin_ops.lin_op as lo
from _typeshed import Incomplete
from cvxpy.atoms.affine.affine_atom import AffAtom as AffAtom
from cvxpy.atoms.affine.vec import vec as vec
from cvxpy.constraints.constraint import Constraint as Constraint

def diag(expr, k: int = 0) -> diag_mat | diag_vec: ...

class diag_vec(AffAtom):
    k: Incomplete
    def __init__(self, expr, k: int = 0) -> None: ...
    def get_data(self) -> list[int]: ...
    def is_atom_log_log_convex(self) -> bool: ...
    def is_atom_log_log_concave(self) -> bool: ...
    def numeric(self, values): ...
    def shape_from_args(self) -> tuple[int, int]: ...
    def is_symmetric(self) -> bool: ...
    def is_hermitian(self) -> bool: ...
    def is_psd(self) -> bool: ...
    def is_nsd(self) -> bool: ...
    def graph_implementation(self, arg_objs, shape: tuple[int, ...], data: Incomplete | None = None) -> tuple[lo.LinOp, list[Constraint]]: ...

class diag_mat(AffAtom):
    k: Incomplete
    def __init__(self, expr, k: int = 0) -> None: ...
    def get_data(self) -> list[int]: ...
    def is_atom_log_log_convex(self) -> bool: ...
    def is_atom_log_log_concave(self) -> bool: ...
    def numeric(self, values): ...
    def shape_from_args(self) -> tuple[int]: ...
    def is_nonneg(self) -> bool: ...
    def graph_implementation(self, arg_objs, shape: tuple[int, ...], data: Incomplete | None = None) -> tuple[lo.LinOp, list[Constraint]]: ...
