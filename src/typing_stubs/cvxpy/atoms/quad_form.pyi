from _typeshed import Incomplete
from cvxpy.atoms.affine.wraps import psd_wrap as psd_wrap
from cvxpy.atoms.atom import Atom as Atom
from cvxpy.expressions.expression import Expression as Expression
from cvxpy.interface.matrix_utilities import is_sparse as is_sparse
from cvxpy.utilities.linalg import sparse_cholesky as sparse_cholesky

class CvxPyDomainError(Exception): ...

class QuadForm(Atom):
    def __init__(self, x, P) -> None: ...
    def numeric(self, values): ...
    def validate_arguments(self) -> None: ...
    def sign_from_args(self) -> tuple[bool, bool]: ...
    def is_atom_convex(self) -> bool: ...
    def is_atom_concave(self) -> bool: ...
    def is_atom_log_log_convex(self) -> bool: ...
    def is_atom_log_log_concave(self) -> bool: ...
    def is_incr(self, idx) -> bool: ...
    def is_decr(self, idx) -> bool: ...
    def is_quadratic(self) -> bool: ...
    def has_quadratic_term(self) -> bool: ...
    def is_pwl(self) -> bool: ...
    def name(self) -> str: ...
    def shape_from_args(self) -> tuple[int, ...]: ...

class SymbolicQuadForm(Atom):
    original_expression: Incomplete
    P: Incomplete
    def __init__(self, x, P, expr) -> None: ...
    def get_data(self): ...
    def is_atom_concave(self) -> bool: ...
    def is_atom_convex(self) -> bool: ...
    def is_decr(self, idx) -> bool: ...
    def is_incr(self, idx) -> bool: ...
    def shape_from_args(self) -> tuple[int, ...]: ...
    def sign_from_args(self) -> tuple[bool, bool]: ...
    def is_quadratic(self) -> bool: ...

def decomp_quad(P, cond: Incomplete | None = None, rcond: Incomplete | None = None, lower: bool = True, check_finite: bool = True): ...
def quad_form(x, P, assume_PSD: bool = False): ...
