from _typeshed import Incomplete
from cvxpy.atoms.elementwise.elementwise import Elementwise as Elementwise
from cvxpy.constraints.constraint import Constraint as Constraint
from cvxpy.expressions import cvxtypes as cvxtypes
from cvxpy.utilities.power_tools import is_power2 as is_power2, pow_high as pow_high, pow_mid as pow_mid, pow_neg as pow_neg

class power(Elementwise):
    p: Incomplete
    max_denom: Incomplete
    p_rational: Incomplete
    approx_error: Incomplete
    def __init__(self, x, p, max_denom: int = 1024) -> None: ...
    def numeric(self, values): ...
    def sign_from_args(self) -> tuple[bool, bool]: ...
    def is_atom_convex(self) -> bool: ...
    def is_atom_concave(self) -> bool: ...
    def parameters(self): ...
    def is_atom_log_log_convex(self) -> bool: ...
    def is_atom_log_log_concave(self) -> bool: ...
    def is_constant(self) -> bool: ...
    def is_incr(self, idx) -> bool: ...
    def is_decr(self, idx) -> bool: ...
    def is_quadratic(self) -> bool: ...
    def has_quadratic_term(self) -> bool: ...
    def is_qpwa(self) -> bool: ...
    def get_data(self): ...
    def copy(self, args: Incomplete | None = None, id_objects: Incomplete | None = None) -> power: ...
    def name(self) -> str: ...
