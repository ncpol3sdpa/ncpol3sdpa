from _typeshed import Incomplete
from cvxpy.atoms.affine.promote import promote as promote
from cvxpy.atoms.atom import Atom as Atom
from cvxpy.atoms.errormsg import SECOND_ARG_SHOULD_NOT_BE_EXPRESSION_ERROR_MESSAGE as SECOND_ARG_SHOULD_NOT_BE_EXPRESSION_ERROR_MESSAGE
from cvxpy.constraints.constraint import Constraint as Constraint
from cvxpy.expressions import cvxtypes as cvxtypes
from cvxpy.utilities.power_tools import approx_error as approx_error, decompose as decompose, fracify as fracify, lower_bound as lower_bound, over_bound as over_bound, prettydict as prettydict

class geo_mean(Atom):
    p: Incomplete
    approx_error: Incomplete
    tree: Incomplete
    cone_lb: Incomplete
    cone_num_over: Incomplete
    cone_num: Incomplete
    def __init__(self, x, p: list[int] | None = None, max_denom: int = 1024) -> None: ...
    def numeric(self, values) -> float: ...
    def name(self) -> str: ...
    def pretty_tree(self) -> None: ...
    def shape_from_args(self) -> tuple[int, ...]: ...
    def sign_from_args(self) -> tuple[bool, bool]: ...
    def is_atom_convex(self) -> bool: ...
    def is_atom_concave(self) -> bool: ...
    def is_atom_log_log_convex(self) -> bool: ...
    def is_atom_log_log_concave(self) -> bool: ...
    def is_incr(self, idx) -> bool: ...
    def is_decr(self, idx) -> bool: ...
    def get_data(self): ...
    def copy(self, args: Incomplete | None = None, id_objects: Incomplete | None = None): ...
