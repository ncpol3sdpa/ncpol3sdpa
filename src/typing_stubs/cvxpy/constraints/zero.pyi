from _typeshed import Incomplete
from cvxpy.constraints.constraint import Constraint as Constraint
from cvxpy.utilities import scopes as scopes

class Zero(Constraint):
    def __init__(self, expr, constr_id: Incomplete | None = None) -> None: ...
    @property
    def shape(self): ...
    @property
    def size(self): ...
    def name(self) -> str: ...
    def is_dcp(self, dpp: bool = False) -> bool: ...
    def is_dgp(self, dpp: bool = False) -> bool: ...
    def is_dqcp(self) -> bool: ...
    @property
    def residual(self): ...
    @property
    def dual_value(self): ...
    def save_dual_value(self, value) -> None: ...

class Equality(Constraint):
    def __init__(self, lhs, rhs, constr_id: Incomplete | None = None) -> None: ...
    @property
    def expr(self): ...
    @property
    def shape(self): ...
    @property
    def size(self): ...
    def name(self) -> str: ...
    def is_dcp(self, dpp: bool = False) -> bool: ...
    def is_dgp(self, dpp: bool = False) -> bool: ...
    def is_dqcp(self) -> bool: ...
    @property
    def residual(self): ...
    @property
    def dual_value(self): ...
    def save_dual_value(self, value) -> None: ...
