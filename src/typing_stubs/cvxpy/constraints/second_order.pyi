import numpy as np
from _typeshed import Incomplete
from cvxpy.constraints.cones import Cone as Cone
from cvxpy.expressions import cvxtypes as cvxtypes
from cvxpy.utilities import scopes as scopes

class SOC(Cone):
    axis: Incomplete
    def __init__(self, t, X, axis: int = 0, constr_id: Incomplete | None = None) -> None: ...
    @property
    def residual(self) -> np.ndarray | None: ...
    def get_data(self): ...
    def num_cones(self): ...
    @property
    def size(self) -> int: ...
    def cone_sizes(self) -> list[int]: ...
    def is_dcp(self, dpp: bool = False) -> bool: ...
    def is_dgp(self, dpp: bool = False) -> bool: ...
    def is_dqcp(self) -> bool: ...
    def save_dual_value(self, value) -> None: ...
