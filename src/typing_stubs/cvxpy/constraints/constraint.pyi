import abc
import cvxpy.utilities as u
from _typeshed import Incomplete
from cvxpy.expressions import cvxtypes as cvxtypes

class Constraint(u.Canonical, metaclass=abc.ABCMeta):
    args: Incomplete
    constr_id: Incomplete
    def __init__(self, args, constr_id: Incomplete | None = None) -> None: ...
    @property
    def shape(self): ...
    @property
    def ndim(self) -> int: ...
    @property
    def size(self): ...
    def is_real(self) -> bool: ...
    def is_imag(self) -> bool: ...
    def is_complex(self) -> bool: ...
    @abc.abstractmethod
    def is_dcp(self, dpp: bool = False) -> bool: ...
    @abc.abstractmethod
    def is_dgp(self, dpp: bool = False) -> bool: ...
    def is_dpp(self, context: str = 'dcp') -> bool: ...
    @property
    @abc.abstractmethod
    def residual(self): ...
    def violation(self): ...
    def value(self, tolerance: float = 1e-08): ...
    @property
    def id(self): ...
    @id.setter
    def id(self, value) -> None: ...
    def get_data(self): ...
    def __bool__(self) -> bool: ...
    @property
    def dual_value(self): ...
    def save_dual_value(self, value) -> None: ...
