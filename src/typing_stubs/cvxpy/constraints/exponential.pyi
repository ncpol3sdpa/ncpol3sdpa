from _typeshed import Incomplete
from cvxpy.constraints.cones import Cone as Cone
from cvxpy.expressions import cvxtypes as cvxtypes
from cvxpy.utilities import scopes as scopes
from typing import TypeVar

Expression = TypeVar('Expression')

class ExpCone(Cone):
    x: Incomplete
    y: Incomplete
    z: Incomplete
    def __init__(self, x: Expression, y: Expression, z: Expression, constr_id: Incomplete | None = None) -> None: ...
    @property
    def residual(self): ...
    @property
    def size(self) -> int: ...
    def num_cones(self): ...
    def as_quad_approx(self, m: int, k: int) -> RelEntrConeQuad: ...
    def cone_sizes(self) -> list[int]: ...
    def is_dcp(self, dpp: bool = False) -> bool: ...
    def is_dgp(self, dpp: bool = False) -> bool: ...
    def is_dqcp(self) -> bool: ...
    @property
    def shape(self) -> tuple[int, ...]: ...
    def save_dual_value(self, value) -> None: ...

class RelEntrConeQuad(Cone):
    x: Incomplete
    y: Incomplete
    z: Incomplete
    m: Incomplete
    k: Incomplete
    def __init__(self, x: Expression, y: Expression, z: Expression, m: int, k: int, constr_id: Incomplete | None = None) -> None: ...
    def get_data(self): ...
    @property
    def residual(self): ...
    @property
    def size(self) -> int: ...
    def num_cones(self): ...
    def cone_sizes(self) -> list[int]: ...
    def is_dcp(self, dpp: bool = False) -> bool: ...
    def is_dgp(self, dpp: bool = False) -> bool: ...
    def is_dqcp(self) -> bool: ...
    @property
    def shape(self) -> tuple[int, ...]: ...
    def save_dual_value(self, value) -> None: ...

class OpRelEntrConeQuad(Cone):
    X: Incomplete
    Y: Incomplete
    Z: Incomplete
    m: Incomplete
    k: Incomplete
    def __init__(self, X: Expression, Y: Expression, Z: Expression, m: int, k: int, constr_id: Incomplete | None = None) -> None: ...
    def get_data(self): ...
    @property
    def residual(self) -> None: ...
    @property
    def size(self) -> int: ...
    def num_cones(self): ...
    def cone_sizes(self) -> list[int]: ...
    def is_dcp(self, dpp: bool = False) -> bool: ...
    def is_dgp(self, dpp: bool = False) -> bool: ...
    def is_dqcp(self) -> bool: ...
    @property
    def shape(self) -> tuple[int, ...]: ...
    def save_dual_value(self, value) -> None: ...
