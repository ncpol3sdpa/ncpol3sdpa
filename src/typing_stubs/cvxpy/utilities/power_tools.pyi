from cvxpy.atoms.affine.reshape import reshape as reshape
from cvxpy.atoms.affine.vstack import vstack as vstack
from cvxpy.constraints.second_order import SOC as SOC
from cvxpy.expressions.variable import Variable as Variable

def gm(t, x, y): ...
def gm_constrs(t, x_list, p): ...
def pow_high(p, max_denom: int = 1024): ...
def pow_mid(p, max_denom: int = 1024): ...
def pow_neg(p, max_denom: int = 1024): ...
def is_power2(num) -> bool: ...
def is_dyad(frac) -> bool: ...
def is_dyad_weight(w) -> bool: ...
def is_weight(w) -> bool: ...

__EXCEED_DENOMINATOR_LIMIT__: str

def fracify(a, max_denom: int = 1024, force_dyad: bool = False): ...
def make_frac(a, denom): ...
def dyad_completion(w): ...
def approx_error(a_orig, w_approx): ...
def next_pow2(n): ...
def check_dyad(w, w_dyad): ...
def split(w_dyad): ...
def decompose(w_dyad): ...
def prettytuple(t): ...
def get_max_denom(tup): ...
def prettydict(d): ...
def lower_bound(w_dyad): ...
def over_bound(w_dyad, tree): ...
