from _typeshed import Incomplete
from cvxpy.atoms import sum as sum, trace as trace
from cvxpy.expressions.constants.constant import Constant as Constant
from cvxpy.expressions.expression import Expression as Expression
from cvxpy.expressions.variable import Variable as Variable
from cvxpy.problems.objective import Maximize as Maximize, Minimize as Minimize
from cvxpy.problems.problem import Problem as Problem

def partial_optimize(prob: Problem, opt_vars: list[Variable] | None = None, dont_opt_vars: list[Variable] | None = None, solver: Incomplete | None = None, **kwargs) -> PartialProblem: ...

class PartialProblem(Expression):
    opt_vars: Incomplete
    dont_opt_vars: Incomplete
    solver: Incomplete
    args: Incomplete
    def __init__(self, prob: Problem, opt_vars: list[Variable], dont_opt_vars: list[Variable], solver, **kwargs) -> None: ...
    def get_data(self): ...
    def is_constant(self) -> bool: ...
    def is_convex(self) -> bool: ...
    def is_concave(self) -> bool: ...
    def is_dpp(self, context: str = 'dcp') -> bool: ...
    def is_log_log_convex(self) -> bool: ...
    def is_log_log_concave(self) -> bool: ...
    def is_nonneg(self) -> bool: ...
    def is_nonpos(self) -> bool: ...
    def is_imag(self) -> bool: ...
    def is_complex(self) -> bool: ...
    @property
    def shape(self) -> tuple[int, ...]: ...
    def name(self) -> str: ...
    def variables(self) -> list[Variable]: ...
    def parameters(self): ...
    def constants(self) -> list[Constant]: ...
    @property
    def grad(self): ...
    @property
    def domain(self): ...
    @property
    def value(self): ...
    def canonicalize(self): ...
