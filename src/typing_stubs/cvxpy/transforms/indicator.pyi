from _typeshed import Incomplete
from cvxpy.constraints.constraint import Constraint as Constraint
from cvxpy.expressions.expression import Expression as Expression

class indicator(Expression):
    args: Incomplete
    err_tol: Incomplete
    def __init__(self, constraints: list[Constraint], err_tol: float = 0.001) -> None: ...
    def is_constant(self) -> bool: ...
    def is_convex(self) -> bool: ...
    def is_concave(self) -> bool: ...
    def is_log_log_convex(self) -> bool: ...
    def is_log_log_concave(self) -> bool: ...
    def is_nonneg(self) -> bool: ...
    def is_nonpos(self) -> bool: ...
    def is_imag(self) -> bool: ...
    def is_complex(self) -> bool: ...
    def get_data(self) -> list[float]: ...
    @property
    def shape(self) -> tuple[int, ...]: ...
    def is_dpp(self, context: str = 'dcp') -> bool: ...
    def name(self) -> str: ...
    def domain(self) -> list[Constraint]: ...
    @property
    def value(self) -> float: ...
    @property
    def grad(self) -> None: ...
