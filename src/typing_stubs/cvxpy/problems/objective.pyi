import cvxpy.utilities as u
from _typeshed import Incomplete
from cvxpy.error import DCPError as DCPError
from cvxpy.expressions.expression import Expression as Expression
from cvxpy.interface.matrix_utilities import scalar_value as scalar_value
from cvxpy.utilities import scopes as scopes

class Objective(u.Canonical):
    NAME: str
    args: Incomplete
    ndim: int
    def __init__(self, expr) -> None: ...
    def __radd__(self, other): ...
    def __sub__(self, other): ...
    def __rsub__(self, other): ...
    def __mul__(self, other): ...
    __rmul__ = __mul__
    def __div__(self, other): ...
    __truediv__ = __div__
    @property
    def value(self): ...
    def is_quadratic(self) -> bool: ...
    def is_qpwa(self) -> bool: ...

class Minimize(Objective):
    NAME: str
    def __neg__(self) -> Maximize: ...
    def __add__(self, other): ...
    def canonicalize(self): ...
    def is_dcp(self, dpp: bool = False) -> bool: ...
    def is_dgp(self, dpp: bool = False) -> bool: ...
    def is_dpp(self, context: str = 'dcp') -> bool: ...
    def is_dqcp(self) -> bool: ...
    @staticmethod
    def primal_to_result(result): ...

class Maximize(Objective):
    NAME: str
    def __neg__(self) -> Minimize: ...
    def __add__(self, other): ...
    def canonicalize(self): ...
    def is_dcp(self, dpp: bool = False) -> bool: ...
    def is_dgp(self, dpp: bool = False) -> bool: ...
    def is_dpp(self, context: str = 'dcp') -> bool: ...
    def is_dqcp(self) -> bool: ...
    @staticmethod
    def primal_to_result(result): ...
