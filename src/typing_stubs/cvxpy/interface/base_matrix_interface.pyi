import abc

class BaseMatrixInterface(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def const_to_matrix(self, value, convert_scalars: bool = False): ...
    @staticmethod
    def scalar_const(converter): ...
    @abc.abstractmethod
    def identity(self, size): ...
    def size(self, matrix): ...
    @abc.abstractmethod
    def shape(self, matrix): ...
    @abc.abstractmethod
    def scalar_value(self, matrix): ...
    def zeros(self, shape: tuple[int, ...]): ...
    def ones(self, shape: tuple[int, ...]): ...
    @abc.abstractmethod
    def scalar_matrix(self, value, shape: tuple[int, ...]): ...
    def index(self, matrix, key): ...
    @abc.abstractmethod
    def reshape(self, matrix, shape: tuple[int, ...]): ...
    def block_add(self, matrix, block, vert_offset, horiz_offset, rows, cols, vert_step: int = 1, horiz_step: int = 1) -> None: ...
