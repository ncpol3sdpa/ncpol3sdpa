import scipy.sparse as sp
from _typeshed import Incomplete
from cvxpy.constraints.constraint import Constraint as Constraint
from cvxpy.expressions.expression import Expression as Expression
from cvxpy.expressions.leaf import Leaf as Leaf
from typing import Any, Iterable

class Variable(Leaf):
    id: Incomplete
    delta: Incomplete
    gradient: Incomplete
    def __init__(self, shape: int | Iterable[int] = (), name: str | None = None, var_id: int | None = None, **kwargs: Any) -> None: ...
    def name(self) -> str: ...
    def is_constant(self) -> bool: ...
    @property
    def grad(self) -> dict[Variable, sp.csc_matrix] | None: ...
    def variables(self) -> list[Variable]: ...
    def canonicalize(self) -> tuple[Expression, list[Constraint]]: ...
    def attributes_were_lowered(self) -> bool: ...
    def set_variable_of_provenance(self, variable: Variable) -> None: ...
    def variable_of_provenance(self) -> Variable | None: ...
