import abc
import numpy as np
from _typeshed import Incomplete
from cvxpy import Constant as Constant, Parameter as Parameter, Variable as Variable
from cvxpy.atoms.atom import Atom as Atom
from cvxpy.constraints.constraint import Constraint as Constraint
from cvxpy.expressions import expression as expression
from cvxpy.settings import GENERAL_PROJECTION_TOL as GENERAL_PROJECTION_TOL, PSD_NSD_PROJECTION_TOL as PSD_NSD_PROJECTION_TOL, SPARSE_PROJECTION_TOL as SPARSE_PROJECTION_TOL
from cvxpy.utilities.coo_array_compat import get_coords as get_coords
from typing import Iterable

class Leaf(expression.Expression, metaclass=abc.ABCMeta):
    attributes: Incomplete
    boolean_idx: Incomplete
    integer_idx: Incomplete
    sparse_idx: Incomplete
    args: Incomplete
    bounds: Incomplete
    def __init__(self, shape: int | tuple[int, ...], value: Incomplete | None = None, nonneg: bool = False, nonpos: bool = False, complex: bool = False, imag: bool = False, symmetric: bool = False, diag: bool = False, PSD: bool = False, NSD: bool = False, hermitian: bool = False, boolean: Iterable | bool = False, integer: Iterable | bool = False, sparsity: Iterable | bool = False, pos: bool = False, neg: bool = False, bounds: Iterable | None = None) -> None: ...
    def copy(self, args: Incomplete | None = None, id_objects: Incomplete | None = None): ...
    def get_data(self) -> None: ...
    @property
    def shape(self) -> tuple[int, ...]: ...
    def variables(self) -> list[Variable]: ...
    def parameters(self) -> list[Parameter]: ...
    def constants(self) -> list[Constant]: ...
    def is_convex(self) -> bool: ...
    def is_concave(self) -> bool: ...
    def is_log_log_convex(self) -> bool: ...
    def is_log_log_concave(self) -> bool: ...
    def is_nonneg(self) -> bool: ...
    def is_nonpos(self) -> bool: ...
    def is_pos(self) -> bool: ...
    def is_neg(self) -> bool: ...
    def is_hermitian(self) -> bool: ...
    def is_symmetric(self) -> bool: ...
    def is_imag(self) -> bool: ...
    def is_complex(self) -> bool: ...
    @property
    def domain(self) -> list[Constraint]: ...
    def project(self, val, sparse_path: bool = False): ...
    def save_value(self, val, sparse_path: bool = False) -> None: ...
    @property
    def value(self) -> np.ndarray | None: ...
    @value.setter
    def value(self, val) -> None: ...
    @property
    def value_sparse(self) -> ... | None: ...
    @value_sparse.setter
    def value_sparse(self, val) -> None: ...
    def project_and_assign(self, val) -> None: ...
    def is_psd(self) -> bool: ...
    def is_nsd(self) -> bool: ...
    def is_diag(self) -> bool: ...
    def is_quadratic(self) -> bool: ...
    def has_quadratic_term(self) -> bool: ...
    def is_pwl(self) -> bool: ...
    def is_dpp(self, context: str = 'dcp') -> bool: ...
    def atoms(self) -> list[Atom]: ...
