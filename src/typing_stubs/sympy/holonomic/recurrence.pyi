from _typeshed import Incomplete
from sympy.core.singleton import S as S
from sympy.core.symbol import Symbol as Symbol, symbols as symbols
from sympy.core.sympify import sympify as sympify
from sympy.printing import sstr as sstr

def RecurrenceOperators(base, generator): ...

class RecurrenceOperatorAlgebra:
    base: Incomplete
    shift_operator: Incomplete
    gen_symbol: Incomplete
    def __init__(self, base, generator) -> None: ...
    def __eq__(self, other): ...

class RecurrenceOperator:
    parent: Incomplete
    listofpoly: Incomplete
    order: Incomplete
    def __init__(self, list_of_poly, parent) -> None: ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...
    def __add__(self, other): ...
    __radd__ = __add__
    def __sub__(self, other): ...
    def __rsub__(self, other): ...
    def __pow__(self, n): ...
    def __eq__(self, other): ...

class HolonomicSequence:
    recurrence: Incomplete
    u0: Incomplete
    n: Incomplete
    def __init__(self, recurrence, u0=[]) -> None: ...
    def __eq__(self, other): ...
