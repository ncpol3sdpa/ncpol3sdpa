from .holonomicerrors import NotHolonomicError as NotHolonomicError, NotHyperSeriesError as NotHyperSeriesError, NotPowerSeriesError as NotPowerSeriesError, SingularityError as SingularityError
from .recurrence import HolonomicSequence as HolonomicSequence, RecurrenceOperator as RecurrenceOperator, RecurrenceOperators as RecurrenceOperators
from _typeshed import Incomplete
from sympy.core import Add as Add, Mul as Mul, Pow as Pow
from sympy.core.numbers import Float as Float, I as I, Infinity as Infinity, NaN as NaN, NegativeInfinity as NegativeInfinity, equal_valued as equal_valued, int_valued as int_valued, pi as pi
from sympy.core.singleton import S as S
from sympy.core.sorting import ordered as ordered
from sympy.core.symbol import Dummy as Dummy, Symbol as Symbol
from sympy.core.sympify import sympify as sympify
from sympy.functions.combinatorial.factorials import binomial as binomial, factorial as factorial, rf as rf
from sympy.functions.elementary.exponential import exp as exp, exp_polar as exp_polar, log as log
from sympy.functions.elementary.hyperbolic import cosh as cosh, sinh as sinh
from sympy.functions.elementary.miscellaneous import sqrt as sqrt
from sympy.functions.elementary.trigonometric import cos as cos, sin as sin, sinc as sinc
from sympy.functions.special.error_functions import Ci as Ci, Shi as Shi, Si as Si, erf as erf, erfc as erfc, erfi as erfi
from sympy.functions.special.gamma_functions import gamma as gamma
from sympy.functions.special.hyper import hyper as hyper, meijerg as meijerg
from sympy.integrals import meijerint as meijerint
from sympy.matrices import Matrix as Matrix
from sympy.polys.domains import QQ as QQ, RR as RR
from sympy.polys.fields import FracElement as FracElement
from sympy.polys.matrices import DomainMatrix as DomainMatrix
from sympy.polys.polyclasses import DMF as DMF
from sympy.polys.polyroots import roots as roots
from sympy.polys.polytools import Poly as Poly
from sympy.polys.rings import PolyElement as PolyElement
from sympy.printing import sstr as sstr
from sympy.series.limits import limit as limit
from sympy.series.order import Order as Order
from sympy.simplify.hyperexpand import hyperexpand as hyperexpand
from sympy.simplify.simplify import nsimplify as nsimplify
from sympy.solvers.solvers import solve as solve

def DifferentialOperators(base, generator): ...

class DifferentialOperatorAlgebra:
    base: Incomplete
    derivative_operator: Incomplete
    gen_symbol: Incomplete
    def __init__(self, base, generator) -> None: ...
    def __eq__(self, other): ...

class DifferentialOperator:
    parent: Incomplete
    x: Incomplete
    listofpoly: Incomplete
    order: Incomplete
    def __init__(self, list_of_poly, parent) -> None: ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...
    def __add__(self, other): ...
    __radd__ = __add__
    def __sub__(self, other): ...
    def __rsub__(self, other): ...
    def __neg__(self): ...
    def __truediv__(self, other): ...
    def __pow__(self, n): ...
    def __eq__(self, other): ...
    def is_singular(self, x0): ...

class HolonomicFunction:
    y0: Incomplete
    x0: Incomplete
    annihilator: Incomplete
    x: Incomplete
    def __init__(self, annihilator, x, x0: int = 0, y0: Incomplete | None = None) -> None: ...
    def unify(self, other): ...
    def is_singularics(self): ...
    def __add__(self, other): ...
    def integrate(self, limits, initcond: bool = False): ...
    def diff(self, *args, **kwargs): ...
    def __eq__(self, other): ...
    def __mul__(self, other): ...
    __rmul__ = __mul__
    def __sub__(self, other): ...
    def __rsub__(self, other): ...
    def __neg__(self): ...
    def __truediv__(self, other): ...
    def __pow__(self, n): ...
    def degree(self): ...
    def composition(self, expr, *args, **kwargs): ...
    def to_sequence(self, lb: bool = True): ...
    def series(self, n: int = 6, coefficient: bool = False, order: bool = True, _recur: Incomplete | None = None): ...
    def evalf(self, points, method: str = 'RK4', h: float = 0.05, derivatives: bool = False): ...
    def change_x(self, z): ...
    def shift_x(self, a): ...
    def to_hyper(self, as_list: bool = False, _recur: Incomplete | None = None): ...
    def to_expr(self): ...
    def change_ics(self, b, lenics: Incomplete | None = None): ...
    def to_meijerg(self): ...

def from_hyper(func, x0: int = 0, evalf: bool = False): ...
def from_meijerg(func, x0: int = 0, evalf: bool = False, initcond: bool = True, domain=...): ...

x_1: Incomplete
domain_for_table: Incomplete

def expr_to_holonomic(func, x: Incomplete | None = None, x0: int = 0, y0: Incomplete | None = None, lenics: Incomplete | None = None, domain: Incomplete | None = None, initcond: bool = True): ...
def DMFdiff(frac, K): ...
def DMFsubs(frac, x0, mpm: bool = False): ...
