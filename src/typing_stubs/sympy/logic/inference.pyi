from _typeshed import Incomplete
from sympy.core.sorting import ordered as ordered
from sympy.core.sympify import sympify as sympify
from sympy.external.importtools import import_module as import_module
from sympy.logic.boolalg import And as And, BooleanFunction as BooleanFunction, Not as Not, conjuncts as conjuncts, to_cnf as to_cnf

def literal_symbol(literal): ...
def satisfiable(expr, algorithm: Incomplete | None = None, all_models: bool = False, minimal: bool = False, use_lra_theory: bool = False): ...
def valid(expr): ...
def pl_true(expr, model: Incomplete | None = None, deep: bool = False): ...
def entails(expr, formula_set: Incomplete | None = None): ...

class KB:
    clauses_: Incomplete
    def __init__(self, sentence: Incomplete | None = None) -> None: ...
    def tell(self, sentence) -> None: ...
    def ask(self, query) -> None: ...
    def retract(self, sentence) -> None: ...
    @property
    def clauses(self): ...

class PropKB(KB):
    def tell(self, sentence) -> None: ...
    def ask(self, query): ...
    def retract(self, sentence) -> None: ...
