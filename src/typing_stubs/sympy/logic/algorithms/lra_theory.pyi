from _typeshed import Incomplete
from sympy.assumptions import Predicate as Predicate
from sympy.assumptions.ask import Q as Q
from sympy.assumptions.assume import AppliedPredicate as AppliedPredicate
from sympy.core import Dummy as Dummy
from sympy.core.add import Add as Add
from sympy.core.mul import Mul as Mul
from sympy.core.numbers import Rational as Rational, oo as oo
from sympy.core.relational import Eq as Eq, Ne as Ne
from sympy.core.singleton import S as S
from sympy.core.sympify import sympify as sympify
from sympy.matrices.dense import Matrix as Matrix, eye as eye
from sympy.solvers.solveset import linear_eq_to_matrix as linear_eq_to_matrix

class UnhandledInput(Exception): ...

ALLOWED_PRED: Incomplete
HANDLE_NEGATION: bool

class LRASolver:
    run_checks: Incomplete
    s_subs: Incomplete
    enc_to_boundary: Incomplete
    boundary_to_enc: Incomplete
    A: Incomplete
    slack: Incomplete
    nonslack: Incomplete
    all_var: Incomplete
    slack_set: Incomplete
    is_sat: bool
    result: Incomplete
    def __init__(self, A, slack_variables, nonslack_variables, enc_to_boundary, s_subs, testing_mode) -> None: ...
    @staticmethod
    def from_encoded_cnf(encoded_cnf, testing_mode: bool = False): ...
    def reset_bounds(self) -> None: ...
    def assert_lit(self, enc_constraint): ...
    def check(self): ...

class Boundary:
    var: Incomplete
    bound: Incomplete
    strict: Incomplete
    upper: Incomplete
    equality: Incomplete
    def __init__(self, var, const, upper, equality, strict: Incomplete | None = None) -> None: ...
    @staticmethod
    def from_upper(var): ...
    @staticmethod
    def from_lower(var): ...
    def get_negated(self): ...
    def get_inequality(self): ...
    def __eq__(self, other): ...
    def __hash__(self): ...

class LRARational:
    value: Incomplete
    def __init__(self, rational, delta) -> None: ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __eq__(self, other): ...
    def __add__(self, other): ...
    def __sub__(self, other): ...
    def __mul__(self, other): ...
    def __getitem__(self, index): ...

class LRAVariable:
    upper: Incomplete
    upper_from_eq: bool
    upper_from_neg: bool
    lower: Incomplete
    lower_from_eq: bool
    lower_from_neg: bool
    assign: Incomplete
    var: Incomplete
    col_idx: Incomplete
    def __init__(self, var) -> None: ...
    def __eq__(self, other): ...
    def __hash__(self): ...
