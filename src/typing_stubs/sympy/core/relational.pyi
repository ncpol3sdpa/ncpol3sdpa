from .evalf import EvalfMixin
from _typeshed import Incomplete
from sympy.logic.boolalg import Boolean

__all__ = ['Rel', 'Eq', 'Ne', 'Lt', 'Le', 'Gt', 'Ge', 'Relational', 'Equality', 'Unequality', 'StrictLessThan', 'LessThan', 'StrictGreaterThan', 'GreaterThan']

class Relational(Boolean, EvalfMixin):
    ValidRelationOperator: dict[str | None, type[Relational]]
    is_Relational: bool
    def __new__(cls, lhs, rhs, rop: Incomplete | None = None, **assumptions): ...
    @property
    def lhs(self): ...
    @property
    def rhs(self): ...
    @property
    def reversed(self): ...
    @property
    def reversedsign(self): ...
    @property
    def negated(self): ...
    @property
    def weak(self): ...
    @property
    def strict(self): ...
    @property
    def canonical(self): ...
    def equals(self, other, failing_expression: bool = False): ...
    def expand(self, **kwargs): ...
    def __bool__(self) -> bool: ...
    @property
    def binary_symbols(self): ...
Rel = Relational

class Equality(Relational):
    rel_op: str
    is_Equality: bool
    def __new__(cls, lhs, rhs, **options): ...
    @property
    def binary_symbols(self): ...
    def integrate(self, *args, **kwargs): ...
    def as_poly(self, *gens, **kwargs): ...
Eq = Equality

class Unequality(Relational):
    rel_op: str
    def __new__(cls, lhs, rhs, **options): ...
    @property
    def binary_symbols(self): ...
Ne = Unequality

class _Inequality(Relational):
    def __new__(cls, lhs, rhs, **options): ...

class _Greater(_Inequality):
    @property
    def gts(self): ...
    @property
    def lts(self): ...

class _Less(_Inequality):
    @property
    def gts(self): ...
    @property
    def lts(self): ...

class GreaterThan(_Greater):
    rel_op: str
    @property
    def strict(self): ...
Ge = GreaterThan

class LessThan(_Less):
    __doc__: Incomplete
    rel_op: str
    @property
    def strict(self): ...
Le = LessThan

class StrictGreaterThan(_Greater):
    __doc__: Incomplete
    rel_op: str
    @property
    def weak(self): ...
Gt = StrictGreaterThan

class StrictLessThan(_Less):
    __doc__: Incomplete
    rel_op: str
    @property
    def weak(self): ...
Lt = StrictLessThan
