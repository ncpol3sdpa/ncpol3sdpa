from .basic import Basic as Basic
from .sorting import default_sort_key as default_sort_key, ordered as ordered
from .sympify import SympifyError as SympifyError, sympify as sympify
from _typeshed import Incomplete
from collections.abc import MutableSet
from sympy.core.kind import Kind as Kind
from sympy.utilities.iterables import iterable as iterable
from sympy.utilities.misc import as_int as as_int
from typing import Any, Callable

class Tuple(Basic):
    def __new__(cls, *args, **kwargs): ...
    def __getitem__(self, i): ...
    def __len__(self) -> int: ...
    def __contains__(self, item) -> bool: ...
    def __iter__(self): ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __mul__(self, other): ...
    __rmul__ = __mul__
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __hash__(self): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def tuple_count(self, value) -> int: ...
    def index(self, value, start: Incomplete | None = None, stop: Incomplete | None = None): ...
    @property
    def kind(self): ...

def tuple_wrapper(method): ...

class Dict(Basic):
    def __new__(cls, *args): ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value) -> None: ...
    def items(self): ...
    def keys(self): ...
    def values(self): ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def get(self, key, default: Incomplete | None = None): ...
    def __contains__(self, key) -> bool: ...
    def __lt__(self, other): ...
    def __eq__(self, other): ...
    __hash__: Callable[[Basic], Any]

class OrderedSet(MutableSet):
    map: Incomplete
    def __init__(self, iterable: Incomplete | None = None) -> None: ...
    def __len__(self) -> int: ...
    def __contains__(self, key) -> bool: ...
    def add(self, key) -> None: ...
    def discard(self, key) -> None: ...
    def pop(self, last: bool = True): ...
    def __iter__(self): ...
    def intersection(self, other): ...
    def difference(self, other): ...
    def update(self, iterable) -> None: ...

class TupleKind(Kind):
    def __new__(cls, *args): ...
