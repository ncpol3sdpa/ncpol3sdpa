from .cache import cacheit as cacheit
from .expr import Expr as Expr
from .intfunc import igcd as igcd, ilcm as ilcm
from .kind import UndefinedKind as UndefinedKind
from .logic import fuzzy_not as fuzzy_not, fuzzy_or as fuzzy_or
from .mul import Mul as Mul
from .numbers import Rational as Rational, equal_valued as equal_valued
from .operations import AssocOp as AssocOp, AssocOpDispatcher as AssocOpDispatcher
from .parameters import global_parameters as global_parameters
from .singleton import S as S
from _typeshed import Incomplete
from sympy.utilities.iterables import is_sequence as is_sequence, sift as sift

class Add(Expr, AssocOp):
    args: tuple[Expr, ...]
    is_Add: bool
    @classmethod
    def flatten(cls, seq): ...
    @classmethod
    def class_key(cls): ...
    @property
    def kind(self): ...
    def could_extract_minus_sign(self): ...
    def as_coeff_add(self, *deps): ...
    def as_coeff_Add(self, rational: bool = False, deps: Incomplete | None = None): ...
    def matches(self, expr, repl_dict: Incomplete | None = None, old: bool = False): ...
    def as_two_terms(self): ...
    def as_numer_denom(self): ...
    def removeO(self): ...
    def getO(self): ...
    def extract_leading_order(self, symbols, point: Incomplete | None = None): ...
    def as_real_imag(self, deep: bool = True, **hints): ...
    def primitive(self): ...
    def as_content_primitive(self, radical: bool = False, clear: bool = True): ...
    def __neg__(self): ...

add: Incomplete
