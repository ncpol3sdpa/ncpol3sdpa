from .assumptions import StdFactKB as StdFactKB
from .basic import Atom as Atom, Basic as Basic
from .cache import cacheit as cacheit
from .containers import Tuple as Tuple
from .expr import AtomicExpr as AtomicExpr, Expr as Expr
from .function import AppliedUndef as AppliedUndef, FunctionClass as FunctionClass
from .kind import NumberKind as NumberKind, UndefinedKind as UndefinedKind
from .logic import fuzzy_bool as fuzzy_bool
from .singleton import S as S
from .sorting import ordered as ordered
from .sympify import sympify as sympify
from _typeshed import Incomplete
from sympy.logic.boolalg import Boolean as Boolean
from sympy.utilities.iterables import is_sequence as is_sequence, sift as sift
from sympy.utilities.misc import filldedent as filldedent
from typing import Any

class Str(Atom):
    def __new__(cls, name, **kwargs): ...
    def __getnewargs__(self): ...

def uniquely_named_symbol(xname, exprs=(), compare=..., modify: Incomplete | None = None, **assumptions): ...

class Symbol(AtomicExpr, Boolean):
    is_comparable: bool
    name: str
    is_Symbol: bool
    is_symbol: bool
    @property
    def kind(self): ...
    def __new__(cls, name : str, **assumptions) -> None: ...
    @staticmethod
    def __xnew__(cls, name, **assumptions): ...
    def __getnewargs_ex__(self): ...
    @property
    def assumptions0(self): ...
    def sort_key(self, order: Incomplete | None = None): ...
    def as_dummy(self): ...
    def as_real_imag(self, deep: bool = True, **hints): ...
    def is_constant(self, *wrt, **flags): ...
    @property
    def free_symbols(self): ...
    binary_symbols = free_symbols
    def as_set(self): ...

class Dummy(Symbol):
    is_Dummy: bool
    def __new__(cls, name: Incomplete | None = None, dummy_index: Incomplete | None = None, **assumptions): ...
    def __getnewargs_ex__(self): ...
    def sort_key(self, order: Incomplete | None = None): ...

class Wild(Symbol):
    is_Wild: bool
    def __new__(cls, name, exclude=(), properties=(), **assumptions): ...
    def __getnewargs__(self): ...
    @staticmethod
    def __xnew__(cls, name, exclude, properties, **assumptions): ...
    def matches(self, expr, repl_dict: Incomplete | None = None, old: bool = False): ...

def symbols(names, *, cls=..., **args) -> Any: ...
def var(names, **args): ...
def disambiguate(*iter): ...
