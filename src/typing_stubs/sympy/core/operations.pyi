from .basic import Basic as Basic
from .cache import cacheit as cacheit
from .logic import fuzzy_and as fuzzy_and
from .parameters import global_parameters as global_parameters
from .sorting import ordered as ordered
from .sympify import sympify as sympify
from _typeshed import Incomplete
from sympy.multipledispatch.dispatcher import Dispatcher as Dispatcher, RaiseNotImplementedError as RaiseNotImplementedError, ambiguity_register_error_ignore_dup as ambiguity_register_error_ignore_dup, str_signature as str_signature
from sympy.utilities.exceptions import sympy_deprecation_warning as sympy_deprecation_warning
from sympy.utilities.iterables import sift as sift

class AssocOp(Basic):
    def __new__(cls, *args, evaluate: Incomplete | None = None, _sympify: bool = True): ...
    @classmethod
    def flatten(cls, seq): ...
    @classmethod
    def make_args(cls, expr): ...
    def doit(self, **hints): ...

class ShortCircuit(Exception): ...

class LatticeOp(AssocOp):
    is_commutative: bool
    def __new__(cls, *args, **options): ...
    @classmethod
    def make_args(cls, expr): ...

class AssocOpDispatcher:
    name: Incomplete
    doc: Incomplete
    handlerattr: Incomplete
    def __init__(self, name, doc: Incomplete | None = None) -> None: ...
    def register_handlerclass(self, classes, typ, on_ambiguity=...) -> None: ...
    def __call__(self, *args, _sympify: bool = True, **kwargs): ...
    def dispatch(self, handlers): ...
    @property
    def __doc__(self): ...
