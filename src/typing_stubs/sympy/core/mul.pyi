from .add import Add as Add
from .basic import Basic as Basic
from .cache import cacheit as cacheit
from .expr import Expr as Expr
from .intfunc import integer_nthroot as integer_nthroot, trailing as trailing
from .kind import KindDispatcher as KindDispatcher
from .logic import fuzzy_not as fuzzy_not
from .numbers import Rational as Rational
from .operations import AssocOp as AssocOp, AssocOpDispatcher as AssocOpDispatcher
from .parameters import global_parameters as global_parameters
from .power import Pow as Pow
from .singleton import S as S
from .sympify import sympify as sympify
from .traversal import bottom_up as bottom_up
from _typeshed import Incomplete
from sympy.utilities.iterables import sift as sift

class NC_Marker:
    is_Order: bool
    is_Mul: bool
    is_Number: bool
    is_Poly: bool
    is_commutative: bool

class Mul(Expr, AssocOp):
    args: tuple[Expr, ...]
    is_Mul: bool
    @property
    def kind(self): ...
    def could_extract_minus_sign(self): ...
    def __neg__(self): ...
    @classmethod
    def flatten(cls, seq): ...
    @classmethod
    def class_key(cls): ...
    def as_two_terms(self): ...
    def as_coeff_mul(self, *deps, rational: bool = True, **kwargs): ...
    def as_coeff_Mul(self, rational: bool = False): ...
    def as_real_imag(self, deep: bool = True, **hints): ...
    def matches(self, expr, repl_dict: Incomplete | None = None, old: bool = False): ...
    def as_powers_dict(self): ...
    def as_numer_denom(self): ...
    def as_base_exp(self): ...
    def as_content_primitive(self, radical: bool = False, clear: bool = True): ...
    def as_ordered_factors(self, order: Incomplete | None = None): ...

mul: Incomplete

def prod(a, start: int = 1): ...
def expand_2arg(e): ...
