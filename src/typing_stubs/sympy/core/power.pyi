from .add import Add as Add
from .cache import cacheit as cacheit
from .evalf import PrecisionExhausted as PrecisionExhausted
from .expr import Expr as Expr
from .function import PoleError as PoleError, expand_complex as expand_complex, expand_mul as expand_mul, expand_multinomial as expand_multinomial
from .kind import NumberKind as NumberKind, UndefinedKind as UndefinedKind
from .logic import fuzzy_and as fuzzy_and, fuzzy_bool as fuzzy_bool, fuzzy_not as fuzzy_not, fuzzy_or as fuzzy_or
from .mul import Mul as Mul
from .numbers import Integer as Integer, Rational as Rational
from .parameters import global_parameters as global_parameters
from .relational import is_gt as is_gt, is_lt as is_lt
from .singleton import S as S
from .symbol import Dummy as Dummy, Symbol as Symbol, symbols as symbols
from _typeshed import Incomplete
from sympy.multipledispatch import Dispatcher as Dispatcher
from sympy.utilities.exceptions import sympy_deprecation_warning as sympy_deprecation_warning
from sympy.utilities.iterables import sift as sift
from sympy.utilities.misc import as_int as as_int

class Pow(Expr):
    is_Pow: bool
    args: tuple[Expr, Expr]
    def __new__(cls, b, e, evaluate: Incomplete | None = None): ...
    def inverse(self, argindex: int = 1): ...
    @property
    def base(self) -> Expr: ...
    @property
    def exp(self) -> Expr: ...
    @property
    def kind(self): ...
    @classmethod
    def class_key(cls): ...
    def as_base_exp(self): ...
    def as_real_imag(self, deep: bool = True, **hints): ...
    def as_numer_denom(self): ...
    def matches(self, expr, repl_dict: Incomplete | None = None, old: bool = False): ...
    def taylor_term(self, n, x, *previous_terms): ...
    def as_content_primitive(self, radical: bool = False, clear: bool = True): ...
    def is_constant(self, *wrt, **flags): ...

power: Incomplete
