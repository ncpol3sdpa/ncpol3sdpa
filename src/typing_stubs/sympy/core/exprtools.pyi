from .add import Add as Add
from .basic import Basic as Basic
from .containers import Dict as Dict, Tuple as Tuple
from .coreerrors import NonCommutativeExpression as NonCommutativeExpression
from .expr import Expr as Expr
from .function import expand_power_exp as expand_power_exp
from .mul import Mul as Mul
from .numbers import I as I, Integer as Integer, Number as Number, Rational as Rational, equal_valued as equal_valued
from .power import Pow as Pow
from .singleton import S as S
from .sorting import default_sort_key as default_sort_key, ordered as ordered
from .symbol import Dummy as Dummy
from .sympify import sympify as sympify
from .traversal import preorder_traversal as preorder_traversal
from _typeshed import Incomplete
from sympy.external.gmpy import SYMPY_INTS as SYMPY_INTS
from sympy.utilities.iterables import common_prefix as common_prefix, common_suffix as common_suffix, is_sequence as is_sequence, iterable as iterable, variations as variations

def decompose_power(expr: Expr) -> tuple[Expr, int]: ...
def decompose_power_rat(expr: Expr) -> tuple[Expr, Rational]: ...

class Factors:
    factors: Incomplete
    gens: Incomplete
    def __init__(self, factors: Incomplete | None = None) -> None: ...
    def __hash__(self): ...
    @property
    def is_zero(self): ...
    @property
    def is_one(self): ...
    def as_expr(self): ...
    def mul(self, other): ...
    def normal(self, other): ...
    def div(self, other): ...
    def quo(self, other): ...
    def rem(self, other): ...
    def pow(self, other): ...
    def gcd(self, other): ...
    def lcm(self, other): ...
    def __mul__(self, other): ...
    def __divmod__(self, other): ...
    def __truediv__(self, other): ...
    def __mod__(self, other): ...
    def __pow__(self, other): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

class Term:
    coeff: Incomplete
    numer: Incomplete
    denom: Incomplete
    def __init__(self, term, numer: Incomplete | None = None, denom: Incomplete | None = None) -> None: ...
    def __hash__(self): ...
    def as_expr(self): ...
    def mul(self, other): ...
    def inv(self): ...
    def quo(self, other): ...
    def pow(self, other): ...
    def gcd(self, other): ...
    def lcm(self, other): ...
    def __mul__(self, other): ...
    def __truediv__(self, other): ...
    def __pow__(self, other): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

def gcd_terms(terms, isprimitive: bool = False, clear: bool = True, fraction: bool = True): ...
def factor_terms(expr, radical: bool = False, clear: bool = False, fraction: bool = False, sign: bool = True): ...
def factor_nc(expr): ...
