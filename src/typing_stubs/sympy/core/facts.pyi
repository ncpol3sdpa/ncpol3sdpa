from .logic import And as And, Logic as Logic, Not as Not, Or as Or
from _typeshed import Incomplete
from typing import Iterator

def transitive_closure(implications): ...
def deduce_alpha_implications(implications): ...
def apply_beta_to_alpha_route(alpha_implications, beta_rules): ...
def rules_2prereq(rules): ...

class TautologyDetected(Exception): ...

class Prover:
    proved_rules: Incomplete
    def __init__(self) -> None: ...
    def split_alpha_beta(self): ...
    @property
    def rules_alpha(self): ...
    @property
    def rules_beta(self): ...
    def process_rule(self, a, b) -> None: ...

class FactRules:
    beta_rules: Incomplete
    defined_facts: Incomplete
    full_implications: Incomplete
    beta_triggers: Incomplete
    prereq: Incomplete
    def __init__(self, rules) -> None: ...
    def print_rules(self) -> Iterator[str]: ...

class InconsistentAssumptions(ValueError): ...

class FactKB(dict):
    rules: Incomplete
    def __init__(self, rules) -> None: ...
    def deduce_all_facts(self, facts) -> None: ...
