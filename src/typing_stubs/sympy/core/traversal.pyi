from .basic import Basic as Basic
from .sorting import ordered as ordered
from .sympify import sympify as sympify
from _typeshed import Incomplete
from collections.abc import Generator
from sympy.utilities.iterables import iterable as iterable

def iterargs(expr) -> Generator[Incomplete]: ...
def iterfreeargs(expr, _first: bool = True) -> Generator[Incomplete]: ...

class preorder_traversal:
    def __init__(self, node, keys: Incomplete | None = None) -> None: ...
    def skip(self) -> None: ...
    def __next__(self): ...
    def __iter__(self): ...

def use(expr, func, level: int = 0, args=(), kwargs={}): ...
def walk(e, *target) -> Generator[Incomplete, Incomplete]: ...
def bottom_up(rv, F, atoms: bool = False, nonbasic: bool = False): ...
def postorder_traversal(node, keys: Incomplete | None = None) -> Generator[Incomplete, Incomplete]: ...
