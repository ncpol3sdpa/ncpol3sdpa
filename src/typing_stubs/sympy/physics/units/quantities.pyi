from _typeshed import Incomplete
from sympy.core.expr import AtomicExpr as AtomicExpr
from sympy.core.symbol import Symbol as Symbol
from sympy.core.sympify import sympify as sympify
from sympy.physics.units.prefixes import Prefix as Prefix

class Quantity(AtomicExpr):
    is_commutative: bool
    is_real: bool
    is_number: bool
    is_nonzero: bool
    is_physical_constant: bool
    def __new__(cls, name, abbrev: Incomplete | None = None, latex_repr: Incomplete | None = None, pretty_unicode_repr: Incomplete | None = None, pretty_ascii_repr: Incomplete | None = None, mathml_presentation_repr: Incomplete | None = None, is_prefixed: bool = False, **assumptions): ...
    def set_global_dimension(self, dimension) -> None: ...
    def set_global_relative_scale_factor(self, scale_factor, reference_quantity): ...
    @property
    def name(self): ...
    @property
    def dimension(self): ...
    @property
    def abbrev(self): ...
    @property
    def scale_factor(self): ...
    def convert_to(self, other, unit_system: str = 'SI'): ...
    @property
    def free_symbols(self): ...
    @property
    def is_prefixed(self): ...

class PhysicalConstant(Quantity):
    is_physical_constant: bool
