from .dimensions import Dimension as Dimension
from _typeshed import Incomplete
from sympy.core.add import Add as Add
from sympy.core.function import Derivative as Derivative, Function as Function
from sympy.core.mul import Mul as Mul
from sympy.core.power import Pow as Pow
from sympy.core.singleton import S as S
from sympy.physics.units.dimensions import _QuantityMapper
from sympy.physics.units.quantities import Quantity as Quantity

class UnitSystem(_QuantityMapper):
    name: Incomplete
    descr: Incomplete
    def __init__(self, base_units, units=(), name: str = '', descr: str = '', dimension_system: Incomplete | None = None, derived_units: dict[Dimension, Quantity] = {}) -> None: ...
    def extend(self, base, units=(), name: str = '', description: str = '', dimension_system: Incomplete | None = None, derived_units: dict[Dimension, Quantity] = {}): ...
    def get_dimension_system(self): ...
    def get_quantity_dimension(self, unit): ...
    def get_quantity_scale_factor(self, unit): ...
    @staticmethod
    def get_unit_system(unit_system): ...
    @staticmethod
    def get_default_unit_system(): ...
    @property
    def dim(self): ...
    @property
    def is_consistent(self): ...
    @property
    def derived_units(self) -> dict[Dimension, Quantity]: ...
    def get_dimensional_expr(self, expr): ...
    def get_units_non_prefixed(self) -> set[Quantity]: ...
