from _typeshed import Incomplete
from sympy.core.basic import Basic as Basic
from sympy.core.containers import Dict as Dict, Tuple as Tuple
from sympy.core.expr import Expr as Expr
from sympy.core.power import Pow as Pow
from sympy.core.singleton import S as S
from sympy.core.sorting import default_sort_key as default_sort_key
from sympy.core.symbol import Symbol as Symbol
from sympy.core.sympify import sympify as sympify
from sympy.functions.elementary.trigonometric import TrigonometricFunction as TrigonometricFunction
from sympy.matrices.dense import Matrix as Matrix

class _QuantityMapper:
    def __init__(self, *args, **kwargs) -> None: ...
    def set_quantity_dimension(self, quantity, dimension) -> None: ...
    def set_quantity_scale_factor(self, quantity, scale_factor): ...
    def get_quantity_dimension(self, unit): ...
    def get_quantity_scale_factor(self, unit): ...

class Dimension(Expr):
    is_commutative: bool
    is_number: bool
    is_positive: bool
    is_real: bool
    def __new__(cls, name, symbol: Incomplete | None = None): ...
    @property
    def name(self): ...
    @property
    def symbol(self): ...
    def __neg__(self): ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __sub__(self, other): ...
    def __rsub__(self, other): ...
    def __pow__(self, other): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...
    def __truediv__(self, other): ...
    def __rtruediv__(self, other): ...
    def has_integer_powers(self, dim_sys): ...

class DimensionSystem(Basic, _QuantityMapper):
    def __new__(cls, base_dims, derived_dims=(), dimensional_dependencies={}): ...
    @property
    def base_dims(self): ...
    @property
    def derived_dims(self): ...
    @property
    def dimensional_dependencies(self): ...
    def get_dimensional_dependencies(self, name, mark_dimensionless: bool = False): ...
    def equivalent_dims(self, dim1, dim2): ...
    def extend(self, new_base_dims, new_derived_dims=(), new_dim_deps: Incomplete | None = None): ...
    def is_dimensionless(self, dimension): ...
    @property
    def list_can_dims(self): ...
    @property
    def inv_can_transf_matrix(self): ...
    @property
    def can_transf_matrix(self): ...
    def dim_can_vector(self, dim): ...
    def dim_vector(self, dim): ...
    def print_dim_base(self, dim): ...
    @property
    def dim(self): ...
    @property
    def is_consistent(self): ...
