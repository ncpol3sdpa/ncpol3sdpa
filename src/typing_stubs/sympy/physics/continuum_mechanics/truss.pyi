from _typeshed import Incomplete
from sympy import Matrix as Matrix, cos as cos, pi as pi, sin as sin
from sympy.core.add import Add as Add
from sympy.core.evalf import INF as INF
from sympy.core.mul import Mul as Mul
from sympy.core.symbol import Symbol as Symbol
from sympy.core.sympify import sympify as sympify
from sympy.external.importtools import import_module as import_module
from sympy.functions.elementary.miscellaneous import sqrt as sqrt
from sympy.matrices.dense import zeros as zeros
from sympy.physics.units.quantities import Quantity as Quantity
from sympy.plotting import plot as plot
from sympy.utilities.decorator import doctest_depends_on as doctest_depends_on

__doctest_requires__: Incomplete
numpy: Incomplete

class Truss:
    def __init__(self) -> None: ...
    @property
    def nodes(self): ...
    @property
    def node_labels(self): ...
    @property
    def node_positions(self): ...
    @property
    def members(self): ...
    @property
    def member_lengths(self): ...
    @property
    def supports(self): ...
    @property
    def loads(self): ...
    @property
    def reaction_loads(self): ...
    @property
    def internal_forces(self): ...
    def add_node(self, *args) -> None: ...
    def remove_node(self, *args) -> None: ...
    def add_member(self, *args) -> None: ...
    def remove_member(self, *args) -> None: ...
    def change_node_label(self, *args) -> None: ...
    def change_member_label(self, *args) -> None: ...
    def apply_load(self, *args) -> None: ...
    def remove_load(self, *args) -> None: ...
    def apply_support(self, *args) -> None: ...
    def remove_support(self, *args) -> None: ...
    def solve(self) -> None: ...
    def draw(self, subs_dict: Incomplete | None = None): ...
