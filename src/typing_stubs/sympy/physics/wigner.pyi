from _typeshed import Incomplete
from sympy.concrete.summations import Sum as Sum
from sympy.core.add import Add as Add
from sympy.core.function import Function as Function
from sympy.core.numbers import Float as Float, I as I, Integer as Integer, Rational as Rational, int_valued as int_valued, pi as pi
from sympy.core.singleton import S as S
from sympy.core.symbol import Dummy as Dummy
from sympy.core.sympify import sympify as sympify
from sympy.functions.combinatorial.factorials import binomial as binomial, factorial as factorial
from sympy.functions.elementary.complexes import re as re
from sympy.functions.elementary.exponential import exp as exp
from sympy.functions.elementary.miscellaneous import sqrt as sqrt
from sympy.functions.elementary.trigonometric import cos as cos, sin as sin
from sympy.functions.special.spherical_harmonics import Ynm as Ynm
from sympy.matrices.dense import zeros as zeros
from sympy.matrices.immutable import ImmutableMatrix as ImmutableMatrix
from sympy.utilities.misc import as_int as as_int

def wigner_3j(j_1, j_2, j_3, m_1, m_2, m_3): ...
def clebsch_gordan(j_1, j_2, j_3, m_1, m_2, m_3): ...
def racah(aa, bb, cc, dd, ee, ff, prec: Incomplete | None = None): ...
def wigner_6j(j_1, j_2, j_3, j_4, j_5, j_6, prec: Incomplete | None = None): ...
def wigner_9j(j_1, j_2, j_3, j_4, j_5, j_6, j_7, j_8, j_9, prec: Incomplete | None = None): ...
def gaunt(l_1, l_2, l_3, m_1, m_2, m_3, prec: Incomplete | None = None): ...
def real_gaunt(l_1, l_2, l_3, m_1, m_2, m_3, prec: Incomplete | None = None): ...

class Wigner3j(Function):
    def doit(self, **hints): ...

def dot_rot_grad_Ynm(j, p, l, m, theta, phi): ...
def wigner_d_small(J, beta): ...
def wigner_d(J, alpha, beta, gamma): ...
