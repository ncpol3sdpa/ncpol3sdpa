from _typeshed import Incomplete
from sympy.core.symbol import Symbol

__all__ = ['CoordinateSym', 'ReferenceFrame']

class CoordinateSym(Symbol):
    def __new__(cls, name, frame, index): ...
    def __getnewargs_ex__(self): ...
    @property
    def frame(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __hash__(self): ...

class ReferenceFrame:
    str_vecs: Incomplete
    pretty_vecs: Incomplete
    latex_vecs: Incomplete
    indices: Incomplete
    name: Incomplete
    varlist: Incomplete
    index: Incomplete
    def __init__(self, name, indices: Incomplete | None = None, latexs: Incomplete | None = None, variables: Incomplete | None = None) -> None: ...
    def __getitem__(self, ind): ...
    def __iter__(self): ...
    def variable_map(self, otherframe): ...
    def ang_acc_in(self, otherframe): ...
    def ang_vel_in(self, otherframe): ...
    def dcm(self, otherframe): ...
    def orient_axis(self, parent, axis, angle) -> None: ...
    def orient_explicit(self, parent, dcm) -> None: ...
    def orient_dcm(self, parent, dcm) -> None: ...
    def orient_body_fixed(self, parent, angles, rotation_order) -> None: ...
    def orient_space_fixed(self, parent, angles, rotation_order) -> None: ...
    def orient_quaternion(self, parent, numbers) -> None: ...
    def orient(self, parent, rot_type, amounts, rot_order: str = '') -> None: ...
    def orientnew(self, newname, rot_type, amounts, rot_order: str = '', variables: Incomplete | None = None, indices: Incomplete | None = None, latexs: Incomplete | None = None): ...
    def set_ang_acc(self, otherframe, value) -> None: ...
    def set_ang_vel(self, otherframe, value) -> None: ...
    @property
    def x(self): ...
    @property
    def y(self): ...
    @property
    def z(self): ...
    @property
    def xx(self): ...
    @property
    def xy(self): ...
    @property
    def xz(self): ...
    @property
    def yx(self): ...
    @property
    def yy(self): ...
    @property
    def yz(self): ...
    @property
    def zx(self): ...
    @property
    def zy(self): ...
    @property
    def zz(self): ...
    @property
    def u(self): ...
    def partial_velocity(self, frame, *gen_speeds): ...
