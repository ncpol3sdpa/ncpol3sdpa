import abc
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from sympy.physics.biomechanics._mixin import _NamedMixin

__all__ = ['ActivationBase', 'FirstOrderActivationDeGroote2016', 'ZerothOrderActivation']

class ActivationBase(ABC, _NamedMixin, metaclass=abc.ABCMeta):
    name: Incomplete
    def __init__(self, name) -> None: ...
    @classmethod
    @abstractmethod
    def with_defaults(cls, name): ...
    @property
    def excitation(self): ...
    @property
    def e(self): ...
    @property
    def activation(self): ...
    @property
    def a(self): ...
    @property
    @abstractmethod
    def order(self): ...
    @property
    @abstractmethod
    def state_vars(self): ...
    @property
    @abstractmethod
    def x(self): ...
    @property
    @abstractmethod
    def input_vars(self): ...
    @property
    @abstractmethod
    def r(self): ...
    @property
    @abstractmethod
    def constants(self): ...
    @property
    @abstractmethod
    def p(self): ...
    @property
    @abstractmethod
    def M(self): ...
    @property
    @abstractmethod
    def F(self): ...
    @abstractmethod
    def rhs(self): ...
    def __eq__(self, other): ...

class ZerothOrderActivation(ActivationBase):
    def __init__(self, name) -> None: ...
    @classmethod
    def with_defaults(cls, name): ...
    @property
    def order(self): ...
    @property
    def state_vars(self): ...
    @property
    def x(self): ...
    @property
    def input_vars(self): ...
    @property
    def r(self): ...
    @property
    def constants(self): ...
    @property
    def p(self): ...
    @property
    def M(self): ...
    @property
    def F(self): ...
    def rhs(self): ...

class FirstOrderActivationDeGroote2016(ActivationBase):
    def __init__(self, name, activation_time_constant: Incomplete | None = None, deactivation_time_constant: Incomplete | None = None, smoothing_rate: Incomplete | None = None) -> None: ...
    @classmethod
    def with_defaults(cls, name): ...
    @property
    def activation_time_constant(self): ...
    @activation_time_constant.setter
    def activation_time_constant(self, tau_a) -> None: ...
    @property
    def tau_a(self): ...
    @property
    def deactivation_time_constant(self): ...
    @deactivation_time_constant.setter
    def deactivation_time_constant(self, tau_d) -> None: ...
    @property
    def tau_d(self): ...
    @property
    def smoothing_rate(self): ...
    @smoothing_rate.setter
    def smoothing_rate(self, b) -> None: ...
    @property
    def b(self): ...
    @property
    def order(self): ...
    @property
    def state_vars(self): ...
    @property
    def x(self): ...
    @property
    def input_vars(self): ...
    @property
    def r(self): ...
    @property
    def constants(self): ...
    @property
    def p(self): ...
    @property
    def M(self): ...
    @property
    def F(self): ...
    def rhs(self): ...
    def __eq__(self, other): ...
