from dataclasses import dataclass
from sympy.core.function import Function

__all__ = ['CharacteristicCurveCollection', 'CharacteristicCurveFunction', 'FiberForceLengthActiveDeGroote2016', 'FiberForceLengthPassiveDeGroote2016', 'FiberForceLengthPassiveInverseDeGroote2016', 'FiberForceVelocityDeGroote2016', 'FiberForceVelocityInverseDeGroote2016', 'TendonForceLengthDeGroote2016', 'TendonForceLengthInverseDeGroote2016']

class CharacteristicCurveFunction(Function):
    @classmethod
    def eval(cls) -> None: ...

class TendonForceLengthDeGroote2016(CharacteristicCurveFunction):
    @classmethod
    def with_defaults(cls, l_T_tilde): ...
    @classmethod
    def eval(cls, l_T_tilde, c0, c1, c2, c3) -> None: ...
    def doit(self, deep: bool = True, evaluate: bool = True, **hints): ...
    def fdiff(self, argindex: int = 1): ...
    def inverse(self, argindex: int = 1): ...

class TendonForceLengthInverseDeGroote2016(CharacteristicCurveFunction):
    @classmethod
    def with_defaults(cls, fl_T): ...
    @classmethod
    def eval(cls, fl_T, c0, c1, c2, c3) -> None: ...
    def doit(self, deep: bool = True, evaluate: bool = True, **hints): ...
    def fdiff(self, argindex: int = 1): ...
    def inverse(self, argindex: int = 1): ...

class FiberForceLengthPassiveDeGroote2016(CharacteristicCurveFunction):
    @classmethod
    def with_defaults(cls, l_M_tilde): ...
    @classmethod
    def eval(cls, l_M_tilde, c0, c1) -> None: ...
    def doit(self, deep: bool = True, evaluate: bool = True, **hints): ...
    def fdiff(self, argindex: int = 1): ...
    def inverse(self, argindex: int = 1): ...

class FiberForceLengthPassiveInverseDeGroote2016(CharacteristicCurveFunction):
    @classmethod
    def with_defaults(cls, fl_M_pas): ...
    @classmethod
    def eval(cls, fl_M_pas, c0, c1) -> None: ...
    def doit(self, deep: bool = True, evaluate: bool = True, **hints): ...
    def fdiff(self, argindex: int = 1): ...
    def inverse(self, argindex: int = 1): ...

class FiberForceLengthActiveDeGroote2016(CharacteristicCurveFunction):
    @classmethod
    def with_defaults(cls, l_M_tilde): ...
    @classmethod
    def eval(cls, l_M_tilde, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11) -> None: ...
    def doit(self, deep: bool = True, evaluate: bool = True, **hints): ...
    def fdiff(self, argindex: int = 1): ...

class FiberForceVelocityDeGroote2016(CharacteristicCurveFunction):
    @classmethod
    def with_defaults(cls, v_M_tilde): ...
    @classmethod
    def eval(cls, v_M_tilde, c0, c1, c2, c3) -> None: ...
    def doit(self, deep: bool = True, evaluate: bool = True, **hints): ...
    def fdiff(self, argindex: int = 1): ...
    def inverse(self, argindex: int = 1): ...

class FiberForceVelocityInverseDeGroote2016(CharacteristicCurveFunction):
    @classmethod
    def with_defaults(cls, fv_M): ...
    @classmethod
    def eval(cls, fv_M, c0, c1, c2, c3) -> None: ...
    def doit(self, deep: bool = True, evaluate: bool = True, **hints): ...
    def fdiff(self, argindex: int = 1): ...
    def inverse(self, argindex: int = 1): ...

@dataclass(frozen=True)
class CharacteristicCurveCollection:
    tendon_force_length: CharacteristicCurveFunction
    tendon_force_length_inverse: CharacteristicCurveFunction
    fiber_force_length_passive: CharacteristicCurveFunction
    fiber_force_length_passive_inverse: CharacteristicCurveFunction
    fiber_force_length_active: CharacteristicCurveFunction
    fiber_force_velocity: CharacteristicCurveFunction
    fiber_force_velocity_inverse: CharacteristicCurveFunction
    def __iter__(self): ...
