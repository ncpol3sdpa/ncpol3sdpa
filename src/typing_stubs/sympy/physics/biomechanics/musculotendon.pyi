import abc
from _typeshed import Incomplete
from abc import abstractmethod
from enum import IntEnum
from sympy.physics.biomechanics._mixin import _NamedMixin
from sympy.physics.mechanics.actuator import ForceActuator

__all__ = ['MusculotendonBase', 'MusculotendonDeGroote2016', 'MusculotendonFormulation']

class MusculotendonFormulation(IntEnum):
    RIGID_TENDON = 0
    FIBER_LENGTH_EXPLICIT = 1
    TENDON_FORCE_EXPLICIT = 2
    FIBER_LENGTH_IMPLICIT = 3
    TENDON_FORCE_IMPLICIT = 4

class MusculotendonBase(ForceActuator, _NamedMixin, metaclass=abc.ABCMeta):
    name: Incomplete
    def __init__(self, name, pathway, activation_dynamics, *, musculotendon_dynamics=..., tendon_slack_length: Incomplete | None = None, peak_isometric_force: Incomplete | None = None, optimal_fiber_length: Incomplete | None = None, maximal_fiber_velocity: Incomplete | None = None, optimal_pennation_angle: Incomplete | None = None, fiber_damping_coefficient: Incomplete | None = None, with_defaults: bool = False) -> None: ...
    @classmethod
    def with_defaults(cls, name, pathway, activation_dynamics, *, musculotendon_dynamics=..., tendon_slack_length: Incomplete | None = None, peak_isometric_force: Incomplete | None = None, optimal_fiber_length: Incomplete | None = None, maximal_fiber_velocity=..., optimal_pennation_angle=..., fiber_damping_coefficient=...): ...
    @abstractmethod
    def curves(cls): ...
    @property
    def tendon_slack_length(self): ...
    @property
    def l_T_slack(self): ...
    @property
    def peak_isometric_force(self): ...
    @property
    def F_M_max(self): ...
    @property
    def optimal_fiber_length(self): ...
    @property
    def l_M_opt(self): ...
    @property
    def maximal_fiber_velocity(self): ...
    @property
    def v_M_max(self): ...
    @property
    def optimal_pennation_angle(self): ...
    @property
    def alpha_opt(self): ...
    @property
    def fiber_damping_coefficient(self): ...
    @property
    def beta(self): ...
    @property
    def activation_dynamics(self): ...
    @property
    def excitation(self): ...
    @property
    def e(self): ...
    @property
    def activation(self): ...
    @property
    def a(self): ...
    @property
    def musculotendon_dynamics(self): ...
    @property
    def state_vars(self): ...
    @property
    def x(self): ...
    @property
    def input_vars(self): ...
    @property
    def r(self): ...
    @property
    def constants(self): ...
    @property
    def p(self): ...
    @property
    def M(self): ...
    @property
    def F(self): ...
    def rhs(self): ...

class MusculotendonDeGroote2016(MusculotendonBase):
    curves: Incomplete
