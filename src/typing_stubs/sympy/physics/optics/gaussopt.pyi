from _typeshed import Incomplete
from sympy.core.expr import Expr
from sympy.matrices.dense import MutableDenseMatrix

__all__ = ['RayTransferMatrix', 'FreeSpace', 'FlatRefraction', 'CurvedRefraction', 'FlatMirror', 'CurvedMirror', 'ThinLens', 'GeometricRay', 'BeamParameter', 'waist2rayleigh', 'rayleigh2waist', 'geometric_conj_ab', 'geometric_conj_af', 'geometric_conj_bf', 'gaussian_conj', 'conjugate_gauss_beams']

class RayTransferMatrix(MutableDenseMatrix):
    def __new__(cls, *args): ...
    def __mul__(self, other): ...
    @property
    def A(self): ...
    @property
    def B(self): ...
    @property
    def C(self): ...
    @property
    def D(self): ...

class FreeSpace(RayTransferMatrix):
    def __new__(cls, d): ...

class FlatRefraction(RayTransferMatrix):
    def __new__(cls, n1, n2): ...

class CurvedRefraction(RayTransferMatrix):
    def __new__(cls, R, n1, n2): ...

class FlatMirror(RayTransferMatrix):
    def __new__(cls): ...

class CurvedMirror(RayTransferMatrix):
    def __new__(cls, R): ...

class ThinLens(RayTransferMatrix):
    def __new__(cls, f): ...

class GeometricRay(MutableDenseMatrix):
    def __new__(cls, *args): ...
    @property
    def height(self): ...
    @property
    def angle(self): ...

class BeamParameter(Expr):
    def __new__(cls, wavelen, z, z_r: Incomplete | None = None, w: Incomplete | None = None, n: int = 1): ...
    @property
    def wavelen(self): ...
    @property
    def z(self): ...
    @property
    def z_r(self): ...
    @property
    def n(self): ...
    @property
    def q(self): ...
    @property
    def radius(self): ...
    @property
    def w(self): ...
    @property
    def w_0(self): ...
    @property
    def divergence(self): ...
    @property
    def gouy(self): ...
    @property
    def waist_approximation_limit(self): ...

def waist2rayleigh(w, wavelen, n: int = 1): ...
def rayleigh2waist(z_r, wavelen): ...
def geometric_conj_ab(a, b): ...
def geometric_conj_af(a, f): ...
geometric_conj_bf = geometric_conj_af

def gaussian_conj(s_in, z_r_in, f): ...
def conjugate_gauss_beams(wavelen, waist_in, waist_out, **kwargs): ...
