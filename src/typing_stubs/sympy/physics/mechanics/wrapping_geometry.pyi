import abc
from abc import ABC, abstractmethod

__all__ = ['WrappingGeometryBase', 'WrappingCylinder', 'WrappingSphere']

class WrappingGeometryBase(ABC, metaclass=abc.ABCMeta):
    @property
    @abstractmethod
    def point(cls): ...
    @abstractmethod
    def point_on_surface(self, point): ...
    @abstractmethod
    def geodesic_length(self, point_1, point_2): ...
    @abstractmethod
    def geodesic_end_vectors(self, point_1, point_2): ...

class WrappingSphere(WrappingGeometryBase):
    def __init__(self, radius, point) -> None: ...
    @property
    def radius(self): ...
    @radius.setter
    def radius(self, radius) -> None: ...
    @property
    def point(self): ...
    @point.setter
    def point(self, point) -> None: ...
    def point_on_surface(self, point): ...
    def geodesic_length(self, point_1, point_2): ...
    def geodesic_end_vectors(self, point_1, point_2): ...

class WrappingCylinder(WrappingGeometryBase):
    def __init__(self, radius, point, axis) -> None: ...
    @property
    def radius(self): ...
    @radius.setter
    def radius(self, radius) -> None: ...
    @property
    def point(self): ...
    @point.setter
    def point(self, point) -> None: ...
    @property
    def axis(self): ...
    @axis.setter
    def axis(self, axis) -> None: ...
    def point_on_surface(self, point): ...
    def geodesic_length(self, point_1, point_2): ...
    def geodesic_end_vectors(self, point_1, point_2): ...
