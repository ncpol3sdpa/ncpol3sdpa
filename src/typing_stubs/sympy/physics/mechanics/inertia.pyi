from _typeshed import Incomplete
from typing import NamedTuple

__all__ = ['inertia', 'inertia_of_point_mass', 'Inertia']

def inertia(frame, ixx, iyy, izz, ixy: int = 0, iyz: int = 0, izx: int = 0): ...
def inertia_of_point_mass(mass, pos_vec, frame): ...

class Inertia(NamedTuple('Inertia', [('dyadic', Incomplete), ('point', Incomplete)])):
    def __new__(cls, dyadic, point): ...
    @classmethod
    def from_inertia_scalars(cls, point, frame, ixx, iyy, izz, ixy: int = 0, iyz: int = 0, izx: int = 0): ...
    def __add__(self, other) -> None: ...
    def __mul__(self, other) -> None: ...
    __radd__ = __add__
    __rmul__ = __mul__
