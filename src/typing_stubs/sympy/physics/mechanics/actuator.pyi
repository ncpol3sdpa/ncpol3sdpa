import abc
from _typeshed import Incomplete
from abc import ABC, abstractmethod

__all__ = ['ActuatorBase', 'ForceActuator', 'LinearDamper', 'LinearSpring', 'TorqueActuator', 'DuffingSpring']

class ActuatorBase(ABC, metaclass=abc.ABCMeta):
    def __init__(self) -> None: ...
    @abstractmethod
    def to_loads(self): ...

class ForceActuator(ActuatorBase):
    def __init__(self, force, pathway) -> None: ...
    @property
    def force(self): ...
    @force.setter
    def force(self, force) -> None: ...
    @property
    def pathway(self): ...
    @pathway.setter
    def pathway(self, pathway) -> None: ...
    def to_loads(self): ...

class LinearSpring(ForceActuator):
    pathway: Incomplete
    def __init__(self, stiffness, pathway, equilibrium_length=...) -> None: ...
    @property
    def force(self): ...
    @force.setter
    def force(self, force) -> None: ...
    @property
    def stiffness(self): ...
    @stiffness.setter
    def stiffness(self, stiffness) -> None: ...
    @property
    def equilibrium_length(self): ...
    @equilibrium_length.setter
    def equilibrium_length(self, equilibrium_length) -> None: ...

class LinearDamper(ForceActuator):
    pathway: Incomplete
    def __init__(self, damping, pathway) -> None: ...
    @property
    def force(self): ...
    @force.setter
    def force(self, force) -> None: ...
    @property
    def damping(self): ...
    @damping.setter
    def damping(self, damping) -> None: ...

class TorqueActuator(ActuatorBase):
    def __init__(self, torque, axis, target_frame, reaction_frame: Incomplete | None = None) -> None: ...
    @classmethod
    def at_pin_joint(cls, torque, pin_joint): ...
    @property
    def torque(self): ...
    @torque.setter
    def torque(self, torque) -> None: ...
    @property
    def axis(self): ...
    @axis.setter
    def axis(self, axis) -> None: ...
    @property
    def target_frame(self): ...
    @target_frame.setter
    def target_frame(self, target_frame) -> None: ...
    @property
    def reaction_frame(self): ...
    @reaction_frame.setter
    def reaction_frame(self, reaction_frame) -> None: ...
    def to_loads(self): ...

class DuffingSpring(ForceActuator):
    def __init__(self, linear_stiffness, nonlinear_stiffness, pathway, equilibrium_length=...) -> None: ...
    @property
    def linear_stiffness(self): ...
    @linear_stiffness.setter
    def linear_stiffness(self, linear_stiffness) -> None: ...
    @property
    def nonlinear_stiffness(self): ...
    @nonlinear_stiffness.setter
    def nonlinear_stiffness(self, nonlinear_stiffness) -> None: ...
    @property
    def pathway(self): ...
    @pathway.setter
    def pathway(self, pathway) -> None: ...
    @property
    def equilibrium_length(self): ...
    @equilibrium_length.setter
    def equilibrium_length(self, equilibrium_length) -> None: ...
    @property
    def force(self): ...
    @force.setter
    def force(self, force) -> None: ...
