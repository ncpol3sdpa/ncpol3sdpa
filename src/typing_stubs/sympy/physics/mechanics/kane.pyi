from _typeshed import Incomplete
from sympy.physics.mechanics.method import _Methods

__all__ = ['KanesMethod']

class KanesMethod(_Methods):
    explicit_kinematics: Incomplete
    def __init__(self, frame, q_ind, u_ind, kd_eqs: Incomplete | None = None, q_dependent: Incomplete | None = None, configuration_constraints: Incomplete | None = None, u_dependent: Incomplete | None = None, velocity_constraints: Incomplete | None = None, acceleration_constraints: Incomplete | None = None, u_auxiliary: Incomplete | None = None, bodies: Incomplete | None = None, forcelist: Incomplete | None = None, explicit_kinematics: bool = True, kd_eqs_solver: str = 'LU', constraint_solver: str = 'LU') -> None: ...
    def to_linearizer(self, linear_solver: str = 'LU'): ...
    def linearize(self, *, new_method: Incomplete | None = None, linear_solver: str = 'LU', **kwargs): ...
    def kanes_equations(self, bodies: Incomplete | None = None, loads: Incomplete | None = None): ...
    def rhs(self, inv_method: Incomplete | None = None): ...
    def kindiffdict(self): ...
    @property
    def auxiliary_eqs(self): ...
    @property
    def mass_matrix_kin(self): ...
    @property
    def forcing_kin(self): ...
    @property
    def mass_matrix(self): ...
    @property
    def forcing(self): ...
    @property
    def mass_matrix_full(self): ...
    @property
    def forcing_full(self): ...
    @property
    def q(self): ...
    @property
    def u(self): ...
    @property
    def bodylist(self): ...
    @property
    def forcelist(self): ...
    @property
    def bodies(self): ...
    @property
    def loads(self): ...
