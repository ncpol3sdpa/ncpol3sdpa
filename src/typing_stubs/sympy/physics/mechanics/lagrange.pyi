from _typeshed import Incomplete
from sympy.physics.mechanics.method import _Methods

__all__ = ['LagrangesMethod']

class LagrangesMethod(_Methods):
    eom: Incomplete
    lam_coeffs: Incomplete
    inertial: Incomplete
    lam_vec: Incomplete
    coneqs: Incomplete
    def __init__(self, Lagrangian, qs, forcelist: Incomplete | None = None, bodies: Incomplete | None = None, frame: Incomplete | None = None, hol_coneqs: Incomplete | None = None, nonhol_coneqs: Incomplete | None = None) -> None: ...
    def form_lagranges_equations(self): ...
    @property
    def mass_matrix(self): ...
    @property
    def mass_matrix_full(self): ...
    @property
    def forcing(self): ...
    @property
    def forcing_full(self): ...
    def to_linearizer(self, q_ind: Incomplete | None = None, qd_ind: Incomplete | None = None, q_dep: Incomplete | None = None, qd_dep: Incomplete | None = None, linear_solver: str = 'LU'): ...
    def linearize(self, q_ind: Incomplete | None = None, qd_ind: Incomplete | None = None, q_dep: Incomplete | None = None, qd_dep: Incomplete | None = None, linear_solver: str = 'LU', **kwargs): ...
    def solve_multipliers(self, op_point: Incomplete | None = None, sol_type: str = 'dict'): ...
    def rhs(self, inv_method: Incomplete | None = None, **kwargs): ...
    @property
    def q(self): ...
    @property
    def u(self): ...
    @property
    def bodies(self): ...
    @property
    def forcelist(self): ...
    @property
    def loads(self): ...
