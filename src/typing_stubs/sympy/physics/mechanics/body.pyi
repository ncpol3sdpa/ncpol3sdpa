from _typeshed import Incomplete
from sympy.physics.mechanics import Particle, RigidBody

__all__ = ['Body']

class Body(RigidBody, Particle):
    frame: Incomplete
    def __init__(self, name, masscenter: Incomplete | None = None, mass: Incomplete | None = None, frame: Incomplete | None = None, central_inertia: Incomplete | None = None) -> None: ...
    @property
    def loads(self): ...
    @property
    def x(self): ...
    @property
    def y(self): ...
    @property
    def z(self): ...
    @property
    def inertia(self): ...
    @inertia.setter
    def inertia(self, I) -> None: ...
    @property
    def is_rigidbody(self): ...
    def kinetic_energy(self, frame): ...
    def apply_force(self, force, point: Incomplete | None = None, reaction_body: Incomplete | None = None, reaction_point: Incomplete | None = None) -> None: ...
    def apply_torque(self, torque, reaction_body: Incomplete | None = None) -> None: ...
    def clear_loads(self) -> None: ...
    def remove_load(self, about: Incomplete | None = None) -> None: ...
    def masscenter_vel(self, body): ...
    def ang_vel_in(self, body): ...
    def dcm(self, body): ...
    def parallel_axis(self, point, frame: Incomplete | None = None): ...
