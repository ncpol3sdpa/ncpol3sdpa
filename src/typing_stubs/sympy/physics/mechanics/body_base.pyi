import abc
from _typeshed import Incomplete
from abc import ABC, abstractmethod

__all__ = ['BodyBase']

class BodyBase(ABC, metaclass=abc.ABCMeta):
    points: Incomplete
    def __init__(self, name, masscenter: Incomplete | None = None, mass: Incomplete | None = None) -> None: ...
    @property
    def name(self): ...
    @property
    def masscenter(self): ...
    @masscenter.setter
    def masscenter(self, point) -> None: ...
    @property
    def mass(self): ...
    @mass.setter
    def mass(self, mass) -> None: ...
    @property
    def potential_energy(self): ...
    @potential_energy.setter
    def potential_energy(self, scalar) -> None: ...
    @abstractmethod
    def kinetic_energy(self, frame): ...
    @abstractmethod
    def linear_momentum(self, frame): ...
    @abstractmethod
    def angular_momentum(self, point, frame): ...
    @abstractmethod
    def parallel_axis(self, point, frame): ...
