from _typeshed import Incomplete
from sympy.core.expr import Expr
from sympy.physics.quantum.operator import HermitianOperator, Operator, UnitaryOperator
from sympy.physics.quantum.state import Bra, Ket, State

__all__ = ['m_values', 'Jplus', 'Jminus', 'Jx', 'Jy', 'Jz', 'J2', 'Rotation', 'WignerD', 'JxKet', 'JxBra', 'JyKet', 'JyBra', 'JzKet', 'JzBra', 'JzOp', 'J2Op', 'JxKetCoupled', 'JxBraCoupled', 'JyKetCoupled', 'JyBraCoupled', 'JzKetCoupled', 'JzBraCoupled', 'couple', 'uncouple']

def m_values(j): ...

class SpinOpBase:
    @property
    def name(self): ...

class JplusOp(SpinOpBase, Operator):
    basis: str
    def matrix_element(self, j, m, jp, mp): ...

class JminusOp(SpinOpBase, Operator):
    basis: str
    def matrix_element(self, j, m, jp, mp): ...

class JxOp(SpinOpBase, HermitianOperator):
    basis: str

class JyOp(SpinOpBase, HermitianOperator):
    basis: str

class JzOp(SpinOpBase, HermitianOperator):
    basis: str
    def matrix_element(self, j, m, jp, mp): ...

class J2Op(SpinOpBase, HermitianOperator):
    def matrix_element(self, j, m, jp, mp): ...

class Rotation(UnitaryOperator):
    @property
    def alpha(self): ...
    @property
    def beta(self): ...
    @property
    def gamma(self): ...
    @classmethod
    def D(cls, j, m, mp, alpha, beta, gamma): ...
    @classmethod
    def d(cls, j, m, mp, beta): ...
    def matrix_element(self, j, m, jp, mp): ...

class WignerD(Expr):
    is_commutative: bool
    def __new__(cls, *args, **hints): ...
    @property
    def j(self): ...
    @property
    def m(self): ...
    @property
    def mp(self): ...
    @property
    def alpha(self): ...
    @property
    def beta(self): ...
    @property
    def gamma(self): ...
    def doit(self, **hints): ...

Jx: Incomplete
Jy: Incomplete
Jz: Incomplete
J2: Incomplete
Jplus: Incomplete
Jminus: Incomplete

class SpinState(State):
    def __new__(cls, j, m): ...
    @property
    def j(self): ...
    @property
    def m(self): ...

class JxKet(SpinState, Ket):
    @classmethod
    def dual_class(self): ...
    @classmethod
    def coupled_class(self): ...

class JxBra(SpinState, Bra):
    @classmethod
    def dual_class(self): ...
    @classmethod
    def coupled_class(self): ...

class JyKet(SpinState, Ket):
    @classmethod
    def dual_class(self): ...
    @classmethod
    def coupled_class(self): ...

class JyBra(SpinState, Bra):
    @classmethod
    def dual_class(self): ...
    @classmethod
    def coupled_class(self): ...

class JzKet(SpinState, Ket):
    @classmethod
    def dual_class(self): ...
    @classmethod
    def coupled_class(self): ...

class JzBra(SpinState, Bra):
    @classmethod
    def dual_class(self): ...
    @classmethod
    def coupled_class(self): ...

class CoupledSpinState(SpinState):
    def __new__(cls, j, m, jn, *jcoupling): ...
    @property
    def jn(self): ...
    @property
    def coupling(self): ...
    @property
    def coupled_jn(self): ...
    @property
    def coupled_n(self): ...

class JxKetCoupled(CoupledSpinState, Ket):
    @classmethod
    def dual_class(self): ...
    @classmethod
    def uncoupled_class(self): ...

class JxBraCoupled(CoupledSpinState, Bra):
    @classmethod
    def dual_class(self): ...
    @classmethod
    def uncoupled_class(self): ...

class JyKetCoupled(CoupledSpinState, Ket):
    @classmethod
    def dual_class(self): ...
    @classmethod
    def uncoupled_class(self): ...

class JyBraCoupled(CoupledSpinState, Bra):
    @classmethod
    def dual_class(self): ...
    @classmethod
    def uncoupled_class(self): ...

class JzKetCoupled(CoupledSpinState, Ket):
    @classmethod
    def dual_class(self): ...
    @classmethod
    def uncoupled_class(self): ...

class JzBraCoupled(CoupledSpinState, Bra):
    @classmethod
    def dual_class(self): ...
    @classmethod
    def uncoupled_class(self): ...

def couple(expr, jcoupling_list: Incomplete | None = None): ...
def uncouple(expr, jn: Incomplete | None = None, jcoupling_list: Incomplete | None = None): ...
