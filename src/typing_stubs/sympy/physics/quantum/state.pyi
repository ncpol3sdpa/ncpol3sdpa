from _typeshed import Incomplete
from sympy.core.function import Function
from sympy.physics.quantum.qexpr import QExpr

__all__ = ['KetBase', 'BraBase', 'StateBase', 'State', 'Ket', 'Bra', 'TimeDepState', 'TimeDepBra', 'TimeDepKet', 'OrthogonalKet', 'OrthogonalBra', 'OrthogonalState', 'Wavefunction']

class StateBase(QExpr):
    @property
    def operators(self): ...
    @property
    def dual(self): ...
    @classmethod
    def dual_class(self) -> None: ...

class KetBase(StateBase):
    lbracket: Incomplete
    rbracket: Incomplete
    lbracket_ucode: Incomplete
    rbracket_ucode: Incomplete
    lbracket_latex: str
    rbracket_latex: str
    @classmethod
    def default_args(self): ...
    @classmethod
    def dual_class(self): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...

class BraBase(StateBase):
    lbracket: Incomplete
    rbracket: Incomplete
    lbracket_ucode: Incomplete
    rbracket_ucode: Incomplete
    lbracket_latex: str
    rbracket_latex: str
    @classmethod
    def default_args(self): ...
    @classmethod
    def dual_class(self): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...

class State(StateBase): ...

class Ket(State, KetBase):
    @classmethod
    def dual_class(self): ...

class Bra(State, BraBase):
    @classmethod
    def dual_class(self): ...

class TimeDepState(StateBase):
    @classmethod
    def default_args(self): ...
    @property
    def label(self): ...
    @property
    def time(self): ...

class TimeDepKet(TimeDepState, KetBase):
    @classmethod
    def dual_class(self): ...

class TimeDepBra(TimeDepState, BraBase):
    @classmethod
    def dual_class(self): ...

class OrthogonalState(State, StateBase): ...

class OrthogonalKet(OrthogonalState, KetBase):
    @classmethod
    def dual_class(self): ...

class OrthogonalBra(OrthogonalState, BraBase):
    @classmethod
    def dual_class(self): ...

class Wavefunction(Function):
    def __new__(cls, *args, **options): ...
    def __call__(self, *args, **options): ...
    @property
    def free_symbols(self): ...
    @property
    def is_commutative(self): ...
    @classmethod
    def eval(self, *args) -> None: ...
    @property
    def variables(self): ...
    @property
    def limits(self): ...
    @property
    def expr(self): ...
    @property
    def is_normalized(self): ...
    @property
    def norm(self): ...
    def normalize(self): ...
    def prob(self): ...
