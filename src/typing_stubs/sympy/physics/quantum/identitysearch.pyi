from _typeshed import Incomplete
from sympy.core.basic import Basic

__all__ = ['generate_gate_rules', 'generate_equivalent_ids', 'GateIdentity', 'bfs_identity_search', 'random_identity_search', 'is_scalar_sparse_matrix', 'is_scalar_nonsparse_matrix', 'is_degenerate', 'is_reducible']

def is_scalar_sparse_matrix(circuit, nqubits, identity_only, eps: float = 1e-11): ...
def is_scalar_nonsparse_matrix(circuit, nqubits, identity_only, eps: Incomplete | None = None): ...
is_scalar_matrix = is_scalar_sparse_matrix
is_scalar_matrix = is_scalar_nonsparse_matrix

def generate_gate_rules(gate_seq, return_as_muls: bool = False): ...
def generate_equivalent_ids(gate_seq, return_as_muls: bool = False): ...

class GateIdentity(Basic):
    def __new__(cls, *args): ...
    @property
    def circuit(self): ...
    @property
    def gate_rules(self): ...
    @property
    def equivalent_ids(self): ...
    @property
    def sequence(self): ...

def is_degenerate(identity_set, gate_identity): ...
def is_reducible(circuit, nqubits, begin, end): ...
def bfs_identity_search(gate_list, nqubits, max_depth: Incomplete | None = None, identity_only: bool = False): ...
def random_identity_search(gate_list, numgates, nqubits): ...
