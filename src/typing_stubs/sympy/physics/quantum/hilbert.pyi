from _typeshed import Incomplete
from sympy.core.basic import Basic
from sympy.physics.quantum.qexpr import QuantumError

__all__ = ['HilbertSpaceError', 'HilbertSpace', 'TensorProductHilbertSpace', 'TensorPowerHilbertSpace', 'DirectSumHilbertSpace', 'ComplexSpace', 'L2', 'FockSpace']

class HilbertSpaceError(QuantumError): ...

class HilbertSpace(Basic):
    def __new__(cls): ...
    @property
    def dimension(self) -> None: ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...
    def __pow__(self, other, mod: Incomplete | None = None): ...
    def __contains__(self, other) -> bool: ...

class ComplexSpace(HilbertSpace):
    def __new__(cls, dimension): ...
    @classmethod
    def eval(cls, dimension) -> None: ...
    @property
    def dimension(self): ...

class L2(HilbertSpace):
    def __new__(cls, interval): ...
    @property
    def dimension(self): ...
    @property
    def interval(self): ...

class FockSpace(HilbertSpace):
    def __new__(cls): ...
    @property
    def dimension(self): ...

class TensorProductHilbertSpace(HilbertSpace):
    def __new__(cls, *args): ...
    @classmethod
    def eval(cls, args): ...
    @property
    def dimension(self): ...
    @property
    def spaces(self): ...

class DirectSumHilbertSpace(HilbertSpace):
    def __new__(cls, *args): ...
    @classmethod
    def eval(cls, args): ...
    @property
    def dimension(self): ...
    @property
    def spaces(self): ...

class TensorPowerHilbertSpace(HilbertSpace):
    def __new__(cls, *args): ...
    @classmethod
    def eval(cls, args): ...
    @property
    def base(self): ...
    @property
    def exp(self): ...
    @property
    def dimension(self): ...
