from sympy.physics.quantum.state import Bra, Ket, State

__all__ = ['Qubit', 'QubitBra', 'IntQubit', 'IntQubitBra', 'qubit_to_matrix', 'matrix_to_qubit', 'matrix_to_density', 'measure_all', 'measure_partial', 'measure_partial_oneshot', 'measure_all_oneshot']

class QubitState(State):
    @property
    def dimension(self): ...
    @property
    def nqubits(self): ...
    @property
    def qubit_values(self): ...
    def __len__(self) -> int: ...
    def __getitem__(self, bit): ...
    def flip(self, *bits): ...

class Qubit(QubitState, Ket):
    @classmethod
    def dual_class(self): ...

class QubitBra(QubitState, Bra):
    @classmethod
    def dual_class(self): ...

class IntQubitState(QubitState):
    def as_int(self): ...

class IntQubit(IntQubitState, Qubit):
    @classmethod
    def dual_class(self): ...

class IntQubitBra(IntQubitState, QubitBra):
    @classmethod
    def dual_class(self): ...

def matrix_to_qubit(matrix): ...
def matrix_to_density(mat): ...
def qubit_to_matrix(qubit, format: str = 'sympy'): ...
def measure_all(qubit, format: str = 'sympy', normalize: bool = True): ...
def measure_partial(qubit, bits, format: str = 'sympy', normalize: bool = True): ...
def measure_partial_oneshot(qubit, bits, format: str = 'sympy'): ...
def measure_all_oneshot(qubit, format: str = 'sympy'): ...
