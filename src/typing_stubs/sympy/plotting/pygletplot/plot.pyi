from _typeshed import Incomplete
from sympy.core.numbers import Integer as Integer
from sympy.external.gmpy import SYMPY_INTS as SYMPY_INTS
from sympy.geometry.entity import GeometryEntity as GeometryEntity
from sympy.plotting.pygletplot.plot_axes import PlotAxes as PlotAxes
from sympy.plotting.pygletplot.plot_mode import PlotMode as PlotMode
from sympy.plotting.pygletplot.plot_object import PlotObject as PlotObject
from sympy.plotting.pygletplot.plot_window import PlotWindow as PlotWindow
from sympy.plotting.pygletplot.util import parse_option_string as parse_option_string
from sympy.utilities.decorator import doctest_depends_on as doctest_depends_on
from sympy.utilities.iterables import is_sequence as is_sequence

class PygletPlot:
    axes: Incomplete
    def __init__(self, *fargs, **win_args) -> None: ...
    def show(self) -> None: ...
    def close(self) -> None: ...
    def saveimage(self, outfile: Incomplete | None = None, format: str = '', size=(600, 500)) -> None: ...
    def clear(self) -> None: ...
    def __getitem__(self, i): ...
    def __setitem__(self, i, args) -> None: ...
    def __delitem__(self, i) -> None: ...
    def firstavailableindex(self): ...
    def append(self, *args) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def adjust_all_bounds(self) -> None: ...
    def wait_for_calculations(self) -> None: ...

class ScreenShot:
    screenshot_requested: bool
    outfile: Incomplete
    format: str
    invisibleMode: bool
    flag: int
    def __init__(self, plot) -> None: ...
    def __bool__(self) -> bool: ...
    size: Incomplete
    def save(self, outfile: Incomplete | None = None, format: str = '', size=(600, 500)) -> None: ...
