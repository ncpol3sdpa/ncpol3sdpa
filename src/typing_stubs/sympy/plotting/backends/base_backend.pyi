from _typeshed import Incomplete
from sympy.plotting.series import BaseSeries as BaseSeries, GenericDataSeries as GenericDataSeries
from sympy.utilities.exceptions import sympy_deprecation_warning as sympy_deprecation_warning
from sympy.utilities.iterables import is_sequence as is_sequence

__doctest_requires__: Incomplete

def unset_show() -> None: ...

class Plot:
    title: Incomplete
    xlabel: Incomplete
    ylabel: Incomplete
    zlabel: Incomplete
    aspect_ratio: Incomplete
    axis_center: Incomplete
    axis: Incomplete
    xscale: Incomplete
    yscale: Incomplete
    legend: Incomplete
    autoscale: Incomplete
    margin: Incomplete
    xlim: Incomplete
    ylim: Incomplete
    size: Incomplete
    def __init__(self, *args, title: Incomplete | None = None, xlabel: Incomplete | None = None, ylabel: Incomplete | None = None, zlabel: Incomplete | None = None, aspect_ratio: str = 'auto', xlim: Incomplete | None = None, ylim: Incomplete | None = None, axis_center: str = 'auto', axis: bool = True, xscale: str = 'linear', yscale: str = 'linear', legend: bool = False, autoscale: bool = True, margin: int = 0, annotations: Incomplete | None = None, markers: Incomplete | None = None, rectangles: Incomplete | None = None, fill: Incomplete | None = None, backend: str = 'default', size: Incomplete | None = None, **kwargs) -> None: ...
    @property
    def backend(self): ...
    def __getitem__(self, index): ...
    def __setitem__(self, index, *args) -> None: ...
    def __delitem__(self, index) -> None: ...
    def append(self, arg) -> None: ...
    def extend(self, arg) -> None: ...
    def show(self) -> None: ...
    def save(self, path) -> None: ...
    def close(self) -> None: ...
    @property
    def markers(self): ...
    @markers.setter
    def markers(self, v) -> None: ...
    @property
    def annotations(self): ...
    @annotations.setter
    def annotations(self, v) -> None: ...
    @property
    def rectangles(self): ...
    @rectangles.setter
    def rectangles(self, v) -> None: ...
    @property
    def fill(self): ...
    @fill.setter
    def fill(self, v) -> None: ...
