from .intervalmath import interval as interval
from _typeshed import Incomplete
from sympy.calculus.util import continuous_domain as continuous_domain
from sympy.concrete import Product as Product, Sum as Sum
from sympy.core.containers import Tuple as Tuple
from sympy.core.expr import Expr as Expr
from sympy.core.function import arity as arity
from sympy.core.relational import Equality as Equality, GreaterThan as GreaterThan, LessThan as LessThan, Ne as Ne, Relational as Relational
from sympy.core.sorting import default_sort_key as default_sort_key
from sympy.core.symbol import Symbol as Symbol
from sympy.core.sympify import sympify as sympify
from sympy.external import import_module as import_module
from sympy.functions import atan2 as atan2, ceiling as ceiling, floor as floor, frac as frac, im as im, zeta as zeta
from sympy.logic.boolalg import BooleanFunction as BooleanFunction
from sympy.plotting.utils import extract_solution as extract_solution
from sympy.printing.latex import latex as latex
from sympy.printing.precedence import precedence as precedence
from sympy.printing.pycode import PythonCodePrinter as PythonCodePrinter
from sympy.sets.sets import Interval as Interval, Set as Set, Union as Union
from sympy.simplify.simplify import nsimplify as nsimplify
from sympy.utilities.exceptions import sympy_deprecation_warning as sympy_deprecation_warning
from sympy.utilities.lambdify import lambdify as lambdify

class IntervalMathPrinter(PythonCodePrinter): ...

class BaseSeries:
    is_2Dline: bool
    is_3Dline: bool
    is_3Dsurface: bool
    is_contour: bool
    is_implicit: bool
    is_interactive: bool
    is_parametric: bool
    is_generic: bool
    is_vector: bool
    is_2Dvector: bool
    is_3Dvector: bool
    only_integers: Incomplete
    modules: Incomplete
    show_in_legend: Incomplete
    colorbar: Incomplete
    use_cm: Incomplete
    is_polar: Incomplete
    is_point: Incomplete
    color_func: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def expr(self): ...
    @expr.setter
    def expr(self, e) -> None: ...
    @property
    def is_3D(self): ...
    @property
    def is_line(self): ...
    @property
    def line_color(self): ...
    @line_color.setter
    def line_color(self, val) -> None: ...
    @property
    def n(self): ...
    @n.setter
    def n(self, v) -> None: ...
    @property
    def params(self): ...
    @params.setter
    def params(self, p) -> None: ...
    @property
    def scales(self): ...
    @scales.setter
    def scales(self, v) -> None: ...
    @property
    def surface_color(self): ...
    @surface_color.setter
    def surface_color(self, val) -> None: ...
    @property
    def rendering_kw(self): ...
    @rendering_kw.setter
    def rendering_kw(self, kwargs) -> None: ...
    def eval_color_func(self, *args): ...
    def get_data(self) -> None: ...
    def get_label(self, use_latex: bool = False, wrapper: str = '$%s$'): ...
    @property
    def label(self): ...
    @label.setter
    def label(self, val) -> None: ...
    @property
    def ranges(self): ...
    @ranges.setter
    def ranges(self, val) -> None: ...

class Line2DBaseSeries(BaseSeries):
    is_2Dline: bool
    steps: Incomplete
    is_point: Incomplete
    is_filled: Incomplete
    adaptive: Incomplete
    depth: Incomplete
    use_cm: Incomplete
    color_func: Incomplete
    line_color: Incomplete
    detect_poles: Incomplete
    eps: Incomplete
    is_polar: Incomplete
    unwrap: Incomplete
    poles_locations: Incomplete
    exclude: Incomplete
    def __init__(self, **kwargs) -> None: ...
    def get_data(self): ...
    def get_segments(self): ...
    @property
    def var(self): ...
    @property
    def start(self): ...
    @property
    def end(self): ...
    @property
    def xscale(self): ...
    scales: Incomplete
    @xscale.setter
    def xscale(self, v) -> None: ...
    def get_color_array(self): ...

class List2DSeries(Line2DBaseSeries):
    list_x: Incomplete
    list_y: Incomplete
    is_polar: Incomplete
    label: Incomplete
    rendering_kw: Incomplete
    is_parametric: bool
    def __init__(self, list_x, list_y, label: str = '', **kwargs) -> None: ...

class LineOver1DRangeSeries(Line2DBaseSeries):
    expr: Incomplete
    ranges: Incomplete
    adaptive: bool
    def __init__(self, expr, var_start_end, label: str = '', **kwargs) -> None: ...
    @property
    def nb_of_points(self): ...
    n: Incomplete
    @nb_of_points.setter
    def nb_of_points(self, v) -> None: ...
    def get_points(self): ...

class ParametricLineBaseSeries(Line2DBaseSeries):
    is_parametric: bool
    def get_label(self, use_latex: bool = False, wrapper: str = '$%s$'): ...
    def get_parameter_points(self): ...
    def get_points(self): ...
    @property
    def nb_of_points(self): ...
    n: Incomplete
    @nb_of_points.setter
    def nb_of_points(self, v) -> None: ...

class Parametric2DLineSeries(ParametricLineBaseSeries):
    is_2Dline: bool
    expr_x: Incomplete
    expr_y: Incomplete
    expr: Incomplete
    ranges: Incomplete
    use_cm: Incomplete
    def __init__(self, expr_x, expr_y, var_start_end, label: str = '', **kwargs) -> None: ...

class Line3DBaseSeries(Line2DBaseSeries):
    is_2Dline: bool
    is_3Dline: bool
    def __init__(self) -> None: ...

class Parametric3DLineSeries(ParametricLineBaseSeries):
    is_2Dline: bool
    is_3Dline: bool
    expr_x: Incomplete
    expr_y: Incomplete
    expr_z: Incomplete
    expr: Incomplete
    ranges: Incomplete
    adaptive: bool
    use_cm: Incomplete
    def __init__(self, expr_x, expr_y, expr_z, var_start_end, label: str = '', **kwargs) -> None: ...
    def get_data(self): ...

class SurfaceBaseSeries(BaseSeries):
    is_3Dsurface: bool
    use_cm: Incomplete
    is_polar: Incomplete
    surface_color: Incomplete
    color_func: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def get_color_array(self): ...

class SurfaceOver2DRangeSeries(SurfaceBaseSeries):
    expr: Incomplete
    ranges: Incomplete
    def __init__(self, expr, var_start_end_x, var_start_end_y, label: str = '', **kwargs) -> None: ...
    @property
    def var_x(self): ...
    @property
    def var_y(self): ...
    @property
    def start_x(self): ...
    @property
    def end_x(self): ...
    @property
    def start_y(self): ...
    @property
    def end_y(self): ...
    @property
    def nb_of_points_x(self): ...
    n: Incomplete
    @nb_of_points_x.setter
    def nb_of_points_x(self, v) -> None: ...
    @property
    def nb_of_points_y(self): ...
    @nb_of_points_y.setter
    def nb_of_points_y(self, v) -> None: ...
    def get_meshes(self): ...
    def get_data(self): ...

class ParametricSurfaceSeries(SurfaceBaseSeries):
    is_parametric: bool
    expr_x: Incomplete
    expr_y: Incomplete
    expr_z: Incomplete
    expr: Incomplete
    ranges: Incomplete
    color_func: Incomplete
    def __init__(self, expr_x, expr_y, expr_z, var_start_end_u, var_start_end_v, label: str = '', **kwargs) -> None: ...
    @property
    def var_u(self): ...
    @property
    def var_v(self): ...
    @property
    def start_u(self): ...
    @property
    def end_u(self): ...
    @property
    def start_v(self): ...
    @property
    def end_v(self): ...
    @property
    def nb_of_points_u(self): ...
    n: Incomplete
    @nb_of_points_u.setter
    def nb_of_points_u(self, v) -> None: ...
    @property
    def nb_of_points_v(self): ...
    @nb_of_points_v.setter
    def nb_of_points_v(self, v) -> None: ...
    def get_parameter_meshes(self): ...
    def get_meshes(self): ...
    def get_data(self): ...

class ContourSeries(SurfaceOver2DRangeSeries):
    is_3Dsurface: bool
    is_contour: bool
    is_filled: Incomplete
    show_clabels: Incomplete
    rendering_kw: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class GenericDataSeries(BaseSeries):
    is_generic: bool
    type: Incomplete
    args: Incomplete
    rendering_kw: Incomplete
    def __init__(self, tp, *args, **kwargs) -> None: ...
    def get_data(self): ...

class ImplicitSeries(BaseSeries):
    is_implicit: bool
    use_cm: bool
    adaptive: Incomplete
    ranges: Incomplete
    depth: Incomplete
    def __init__(self, expr, var_start_end_x, var_start_end_y, label: str = '', **kwargs) -> None: ...
    @property
    def expr(self): ...
    has_equality: Incomplete
    @expr.setter
    def expr(self, expr) -> None: ...
    @property
    def line_color(self): ...
    @line_color.setter
    def line_color(self, v) -> None: ...
    color = line_color
    def get_data(self): ...
    def get_label(self, use_latex: bool = False, wrapper: str = '$%s$'): ...

def centers_of_segments(array): ...
def centers_of_faces(array): ...
def flat(x, y, z, eps: float = 0.001): ...
