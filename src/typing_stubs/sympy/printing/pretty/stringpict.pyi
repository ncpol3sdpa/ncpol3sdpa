from .pretty_symbology import center as center, hobj as hobj, line_width as line_width, pretty_use_unicode as pretty_use_unicode, vobj as vobj, xobj as xobj, xsym as xsym
from _typeshed import Incomplete
from sympy.utilities.exceptions import sympy_deprecation_warning as sympy_deprecation_warning

class stringPict:
    LINE: str
    s: Incomplete
    picture: Incomplete
    baseline: Incomplete
    binding: Incomplete
    def __init__(self, s, baseline: int = 0) -> None: ...
    @staticmethod
    def equalLengths(lines): ...
    def height(self): ...
    def width(self): ...
    @staticmethod
    def next(*args): ...
    def right(self, *args): ...
    def left(self, *args): ...
    @staticmethod
    def stack(*args): ...
    def below(self, *args): ...
    def above(self, *args): ...
    def parens(self, left: str = '(', right: str = ')', ifascii_nougly: bool = False): ...
    def leftslash(self): ...
    def root(self, n: Incomplete | None = None): ...
    def render(self, *args, **kwargs): ...
    def terminal_width(self): ...
    def __eq__(self, o): ...
    def __hash__(self): ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...

class prettyForm(stringPict):
    ATOM: Incomplete
    FUNC: Incomplete
    DIV: Incomplete
    POW: Incomplete
    MUL: Incomplete
    ADD: Incomplete
    NEG: Incomplete
    OPEN: Incomplete
    binding: Incomplete
    def __init__(self, s, baseline: int = 0, binding: int = 0, unicode: Incomplete | None = None) -> None: ...
    @property
    def unicode(self): ...
    def __add__(self, *others): ...
    def __truediv__(self, den, slashed: bool = False): ...
    def __mul__(self, *others): ...
    def __pow__(self, b): ...
    simpleFunctions: Incomplete
    @staticmethod
    def apply(function, *args): ...
