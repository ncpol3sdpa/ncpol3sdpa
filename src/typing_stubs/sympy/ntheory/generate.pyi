from .primetest import isprime as isprime
from _typeshed import Incomplete
from collections.abc import Generator
from sympy.core.random import randint as randint
from sympy.external.gmpy import sqrt as sqrt
from sympy.utilities.decorator import deprecated as deprecated
from sympy.utilities.misc import as_int as as_int

class Sieve:
    sieve_interval: Incomplete
    def __init__(self, sieve_interval: int = 1000000) -> None: ...
    def extend(self, n) -> None: ...
    def extend_to_no(self, i) -> None: ...
    def primerange(self, a, b: Incomplete | None = None) -> Generator[Incomplete, Incomplete]: ...
    def totientrange(self, a, b) -> Generator[Incomplete]: ...
    def mobiusrange(self, a, b) -> Generator[Incomplete]: ...
    def search(self, n): ...
    def __contains__(self, n) -> bool: ...
    def __iter__(self): ...
    def __getitem__(self, n): ...

sieve: Incomplete

def prime(nth): ...
def primepi(n): ...
def nextprime(n, ith: int = 1): ...
def prevprime(n): ...
def primerange(a, b: Incomplete | None = None) -> Generator[Incomplete, Incomplete]: ...
def randprime(a, b): ...
def primorial(n, nth: bool = True): ...
def cycle_length(f, x0, nmax: Incomplete | None = None, values: bool = False) -> Generator[Incomplete]: ...
def composite(nth): ...
def compositepi(n): ...
