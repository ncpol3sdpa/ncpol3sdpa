from .factor_ import factorint as factorint
from .generate import primerange as primerange
from .modular import crt as crt
from .primetest import isprime as isprime
from _typeshed import Incomplete
from collections.abc import Generator
from sympy.core.random import randint as randint
from sympy.external.gmpy import bit_scan1 as bit_scan1, gcd as gcd, invert as invert, jacobi as jacobi, lcm as lcm, remove as remove, sqrt as sqrt
from sympy.polys import Poly as Poly
from sympy.polys.domains import ZZ as ZZ
from sympy.polys.galoistools import gf_crt1 as gf_crt1, gf_crt2 as gf_crt2, gf_csolve as gf_csolve, linear_congruence as linear_congruence
from sympy.utilities.decorator import deprecated as deprecated
from sympy.utilities.iterables import iproduct as iproduct
from sympy.utilities.memoization import recurrence_memo as recurrence_memo
from sympy.utilities.misc import as_int as as_int

def n_order(a, n): ...
def primitive_root(p, smallest: bool = True): ...
def is_primitive_root(a, p): ...
def sqrt_mod(a, p, all_roots: bool = False): ...
def sqrt_mod_iter(a, p, domain=...) -> Generator[Incomplete, Incomplete]: ...
def is_quad_residue(a, p): ...
def is_nthpow_residue(a, n, m): ...
def nthroot_mod(a, n, p, all_roots: bool = False): ...
def quadratic_residues(p) -> list[int]: ...
def legendre_symbol(a, p): ...
def jacobi_symbol(m, n): ...
def mobius(n): ...
def discrete_log(n, a, b, order: Incomplete | None = None, prime_order: Incomplete | None = None): ...
def quadratic_congruence(a, b, c, n): ...
def polynomial_congruence(expr, m): ...
def binomial_mod(n, m, k): ...
