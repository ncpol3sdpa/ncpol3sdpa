from .factor_ import divisors as divisors
from .residue_ntheory import polynomial_congruence as polynomial_congruence
from _typeshed import Incomplete
from sympy.core.numbers import oo as oo
from sympy.core.symbol import symbols as symbols
from sympy.polys.domains import FF as FF, FiniteField as FiniteField, QQ as QQ, RationalField as RationalField
from sympy.polys.polytools import Poly as Poly
from sympy.solvers.solvers import solve as solve
from sympy.utilities.iterables import is_sequence as is_sequence
from sympy.utilities.misc import as_int as as_int

class EllipticCurve:
    modulus: Incomplete
    def __init__(self, a4, a6, a1: int = 0, a2: int = 0, a3: int = 0, modulus: int = 0) -> None: ...
    def __call__(self, x, y, z: int = 1): ...
    def __contains__(self, point) -> bool: ...
    def minimal(self): ...
    def points(self): ...
    def points_x(self, x): ...
    def torsion_points(self): ...
    @property
    def characteristic(self): ...
    @property
    def discriminant(self): ...
    @property
    def is_singular(self): ...
    @property
    def j_invariant(self): ...
    @property
    def order(self): ...
    @property
    def rank(self): ...

class EllipticCurvePoint:
    @staticmethod
    def point_at_infinity(curve): ...
    x: Incomplete
    y: Incomplete
    z: Incomplete
    def __init__(self, x, y, z, curve) -> None: ...
    def __add__(self, p): ...
    def __lt__(self, other): ...
    def __mul__(self, n): ...
    def __rmul__(self, n): ...
    def __neg__(self): ...
    def __sub__(self, other): ...
    def order(self): ...
