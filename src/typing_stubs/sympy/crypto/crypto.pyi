from _typeshed import Incomplete
from string import printable
from sympy.core import Symbol as Symbol
from sympy.core.numbers import Rational as Rational
from sympy.external.gmpy import GROUND_TYPES as GROUND_TYPES, gcd as gcd, invert as invert
from sympy.matrices import Matrix as Matrix
from sympy.ntheory import factorint as factorint, isprime as isprime, primitive_root as primitive_root
from sympy.ntheory.generate import nextprime as nextprime
from sympy.ntheory.modular import crt as crt
from sympy.polys.domains import FF as FF
from sympy.polys.polytools import Poly as Poly
from sympy.utilities.decorator import doctest_depends_on as doctest_depends_on
from sympy.utilities.iterables import multiset as multiset, uniq as uniq
from sympy.utilities.misc import as_int as as_int, filldedent as filldedent, translate as translate

__doctest_skip__: Incomplete

class NonInvertibleCipherWarning(RuntimeWarning):
    fullMessage: Incomplete
    def __init__(self, msg) -> None: ...
    def warn(self, stacklevel: int = 3) -> None: ...

def AZ(s: Incomplete | None = None): ...

bifid5: Incomplete
bifid6: Incomplete
bifid10 = printable

def padded_key(key, symbols): ...
def check_and_join(phrase, symbols: Incomplete | None = None, filter: Incomplete | None = None): ...
def cycle_list(k, n): ...
def encipher_shift(msg, key, symbols: Incomplete | None = None): ...
def decipher_shift(msg, key, symbols: Incomplete | None = None): ...
def encipher_rot13(msg, symbols: Incomplete | None = None): ...
def decipher_rot13(msg, symbols: Incomplete | None = None): ...
def encipher_affine(msg, key, symbols: Incomplete | None = None, _inverse: bool = False): ...
def decipher_affine(msg, key, symbols: Incomplete | None = None): ...
def encipher_atbash(msg, symbols: Incomplete | None = None): ...
def decipher_atbash(msg, symbols: Incomplete | None = None): ...
def encipher_substitution(msg, old, new: Incomplete | None = None): ...
def encipher_vigenere(msg, key, symbols: Incomplete | None = None): ...
def decipher_vigenere(msg, key, symbols: Incomplete | None = None): ...
def encipher_hill(msg, key, symbols: Incomplete | None = None, pad: str = 'Q'): ...
def decipher_hill(msg, key, symbols: Incomplete | None = None): ...
def encipher_bifid(msg, key, symbols: Incomplete | None = None): ...
def decipher_bifid(msg, key, symbols: Incomplete | None = None): ...
def bifid_square(key): ...
def encipher_bifid5(msg, key): ...
def decipher_bifid5(msg, key): ...
def bifid5_square(key: Incomplete | None = None): ...
def encipher_bifid6(msg, key): ...
def decipher_bifid6(msg, key): ...
def bifid6_square(key: Incomplete | None = None): ...
def rsa_public_key(*args, **kwargs): ...
def rsa_private_key(*args, **kwargs): ...
def encipher_rsa(i, key, factors: Incomplete | None = None): ...
def decipher_rsa(i, key, factors: Incomplete | None = None): ...
def kid_rsa_public_key(a, b, A, B): ...
def kid_rsa_private_key(a, b, A, B): ...
def encipher_kid_rsa(msg, key): ...
def decipher_kid_rsa(msg, key): ...

morse_char: Incomplete
char_morse: Incomplete

def encode_morse(msg, sep: str = '|', mapping: Incomplete | None = None): ...
def decode_morse(msg, sep: str = '|', mapping: Incomplete | None = None): ...
def lfsr_sequence(key, fill, n): ...
def lfsr_autocorrelation(L, P, k): ...
def lfsr_connection_polynomial(s): ...
def elgamal_private_key(digit: int = 10, seed: Incomplete | None = None): ...
def elgamal_public_key(key): ...
def encipher_elgamal(i, key, seed: Incomplete | None = None): ...
def decipher_elgamal(msg, key): ...
def dh_private_key(digit: int = 10, seed: Incomplete | None = None): ...
def dh_public_key(key): ...
def dh_shared_key(key, b): ...
def gm_private_key(p, q, a: Incomplete | None = None): ...
def gm_public_key(p, q, a: Incomplete | None = None, seed: Incomplete | None = None): ...
def encipher_gm(i, key, seed: Incomplete | None = None): ...
def decipher_gm(message, key): ...
def encipher_railfence(message, rails): ...
def decipher_railfence(ciphertext, rails): ...
def bg_private_key(p, q): ...
def bg_public_key(p, q): ...
def encipher_bg(i, key, seed: Incomplete | None = None): ...
def decipher_bg(message, key): ...
