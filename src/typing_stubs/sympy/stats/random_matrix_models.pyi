from _typeshed import Incomplete
from sympy.core.basic import Basic

__all__ = ['CircularEnsemble', 'CircularUnitaryEnsemble', 'CircularOrthogonalEnsemble', 'CircularSymplecticEnsemble', 'GaussianEnsemble', 'GaussianUnitaryEnsemble', 'GaussianOrthogonalEnsemble', 'GaussianSymplecticEnsemble', 'joint_eigen_distribution', 'JointEigenDistribution', 'level_spacing_distribution']

class RandomMatrixEnsembleModel(Basic):
    def __new__(cls, sym, dim: Incomplete | None = None): ...
    symbol: Incomplete
    dimension: Incomplete
    def density(self, expr): ...
    def __call__(self, expr): ...

class GaussianEnsembleModel(RandomMatrixEnsembleModel): ...

class GaussianUnitaryEnsembleModel(GaussianEnsembleModel):
    @property
    def normalization_constant(self): ...
    def density(self, expr): ...
    def joint_eigen_distribution(self): ...
    def level_spacing_distribution(self): ...

class GaussianOrthogonalEnsembleModel(GaussianEnsembleModel):
    @property
    def normalization_constant(self): ...
    def density(self, expr): ...
    def joint_eigen_distribution(self): ...
    def level_spacing_distribution(self): ...

class GaussianSymplecticEnsembleModel(GaussianEnsembleModel):
    @property
    def normalization_constant(self): ...
    def density(self, expr): ...
    def joint_eigen_distribution(self): ...
    def level_spacing_distribution(self): ...

def GaussianEnsemble(sym, dim): ...
def GaussianUnitaryEnsemble(sym, dim): ...
def GaussianOrthogonalEnsemble(sym, dim): ...
def GaussianSymplecticEnsemble(sym, dim): ...

class CircularEnsembleModel(RandomMatrixEnsembleModel):
    def density(self, expr) -> None: ...

class CircularUnitaryEnsembleModel(CircularEnsembleModel):
    def joint_eigen_distribution(self): ...

class CircularOrthogonalEnsembleModel(CircularEnsembleModel):
    def joint_eigen_distribution(self): ...

class CircularSymplecticEnsembleModel(CircularEnsembleModel):
    def joint_eigen_distribution(self): ...

def CircularEnsemble(sym, dim): ...
def CircularUnitaryEnsemble(sym, dim): ...
def CircularOrthogonalEnsemble(sym, dim): ...
def CircularSymplecticEnsemble(sym, dim): ...
def joint_eigen_distribution(mat): ...
def JointEigenDistribution(mat): ...
def level_spacing_distribution(mat): ...
