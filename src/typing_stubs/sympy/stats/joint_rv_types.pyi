from _typeshed import Incomplete
from sympy.stats.joint_rv import JointDistribution

__all__ = ['JointRV', 'MultivariateNormal', 'MultivariateLaplace', 'Dirichlet', 'GeneralizedMultivariateLogGamma', 'GeneralizedMultivariateLogGammaOmega', 'Multinomial', 'MultivariateBeta', 'MultivariateEwens', 'MultivariateT', 'NegativeMultinomial', 'NormalGamma']

class JointDistributionHandmade(JointDistribution):
    is_Continuous: bool
    @property
    def set(self): ...

def JointRV(symbol, pdf, _set: Incomplete | None = None): ...

class MultivariateNormalDistribution(JointDistribution):
    is_Continuous: bool
    @property
    def set(self): ...
    @staticmethod
    def check(mu, sigma) -> None: ...
    def pdf(self, *args): ...

def MultivariateNormal(name, mu, sigma): ...

class MultivariateLaplaceDistribution(JointDistribution):
    is_Continuous: bool
    @property
    def set(self): ...
    @staticmethod
    def check(mu, sigma) -> None: ...
    def pdf(self, *args): ...

def MultivariateLaplace(name, mu, sigma): ...

class MultivariateTDistribution(JointDistribution):
    is_Continuous: bool
    @property
    def set(self): ...
    @staticmethod
    def check(mu, sigma, v) -> None: ...
    def pdf(self, *args): ...

def MultivariateT(syms, mu, sigma, v): ...

class NormalGammaDistribution(JointDistribution):
    is_Continuous: bool
    @staticmethod
    def check(mu, lamda, alpha, beta) -> None: ...
    @property
    def set(self): ...
    def pdf(self, x, tau): ...

def NormalGamma(sym, mu, lamda, alpha, beta): ...

class MultivariateBetaDistribution(JointDistribution):
    is_Continuous: bool
    @staticmethod
    def check(alpha) -> None: ...
    @property
    def set(self): ...
    def pdf(self, *syms): ...

def MultivariateBeta(syms, *alpha): ...
Dirichlet = MultivariateBeta

class MultivariateEwensDistribution(JointDistribution):
    is_Discrete: bool
    is_Continuous: bool
    @staticmethod
    def check(n, theta) -> None: ...
    @property
    def set(self): ...
    def pdf(self, *syms): ...

def MultivariateEwens(syms, n, theta): ...

class GeneralizedMultivariateLogGammaDistribution(JointDistribution):
    is_Continuous: bool
    def check(self, delta, v, l, mu) -> None: ...
    @property
    def set(self): ...
    def pdf(self, *y): ...

def GeneralizedMultivariateLogGamma(syms, delta, v, lamda, mu): ...
def GeneralizedMultivariateLogGammaOmega(syms, omega, v, lamda, mu): ...

class MultinomialDistribution(JointDistribution):
    is_Continuous: bool
    is_Discrete: bool
    @staticmethod
    def check(n, p) -> None: ...
    @property
    def set(self): ...
    def pdf(self, *x): ...

def Multinomial(syms, n, *p): ...

class NegativeMultinomialDistribution(JointDistribution):
    is_Continuous: bool
    is_Discrete: bool
    @staticmethod
    def check(k0, p) -> None: ...
    @property
    def set(self): ...
    def pdf(self, *k): ...

def NegativeMultinomial(syms, k0, *p): ...
