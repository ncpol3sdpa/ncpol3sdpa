from _typeshed import Incomplete
from sympy.core.basic import Basic as Basic
from sympy.core.numbers import pi as pi
from sympy.core.singleton import S as S
from sympy.core.sympify import sympify as sympify
from sympy.external import import_module as import_module
from sympy.functions.elementary.exponential import exp as exp
from sympy.functions.special.gamma_functions import multigamma as multigamma
from sympy.matrices import Determinant as Determinant, ImmutableMatrix as ImmutableMatrix, Inverse as Inverse, MatrixBase as MatrixBase, MatrixSet as MatrixSet, MatrixSymbol as MatrixSymbol, Trace as Trace, Transpose as Transpose, matrix2numpy as matrix2numpy
from sympy.stats.rv import Distribution as Distribution, MatrixDomain as MatrixDomain, NamedArgsMixin as NamedArgsMixin, PSpace as PSpace, RandomMatrixSymbol as RandomMatrixSymbol

class MatrixPSpace(PSpace):
    def __new__(cls, sym, distribution, dim_n, dim_m): ...
    distribution: Incomplete
    symbol: Incomplete
    @property
    def domain(self): ...
    @property
    def value(self): ...
    @property
    def values(self): ...
    def compute_density(self, expr, *args): ...
    def sample(self, size=(), library: str = 'scipy', seed: Incomplete | None = None): ...

def rv(symbol, cls, args): ...

class SampleMatrixScipy:
    def __new__(cls, dist, size, seed: Incomplete | None = None): ...

class SampleMatrixNumpy:
    def __new__(cls, dist, size, seed: Incomplete | None = None): ...

class SampleMatrixPymc:
    def __new__(cls, dist, size, seed: Incomplete | None = None): ...

class MatrixDistribution(Distribution, NamedArgsMixin):
    def __new__(cls, *args): ...
    @staticmethod
    def check(*args) -> None: ...
    def __call__(self, expr): ...
    def sample(self, size=(), library: str = 'scipy', seed: Incomplete | None = None): ...

class MatrixGammaDistribution(MatrixDistribution):
    @staticmethod
    def check(alpha, beta, scale_matrix) -> None: ...
    @property
    def set(self): ...
    @property
    def dimension(self): ...
    def pdf(self, x): ...

def MatrixGamma(symbol, alpha, beta, scale_matrix): ...

class WishartDistribution(MatrixDistribution):
    @staticmethod
    def check(n, scale_matrix) -> None: ...
    @property
    def set(self): ...
    @property
    def dimension(self): ...
    def pdf(self, x): ...

def Wishart(symbol, n, scale_matrix): ...

class MatrixNormalDistribution(MatrixDistribution):
    @staticmethod
    def check(location_matrix, scale_matrix_1, scale_matrix_2) -> None: ...
    @property
    def set(self): ...
    @property
    def dimension(self): ...
    def pdf(self, x): ...

def MatrixNormal(symbol, location_matrix, scale_matrix_1, scale_matrix_2): ...

class MatrixStudentTDistribution(MatrixDistribution):
    @staticmethod
    def check(nu, location_matrix, scale_matrix_1, scale_matrix_2) -> None: ...
    @property
    def set(self): ...
    @property
    def dimension(self): ...
    def pdf(self, x): ...

def MatrixStudentT(symbol, nu, location_matrix, scale_matrix_1, scale_matrix_2): ...
