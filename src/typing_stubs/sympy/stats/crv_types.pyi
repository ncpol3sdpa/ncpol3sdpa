from _typeshed import Incomplete
from sympy.stats.crv import SingleContinuousDistribution

__all__ = ['ContinuousRV', 'Arcsin', 'Benini', 'Beta', 'BetaNoncentral', 'BetaPrime', 'BoundedPareto', 'Cauchy', 'Chi', 'ChiNoncentral', 'ChiSquared', 'Dagum', 'Davis', 'Erlang', 'ExGaussian', 'Exponential', 'ExponentialPower', 'FDistribution', 'FisherZ', 'Frechet', 'Gamma', 'GammaInverse', 'Gompertz', 'Gumbel', 'Kumaraswamy', 'Laplace', 'Levy', 'LogCauchy', 'Logistic', 'LogLogistic', 'LogitNormal', 'LogNormal', 'Lomax', 'Maxwell', 'Moyal', 'Nakagami', 'Normal', 'GaussianInverse', 'Pareto', 'PowerFunction', 'QuadraticU', 'RaisedCosine', 'Rayleigh', 'Reciprocal', 'StudentT', 'ShiftedGompertz', 'Trapezoidal', 'Triangular', 'Uniform', 'UniformSum', 'VonMises', 'Wald', 'Weibull', 'WignerSemicircle']

class ContinuousDistributionHandmade(SingleContinuousDistribution):
    def __new__(cls, pdf, set=...): ...
    @property
    def set(self): ...
    @staticmethod
    def check(pdf, set) -> None: ...

def ContinuousRV(symbol, density, set=..., **kwargs): ...

class ArcsinDistribution(SingleContinuousDistribution):
    @property
    def set(self): ...
    def pdf(self, x): ...

def Arcsin(name, a: int = 0, b: int = 1): ...

class BeniniDistribution(SingleContinuousDistribution):
    @staticmethod
    def check(alpha, beta, sigma) -> None: ...
    @property
    def set(self): ...
    def pdf(self, x): ...

def Benini(name, alpha, beta, sigma): ...

class BetaDistribution(SingleContinuousDistribution):
    set: Incomplete
    @staticmethod
    def check(alpha, beta) -> None: ...
    def pdf(self, x): ...

def Beta(name, alpha, beta): ...

class BetaNoncentralDistribution(SingleContinuousDistribution):
    set: Incomplete
    @staticmethod
    def check(alpha, beta, lamda) -> None: ...
    def pdf(self, x): ...

def BetaNoncentral(name, alpha, beta, lamda): ...

class BetaPrimeDistribution(SingleContinuousDistribution):
    @staticmethod
    def check(alpha, beta) -> None: ...
    set: Incomplete
    def pdf(self, x): ...

def BetaPrime(name, alpha, beta): ...

class BoundedParetoDistribution(SingleContinuousDistribution):
    @property
    def set(self): ...
    @staticmethod
    def check(alpha, left, right) -> None: ...
    def pdf(self, x): ...

def BoundedPareto(name, alpha, left, right): ...

class CauchyDistribution(SingleContinuousDistribution):
    @staticmethod
    def check(x0, gamma) -> None: ...
    def pdf(self, x): ...

def Cauchy(name, x0, gamma): ...

class ChiDistribution(SingleContinuousDistribution):
    @staticmethod
    def check(k) -> None: ...
    set: Incomplete
    def pdf(self, x): ...

def Chi(name, k): ...

class ChiNoncentralDistribution(SingleContinuousDistribution):
    @staticmethod
    def check(k, l) -> None: ...
    set: Incomplete
    def pdf(self, x): ...

def ChiNoncentral(name, k, l): ...

class ChiSquaredDistribution(SingleContinuousDistribution):
    @staticmethod
    def check(k) -> None: ...
    set: Incomplete
    def pdf(self, x): ...

def ChiSquared(name, k): ...

class DagumDistribution(SingleContinuousDistribution):
    set: Incomplete
    @staticmethod
    def check(p, a, b) -> None: ...
    def pdf(self, x): ...

def Dagum(name, p, a, b): ...

class DavisDistribution(SingleContinuousDistribution):
    set: Incomplete
    @staticmethod
    def check(b, n, mu) -> None: ...
    def pdf(self, x): ...

def Davis(name, b, n, mu): ...
def Erlang(name, k, l): ...

class ExGaussianDistribution(SingleContinuousDistribution):
    set: Incomplete
    @staticmethod
    def check(mean, std, rate) -> None: ...
    def pdf(self, x): ...

def ExGaussian(name, mean, std, rate): ...

class ExponentialDistribution(SingleContinuousDistribution):
    set: Incomplete
    @staticmethod
    def check(rate) -> None: ...
    def pdf(self, x): ...

def Exponential(name, rate): ...

class ExponentialPowerDistribution(SingleContinuousDistribution):
    set: Incomplete
    @staticmethod
    def check(mu, alpha, beta) -> None: ...
    def pdf(self, x): ...

def ExponentialPower(name, mu, alpha, beta): ...

class FDistributionDistribution(SingleContinuousDistribution):
    set: Incomplete
    @staticmethod
    def check(d1, d2) -> None: ...
    def pdf(self, x): ...

def FDistribution(name, d1, d2): ...

class FisherZDistribution(SingleContinuousDistribution):
    set: Incomplete
    @staticmethod
    def check(d1, d2) -> None: ...
    def pdf(self, x): ...

def FisherZ(name, d1, d2): ...

class FrechetDistribution(SingleContinuousDistribution):
    set: Incomplete
    @staticmethod
    def check(a, s, m) -> None: ...
    def __new__(cls, a, s: int = 1, m: int = 0): ...
    def pdf(self, x): ...

def Frechet(name, a, s: int = 1, m: int = 0): ...

class GammaDistribution(SingleContinuousDistribution):
    set: Incomplete
    @staticmethod
    def check(k, theta) -> None: ...
    def pdf(self, x): ...

def Gamma(name, k, theta): ...

class GammaInverseDistribution(SingleContinuousDistribution):
    set: Incomplete
    @staticmethod
    def check(a, b) -> None: ...
    def pdf(self, x): ...

def GammaInverse(name, a, b): ...

class GumbelDistribution(SingleContinuousDistribution):
    set: Incomplete
    @staticmethod
    def check(beta, mu, minimum) -> None: ...
    def pdf(self, x): ...

def Gumbel(name, beta, mu, minimum: bool = False): ...

class GompertzDistribution(SingleContinuousDistribution):
    set: Incomplete
    @staticmethod
    def check(b, eta) -> None: ...
    def pdf(self, x): ...

def Gompertz(name, b, eta): ...

class KumaraswamyDistribution(SingleContinuousDistribution):
    set: Incomplete
    @staticmethod
    def check(a, b) -> None: ...
    def pdf(self, x): ...

def Kumaraswamy(name, a, b): ...

class LaplaceDistribution(SingleContinuousDistribution):
    set: Incomplete
    @staticmethod
    def check(mu, b) -> None: ...
    def pdf(self, x): ...

def Laplace(name, mu, b): ...

class LevyDistribution(SingleContinuousDistribution):
    @property
    def set(self): ...
    @staticmethod
    def check(mu, c) -> None: ...
    def pdf(self, x): ...

def Levy(name, mu, c): ...

class LogCauchyDistribution(SingleContinuousDistribution):
    set: Incomplete
    @staticmethod
    def check(mu, sigma) -> None: ...
    def pdf(self, x): ...

def LogCauchy(name, mu, sigma): ...

class LogisticDistribution(SingleContinuousDistribution):
    set: Incomplete
    @staticmethod
    def check(mu, s) -> None: ...
    def pdf(self, x): ...

def Logistic(name, mu, s): ...

class LogLogisticDistribution(SingleContinuousDistribution):
    set: Incomplete
    @staticmethod
    def check(alpha, beta) -> None: ...
    def pdf(self, x): ...
    def expectation(self, expr, var, **kwargs): ...

def LogLogistic(name, alpha, beta): ...

class LogitNormalDistribution(SingleContinuousDistribution):
    set: Incomplete
    @staticmethod
    def check(mu, s) -> None: ...
    def pdf(self, x): ...

def LogitNormal(name, mu, s): ...

class LogNormalDistribution(SingleContinuousDistribution):
    set: Incomplete
    @staticmethod
    def check(mean, std) -> None: ...
    def pdf(self, x): ...

def LogNormal(name, mean, std): ...

class LomaxDistribution(SingleContinuousDistribution):
    set: Incomplete
    @staticmethod
    def check(alpha, lamda) -> None: ...
    def pdf(self, x): ...

def Lomax(name, alpha, lamda): ...

class MaxwellDistribution(SingleContinuousDistribution):
    set: Incomplete
    @staticmethod
    def check(a) -> None: ...
    def pdf(self, x): ...

def Maxwell(name, a): ...

class MoyalDistribution(SingleContinuousDistribution):
    @staticmethod
    def check(mu, sigma) -> None: ...
    def pdf(self, x): ...

def Moyal(name, mu, sigma): ...

class NakagamiDistribution(SingleContinuousDistribution):
    set: Incomplete
    @staticmethod
    def check(mu, omega) -> None: ...
    def pdf(self, x): ...

def Nakagami(name, mu, omega): ...

class NormalDistribution(SingleContinuousDistribution):
    @staticmethod
    def check(mean, std) -> None: ...
    def pdf(self, x): ...

def Normal(name, mean, std): ...

class GaussianInverseDistribution(SingleContinuousDistribution):
    @property
    def set(self): ...
    @staticmethod
    def check(mean, shape) -> None: ...
    def pdf(self, x): ...

def GaussianInverse(name, mean, shape): ...
Wald = GaussianInverse

class ParetoDistribution(SingleContinuousDistribution):
    @property
    def set(self): ...
    @staticmethod
    def check(xm, alpha) -> None: ...
    def pdf(self, x): ...

def Pareto(name, xm, alpha): ...

class PowerFunctionDistribution(SingleContinuousDistribution):
    @property
    def set(self): ...
    @staticmethod
    def check(alpha, a, b) -> None: ...
    def pdf(self, x): ...

def PowerFunction(name, alpha, a, b): ...

class QuadraticUDistribution(SingleContinuousDistribution):
    @property
    def set(self): ...
    @staticmethod
    def check(a, b) -> None: ...
    def pdf(self, x): ...

def QuadraticU(name, a, b): ...

class RaisedCosineDistribution(SingleContinuousDistribution):
    @property
    def set(self): ...
    @staticmethod
    def check(mu, s) -> None: ...
    def pdf(self, x): ...

def RaisedCosine(name, mu, s): ...

class RayleighDistribution(SingleContinuousDistribution):
    set: Incomplete
    @staticmethod
    def check(sigma) -> None: ...
    def pdf(self, x): ...

def Rayleigh(name, sigma): ...

class ReciprocalDistribution(SingleContinuousDistribution):
    @property
    def set(self): ...
    @staticmethod
    def check(a, b) -> None: ...
    def pdf(self, x): ...

def Reciprocal(name, a, b): ...

class ShiftedGompertzDistribution(SingleContinuousDistribution):
    set: Incomplete
    @staticmethod
    def check(b, eta) -> None: ...
    def pdf(self, x): ...

def ShiftedGompertz(name, b, eta): ...

class StudentTDistribution(SingleContinuousDistribution):
    set: Incomplete
    @staticmethod
    def check(nu) -> None: ...
    def pdf(self, x): ...

def StudentT(name, nu): ...

class TrapezoidalDistribution(SingleContinuousDistribution):
    @property
    def set(self): ...
    @staticmethod
    def check(a, b, c, d) -> None: ...
    def pdf(self, x): ...

def Trapezoidal(name, a, b, c, d): ...

class TriangularDistribution(SingleContinuousDistribution):
    @property
    def set(self): ...
    @staticmethod
    def check(a, b, c) -> None: ...
    def pdf(self, x): ...

def Triangular(name, a, b, c): ...

class UniformDistribution(SingleContinuousDistribution):
    @property
    def set(self): ...
    @staticmethod
    def check(left, right) -> None: ...
    def pdf(self, x): ...
    def expectation(self, expr, var, **kwargs): ...

def Uniform(name, left, right): ...

class UniformSumDistribution(SingleContinuousDistribution):
    @property
    def set(self): ...
    @staticmethod
    def check(n) -> None: ...
    def pdf(self, x): ...

def UniformSum(name, n): ...

class VonMisesDistribution(SingleContinuousDistribution):
    set: Incomplete
    @staticmethod
    def check(mu, k) -> None: ...
    def pdf(self, x): ...

def VonMises(name, mu, k): ...

class WeibullDistribution(SingleContinuousDistribution):
    set: Incomplete
    @staticmethod
    def check(alpha, beta) -> None: ...
    def pdf(self, x): ...

def Weibull(name, alpha, beta): ...

class WignerSemicircleDistribution(SingleContinuousDistribution):
    @property
    def set(self): ...
    @staticmethod
    def check(R) -> None: ...
    def pdf(self, x): ...

def WignerSemicircle(name, R): ...
