from _typeshed import Incomplete
from sympy.stats.drv import SingleDiscreteDistribution

__all__ = ['FlorySchulz', 'Geometric', 'Hermite', 'Logarithmic', 'NegativeBinomial', 'Poisson', 'Skellam', 'YuleSimon', 'Zeta']

class DiscreteDistributionHandmade(SingleDiscreteDistribution):
    def __new__(cls, pdf, set=...): ...
    @property
    def set(self): ...
    @staticmethod
    def check(pdf, set) -> None: ...

class FlorySchulzDistribution(SingleDiscreteDistribution):
    set: Incomplete
    @staticmethod
    def check(a) -> None: ...
    def pdf(self, k): ...

def FlorySchulz(name, a): ...

class GeometricDistribution(SingleDiscreteDistribution):
    set: Incomplete
    @staticmethod
    def check(p) -> None: ...
    def pdf(self, k): ...

def Geometric(name, p): ...

class HermiteDistribution(SingleDiscreteDistribution):
    set: Incomplete
    @staticmethod
    def check(a1, a2) -> None: ...
    def pdf(self, k): ...

def Hermite(name, a1, a2): ...

class LogarithmicDistribution(SingleDiscreteDistribution):
    set: Incomplete
    @staticmethod
    def check(p) -> None: ...
    def pdf(self, k): ...

def Logarithmic(name, p): ...

class NegativeBinomialDistribution(SingleDiscreteDistribution):
    set: Incomplete
    @staticmethod
    def check(r, p) -> None: ...
    def pdf(self, k): ...

def NegativeBinomial(name, r, p): ...

class PoissonDistribution(SingleDiscreteDistribution):
    set: Incomplete
    @staticmethod
    def check(lamda) -> None: ...
    def pdf(self, k): ...

def Poisson(name, lamda): ...

class SkellamDistribution(SingleDiscreteDistribution):
    set: Incomplete
    @staticmethod
    def check(mu1, mu2) -> None: ...
    def pdf(self, k): ...

def Skellam(name, mu1, mu2): ...

class YuleSimonDistribution(SingleDiscreteDistribution):
    set: Incomplete
    @staticmethod
    def check(rho) -> None: ...
    def pdf(self, k): ...

def YuleSimon(name, rho): ...

class ZetaDistribution(SingleDiscreteDistribution):
    set: Incomplete
    @staticmethod
    def check(s) -> None: ...
    def pdf(self, k): ...

def Zeta(name, s): ...
