from _typeshed import Incomplete
from sympy.core.expr import Expr

__all__ = ['Probability', 'Expectation', 'Variance', 'Covariance']

class Probability(Expr):
    is_commutative: bool
    def __new__(cls, prob, condition: Incomplete | None = None, **kwargs): ...
    def doit(self, **hints): ...
    def evaluate_integral(self): ...

class Expectation(Expr):
    def __new__(cls, expr, condition: Incomplete | None = None, **kwargs): ...
    def expand(self, **hints): ...
    def doit(self, **hints): ...
    def evaluate_integral(self): ...
    evaluate_sum = evaluate_integral

class Variance(Expr):
    def __new__(cls, arg, condition: Incomplete | None = None, **kwargs): ...
    def expand(self, **hints): ...
    def evaluate_integral(self): ...

class Covariance(Expr):
    def __new__(cls, arg1, arg2, condition: Incomplete | None = None, **kwargs): ...
    def expand(self, **hints): ...
    def evaluate_integral(self): ...

class Moment(Expr):
    def __new__(cls, X, n, c: int = 0, condition: Incomplete | None = None, **kwargs): ...
    def doit(self, **hints): ...

class CentralMoment(Expr):
    def __new__(cls, X, n, condition: Incomplete | None = None, **kwargs): ...
    def doit(self, **hints): ...
