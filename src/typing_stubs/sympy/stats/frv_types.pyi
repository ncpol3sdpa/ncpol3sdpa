from sympy.stats.frv import SingleFiniteDistribution

__all__ = ['FiniteRV', 'DiscreteUniform', 'Die', 'Bernoulli', 'Coin', 'Binomial', 'BetaBinomial', 'Hypergeometric', 'Rademacher', 'IdealSoliton', 'RobustSoliton']

class FiniteDistributionHandmade(SingleFiniteDistribution):
    @property
    def dict(self): ...
    def pmf(self, x): ...
    @property
    def set(self): ...
    @staticmethod
    def check(density) -> None: ...

def FiniteRV(name, density, **kwargs): ...

class DiscreteUniformDistribution(SingleFiniteDistribution):
    @staticmethod
    def check(*args) -> None: ...
    @property
    def p(self): ...
    @property
    def dict(self): ...
    @property
    def set(self): ...
    def pmf(self, x): ...

def DiscreteUniform(name, items): ...

class DieDistribution(SingleFiniteDistribution):
    @staticmethod
    def check(sides) -> None: ...
    @property
    def is_symbolic(self): ...
    @property
    def high(self): ...
    @property
    def low(self): ...
    @property
    def set(self): ...
    def pmf(self, x): ...

def Die(name, sides: int = 6): ...

class BernoulliDistribution(SingleFiniteDistribution):
    @staticmethod
    def check(p, succ, fail) -> None: ...
    @property
    def set(self): ...
    def pmf(self, x): ...

def Bernoulli(name, p, succ: int = 1, fail: int = 0): ...
def Coin(name, p=...): ...

class BinomialDistribution(SingleFiniteDistribution):
    @staticmethod
    def check(n, p, succ, fail) -> None: ...
    @property
    def high(self): ...
    @property
    def low(self): ...
    @property
    def is_symbolic(self): ...
    @property
    def set(self): ...
    def pmf(self, x): ...
    @property
    def dict(self): ...

def Binomial(name, n, p, succ: int = 1, fail: int = 0): ...

class BetaBinomialDistribution(SingleFiniteDistribution):
    @staticmethod
    def check(n, alpha, beta) -> None: ...
    @property
    def high(self): ...
    @property
    def low(self): ...
    @property
    def is_symbolic(self): ...
    @property
    def set(self): ...
    def pmf(self, k): ...

def BetaBinomial(name, n, alpha, beta): ...

class HypergeometricDistribution(SingleFiniteDistribution):
    @staticmethod
    def check(n, N, m) -> None: ...
    @property
    def is_symbolic(self): ...
    @property
    def high(self): ...
    @property
    def low(self): ...
    @property
    def set(self): ...
    def pmf(self, k): ...

def Hypergeometric(name, N, m, n): ...

class RademacherDistribution(SingleFiniteDistribution):
    @property
    def set(self): ...
    @property
    def pmf(self): ...

def Rademacher(name): ...

class IdealSolitonDistribution(SingleFiniteDistribution):
    @staticmethod
    def check(k) -> None: ...
    @property
    def low(self): ...
    @property
    def high(self): ...
    @property
    def set(self): ...
    @property
    def dict(self): ...
    def pmf(self, x): ...

def IdealSoliton(name, k): ...

class RobustSolitonDistribution(SingleFiniteDistribution):
    @staticmethod
    def check(k, delta, c) -> None: ...
    @property
    def R(self): ...
    @property
    def Z(self): ...
    @property
    def low(self): ...
    @property
    def high(self): ...
    @property
    def set(self): ...
    @property
    def is_symbolic(self): ...
    def pmf(self, x): ...

def RobustSoliton(name, k, delta, c): ...
