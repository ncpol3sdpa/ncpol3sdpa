import sympy.integrals.laplace as _laplace
from _typeshed import Incomplete
from sympy.core import S as S, pi as pi
from sympy.core.add import Add as Add
from sympy.core.function import AppliedUndef as AppliedUndef, Function as Function, count_ops as count_ops, expand as expand, expand_mul as expand_mul
from sympy.core.intfunc import igcd as igcd, ilcm as ilcm
from sympy.core.mul import Mul as Mul
from sympy.core.sorting import default_sort_key as default_sort_key
from sympy.core.symbol import Dummy as Dummy
from sympy.core.traversal import postorder_traversal as postorder_traversal
from sympy.functions.combinatorial.factorials import factorial as factorial, rf as rf
from sympy.functions.elementary.complexes import Abs as Abs, arg as arg, re as re
from sympy.functions.elementary.exponential import exp as exp, exp_polar as exp_polar
from sympy.functions.elementary.hyperbolic import cosh as cosh, coth as coth, sinh as sinh, tanh as tanh
from sympy.functions.elementary.integers import ceiling as ceiling
from sympy.functions.elementary.miscellaneous import Max as Max, Min as Min, sqrt as sqrt
from sympy.functions.elementary.piecewise import piecewise_fold as piecewise_fold
from sympy.functions.elementary.trigonometric import cos as cos, cot as cot, sin as sin, tan as tan
from sympy.functions.special.bessel import besselj as besselj
from sympy.functions.special.delta_functions import Heaviside as Heaviside
from sympy.functions.special.gamma_functions import gamma as gamma
from sympy.functions.special.hyper import meijerg as meijerg
from sympy.integrals import Integral as Integral, integrate as integrate
from sympy.logic.boolalg import And as And, Or as Or, conjuncts as conjuncts, disjuncts as disjuncts, to_cnf as to_cnf
from sympy.polys.polyroots import roots as roots
from sympy.polys.polytools import Poly as Poly, factor as factor
from sympy.polys.rootoftools import CRootOf as CRootOf
from sympy.utilities.iterables import iterable as iterable
from sympy.utilities.misc import debug as debug

class IntegralTransformError(NotImplementedError):
    function: Incomplete
    def __init__(self, transform, function, msg) -> None: ...

class IntegralTransform(Function):
    @property
    def function(self): ...
    @property
    def function_variable(self): ...
    @property
    def transform_variable(self): ...
    @property
    def free_symbols(self): ...
    def doit(self, **hints): ...
    @property
    def as_integral(self): ...

class MellinTransform(IntegralTransform): ...

def mellin_transform(f, x, s, **hints): ...

class MellinTransformStripError(ValueError): ...

class InverseMellinTransform(IntegralTransform):
    def __new__(cls, F, s, x, a, b, **opts): ...
    @property
    def fundamental_strip(self): ...

def inverse_mellin_transform(F, s, x, strip, **hints): ...

class FourierTypeTransform(IntegralTransform):
    def a(self) -> None: ...
    def b(self) -> None: ...

class FourierTransform(FourierTypeTransform):
    def a(self): ...
    def b(self): ...

def fourier_transform(f, x, k, **hints): ...

class InverseFourierTransform(FourierTypeTransform):
    def a(self): ...
    def b(self): ...

def inverse_fourier_transform(F, k, x, **hints): ...

class SineCosineTypeTransform(IntegralTransform):
    def a(self) -> None: ...
    def b(self) -> None: ...

class SineTransform(SineCosineTypeTransform):
    def a(self): ...
    def b(self): ...

def sine_transform(f, x, k, **hints): ...

class InverseSineTransform(SineCosineTypeTransform):
    def a(self): ...
    def b(self): ...

def inverse_sine_transform(F, k, x, **hints): ...

class CosineTransform(SineCosineTypeTransform):
    def a(self): ...
    def b(self): ...

def cosine_transform(f, x, k, **hints): ...

class InverseCosineTransform(SineCosineTypeTransform):
    def a(self): ...
    def b(self): ...

def inverse_cosine_transform(F, k, x, **hints): ...

class HankelTypeTransform(IntegralTransform):
    def doit(self, **hints): ...
    @property
    def as_integral(self): ...

class HankelTransform(HankelTypeTransform): ...

def hankel_transform(f, r, k, nu, **hints): ...

class InverseHankelTransform(HankelTypeTransform): ...

def inverse_hankel_transform(F, k, r, nu, **hints): ...
LaplaceTransform = _laplace.LaplaceTransform
laplace_transform = _laplace.laplace_transform
laplace_correspondence = _laplace.laplace_correspondence
laplace_initial_conds = _laplace.laplace_initial_conds
InverseLaplaceTransform = _laplace.InverseLaplaceTransform
inverse_laplace_transform = _laplace.inverse_laplace_transform
