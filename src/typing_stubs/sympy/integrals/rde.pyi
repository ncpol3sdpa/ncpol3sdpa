from _typeshed import Incomplete
from sympy.core import oo as oo
from sympy.core.symbol import Dummy as Dummy
from sympy.functions.elementary.complexes import im as im, re as re
from sympy.functions.elementary.miscellaneous import sqrt as sqrt
from sympy.integrals.risch import DecrementLevel as DecrementLevel, NonElementaryIntegralException as NonElementaryIntegralException, derivation as derivation, frac_in as frac_in, gcdex_diophantine as gcdex_diophantine, recognize_log_derivative as recognize_log_derivative, splitfactor as splitfactor
from sympy.polys import Poly as Poly, ZZ as ZZ, cancel as cancel, gcd as gcd

def order_at(a, p, t): ...
def order_at_oo(a, d, t): ...
def weak_normalizer(a, d, DE, z: Incomplete | None = None): ...
def normal_denom(fa, fd, ga, gd, DE): ...
def special_denom(a, ba, bd, ca, cd, DE, case: str = 'auto'): ...
def bound_degree(a, b, cQ, DE, case: str = 'auto', parametric: bool = False): ...
def spde(a, b, c, n, DE): ...
def no_cancel_b_large(b, c, n, DE): ...
def no_cancel_b_small(b, c, n, DE): ...
def no_cancel_equal(b, c, n, DE): ...
def cancel_primitive(b, c, n, DE): ...
def cancel_exp(b, c, n, DE): ...
def solve_poly_rde(b, cQ, n, DE, parametric: bool = False): ...
def rischDE(fa, fd, ga, gd, DE): ...
