from _typeshed import Incomplete
from sympy.core import Add as Add, Dummy as Dummy, Mul as Mul, Pow as Pow, S as S
from sympy.core.intfunc import ilcm as ilcm
from sympy.integrals.rde import bound_degree as bound_degree, order_at as order_at, order_at_oo as order_at_oo, weak_normalizer as weak_normalizer
from sympy.integrals.risch import DecrementLevel as DecrementLevel, derivation as derivation, frac_in as frac_in, gcdex_diophantine as gcdex_diophantine, recognize_log_derivative as recognize_log_derivative, residue_reduce as residue_reduce, residue_reduce_derivation as residue_reduce_derivation, splitfactor as splitfactor
from sympy.polys import Poly as Poly, cancel as cancel, lcm as lcm, sqf_list as sqf_list
from sympy.solvers import solve as solve

zeros: Incomplete
eye: Incomplete

def prde_normal_denom(fa, fd, G, DE): ...
def real_imag(ba, bd, gen): ...
def prde_special_denom(a, ba, bd, G, DE, case: str = 'auto'): ...
def prde_linear_constraints(a, b, G, DE): ...
def poly_linear_constraints(p, d): ...
def constant_system(A, u, DE): ...
def prde_spde(a, b, Q, n, DE): ...
def prde_no_cancel_b_large(b, Q, n, DE): ...
def prde_no_cancel_b_small(b, Q, n, DE): ...
def prde_cancel_liouvillian(b, Q, n, DE): ...
def param_poly_rischDE(a, b, q, n, DE): ...
def param_rischDE(fa, fd, G, DE): ...
def limited_integrate_reduce(fa, fd, G, DE): ...
def limited_integrate(fa, fd, G, DE): ...
def parametric_log_deriv_heu(fa, fd, wa, wd, DE, c1: Incomplete | None = None): ...
def parametric_log_deriv(fa, fd, wa, wd, DE): ...
def is_deriv_k(fa, fd, DE): ...
def is_log_deriv_k_t_radical(fa, fd, DE, Df: bool = True): ...
def is_log_deriv_k_t_radical_in_field(fa, fd, DE, case: str = 'auto', z: Incomplete | None = None): ...
