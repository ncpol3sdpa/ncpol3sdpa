from .matexpr import MatrixExpr as MatrixExpr
from sympy.assumptions.ask import Q as Q, ask as ask
from sympy.core.relational import Eq as Eq
from sympy.core.singleton import S as S
from sympy.functions.special.tensor_functions import KroneckerDelta as KroneckerDelta
from sympy.matrices.exceptions import NonInvertibleMatrixError as NonInvertibleMatrixError

class ZeroMatrix(MatrixExpr):
    is_ZeroMatrix: bool
    def __new__(cls, m, n): ...
    @property
    def shape(self): ...

class GenericZeroMatrix(ZeroMatrix):
    def __new__(cls): ...
    @property
    def rows(self) -> None: ...
    @property
    def cols(self) -> None: ...
    @property
    def shape(self) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __hash__(self): ...

class Identity(MatrixExpr):
    is_Identity: bool
    def __new__(cls, n): ...
    @property
    def rows(self): ...
    @property
    def cols(self): ...
    @property
    def shape(self): ...
    @property
    def is_square(self): ...

class GenericIdentity(Identity):
    def __new__(cls): ...
    @property
    def rows(self) -> None: ...
    @property
    def cols(self) -> None: ...
    @property
    def shape(self) -> None: ...
    @property
    def is_square(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __hash__(self): ...

class OneMatrix(MatrixExpr):
    def __new__(cls, m, n, evaluate: bool = False): ...
    @property
    def shape(self): ...
    @property
    def is_Identity(self): ...
    def as_explicit(self): ...
    def doit(self, **hints): ...
