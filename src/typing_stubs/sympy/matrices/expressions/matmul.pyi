from .inverse import Inverse as Inverse
from .matexpr import MatrixExpr as MatrixExpr
from .matpow import MatPow as MatPow
from .permutation import PermutationMatrix as PermutationMatrix
from .special import GenericIdentity as GenericIdentity, Identity as Identity, OneMatrix as OneMatrix, ZeroMatrix as ZeroMatrix
from .transpose import transpose as transpose
from _typeshed import Incomplete
from sympy.assumptions.ask import Q as Q, ask as ask
from sympy.assumptions.refine import handlers_dict as handlers_dict
from sympy.core import Basic as Basic, S as S, sympify as sympify
from sympy.core.mul import Mul as Mul, mul as mul
from sympy.core.numbers import Integer as Integer, Number as Number
from sympy.core.symbol import Dummy as Dummy
from sympy.functions import adjoint as adjoint
from sympy.matrices.exceptions import NonInvertibleMatrixError as NonInvertibleMatrixError
from sympy.matrices.matrixbase import MatrixBase as MatrixBase
from sympy.strategies import do_one as do_one, exhaust as exhaust, flatten as flatten, new as new, rm_id as rm_id, typed as typed, unpack as unpack
from sympy.utilities.exceptions import sympy_deprecation_warning as sympy_deprecation_warning

class MatMul(MatrixExpr, Mul):
    is_MatMul: bool
    identity: Incomplete
    def __new__(cls, *args, evaluate: bool = False, check: Incomplete | None = None, _sympify: bool = True): ...
    @property
    def shape(self): ...
    def as_coeff_matrices(self): ...
    def as_coeff_mmul(self): ...
    def expand(self, **kwargs): ...
    def doit(self, **hints): ...
    def args_cnc(self, cset: bool = False, warn: bool = True, **kwargs): ...

def newmul(*args): ...
def any_zeros(mul): ...
def merge_explicit(matmul): ...
def remove_ids(mul): ...
def factor_in_front(mul): ...
def combine_powers(mul): ...
def combine_permutations(mul): ...
def combine_one_matrices(mul): ...
def distribute_monom(mul): ...

rules: Incomplete
canonicalize: Incomplete

def only_squares(*matrices): ...
def refine_MatMul(expr, assumptions): ...
