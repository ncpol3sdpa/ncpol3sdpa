from .determinant import Determinant as Determinant
from .inverse import Inverse as Inverse
from .matadd import MatAdd as MatAdd
from .matmul import MatMul as MatMul
from .matpow import MatPow as MatPow
from .special import Identity as Identity, ZeroMatrix as ZeroMatrix
from .transpose import Transpose as Transpose
from _typeshed import Incomplete
from sympy.core import Add as Add, Basic as Basic, Integer as Integer, Mul as Mul, S as S
from sympy.core.assumptions import check_assumptions as check_assumptions
from sympy.core.decorators import call_highest_priority as call_highest_priority
from sympy.core.expr import Expr as Expr, ExprBuilder as ExprBuilder
from sympy.core.logic import FuzzyBool as FuzzyBool
from sympy.core.symbol import Dummy as Dummy, Str as Str, Symbol as Symbol, symbols as symbols
from sympy.core.sympify import SympifyError as SympifyError
from sympy.external.gmpy import SYMPY_INTS as SYMPY_INTS
from sympy.functions import adjoint as adjoint, conjugate as conjugate
from sympy.functions.special.tensor_functions import KroneckerDelta as KroneckerDelta
from sympy.matrices.exceptions import NonSquareMatrixError as NonSquareMatrixError
from sympy.matrices.kind import MatrixKind as MatrixKind
from sympy.matrices.matrixbase import MatrixBase as MatrixBase
from sympy.multipledispatch import dispatch as dispatch
from sympy.utilities.misc import filldedent as filldedent

class MatrixExpr(Expr):
    is_Matrix: bool
    is_MatrixExpr: bool
    is_Identity: FuzzyBool
    is_Inverse: bool
    is_Transpose: bool
    is_ZeroMatrix: bool
    is_MatAdd: bool
    is_MatMul: bool
    is_commutative: bool
    is_number: bool
    is_symbol: bool
    is_scalar: bool
    kind: MatrixKind
    def __new__(cls, *args, **kwargs): ...
    @property
    def shape(self) -> tuple[Expr, Expr]: ...
    def __neg__(self): ...
    def __abs__(self) -> None: ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __sub__(self, other): ...
    def __rsub__(self, other): ...
    def __mul__(self, other): ...
    def __matmul__(self, other): ...
    def __rmul__(self, other): ...
    def __rmatmul__(self, other): ...
    def __pow__(self, other): ...
    def __rpow__(self, other) -> None: ...
    def __truediv__(self, other): ...
    def __rtruediv__(self, other) -> None: ...
    @property
    def rows(self): ...
    @property
    def cols(self): ...
    @property
    def is_square(self) -> bool | None: ...
    def as_real_imag(self, deep: bool = True, **hints): ...
    def adjoint(self): ...
    def as_coeff_Mul(self, rational: bool = False): ...
    def conjugate(self): ...
    def transpose(self): ...
    @property
    def T(self): ...
    def inverse(self): ...
    def inv(self): ...
    def det(self): ...
    @property
    def I(self): ...
    def valid_index(self, i, j): ...
    def __getitem__(self, key): ...
    def as_explicit(self): ...
    def as_mutable(self): ...
    def __array__(self, dtype=..., copy: Incomplete | None = None): ...
    def equals(self, other): ...
    def canonicalize(self): ...
    def as_coeff_mmul(self): ...
    @staticmethod
    def from_index_summation(expr, first_index: Incomplete | None = None, last_index: Incomplete | None = None, dimensions: Incomplete | None = None): ...
    def applyfunc(self, func): ...

def get_postprocessor(cls): ...

class MatrixElement(Expr):
    parent: Incomplete
    i: Incomplete
    j: Incomplete
    is_symbol: bool
    is_commutative: bool
    def __new__(cls, name, n, m): ...
    @property
    def symbol(self): ...
    def doit(self, **hints): ...
    @property
    def indices(self): ...

class MatrixSymbol(MatrixExpr):
    is_commutative: bool
    is_symbol: bool
    def __new__(cls, name, n, m): ...
    @property
    def shape(self): ...
    @property
    def name(self): ...
    @property
    def free_symbols(self): ...

def matrix_symbols(expr): ...

class _LeftRightArgs:
    higher: Incomplete
    def __init__(self, lines, higher=...) -> None: ...
    @property
    def first_pointer(self): ...
    @first_pointer.setter
    def first_pointer(self, value) -> None: ...
    @property
    def second_pointer(self): ...
    @second_pointer.setter
    def second_pointer(self, value) -> None: ...
    def transpose(self): ...
    def build(self): ...
    def matrix_form(self): ...
    def rank(self): ...
    def append_first(self, other) -> None: ...
    def append_second(self, other) -> None: ...
