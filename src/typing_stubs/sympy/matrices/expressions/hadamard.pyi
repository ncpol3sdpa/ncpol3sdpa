from _typeshed import Incomplete
from sympy.core import Mul as Mul, sympify as sympify
from sympy.core.add import Add as Add
from sympy.core.expr import ExprBuilder as ExprBuilder
from sympy.core.sorting import default_sort_key as default_sort_key
from sympy.functions.elementary.exponential import log as log
from sympy.matrices.expressions.matexpr import MatrixExpr as MatrixExpr
from sympy.matrices.expressions.special import OneMatrix as OneMatrix, ZeroMatrix as ZeroMatrix
from sympy.strategies import condition as condition, exhaust as exhaust, flatten as flatten, rm_id as rm_id, sort as sort, unpack as unpack
from sympy.utilities.exceptions import sympy_deprecation_warning as sympy_deprecation_warning

def hadamard_product(*matrices): ...

class HadamardProduct(MatrixExpr):
    is_HadamardProduct: bool
    def __new__(cls, *args, evaluate: bool = False, check: Incomplete | None = None): ...
    @property
    def shape(self): ...
    def doit(self, **hints): ...

def canonicalize(x): ...
def hadamard_power(base, exp): ...

class HadamardPower(MatrixExpr):
    def __new__(cls, base, exp): ...
    @property
    def base(self): ...
    @property
    def exp(self): ...
    @property
    def shape(self): ...
