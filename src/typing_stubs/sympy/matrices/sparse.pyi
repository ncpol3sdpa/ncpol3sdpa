from .matrixbase import MatrixBase as MatrixBase
from .repmatrix import MutableRepMatrix as MutableRepMatrix, RepMatrix as RepMatrix
from _typeshed import Incomplete
from sympy.core.containers import Dict as Dict
from sympy.utilities.exceptions import sympy_deprecation_warning as sympy_deprecation_warning
from sympy.utilities.iterables import is_sequence as is_sequence
from sympy.utilities.misc import as_int as as_int

class SparseRepMatrix(RepMatrix):
    def applyfunc(self, f): ...
    def as_immutable(self): ...
    def as_mutable(self): ...
    def col_list(self): ...
    def nnz(self): ...
    def row_list(self): ...
    def scalar_multiply(self, scalar): ...
    def solve_least_squares(self, rhs, method: str = 'LDL'): ...
    def solve(self, rhs, method: str = 'LDL'): ...
    RL: Incomplete
    CL: Incomplete
    def liupc(self): ...
    def row_structure_symbolic_cholesky(self): ...
    def cholesky(self, hermitian: bool = True): ...
    def LDLdecomposition(self, hermitian: bool = True): ...
    def lower_triangular_solve(self, rhs): ...
    def upper_triangular_solve(self, rhs): ...

class MutableSparseMatrix(SparseRepMatrix, MutableRepMatrix): ...
SparseMatrix = MutableSparseMatrix
