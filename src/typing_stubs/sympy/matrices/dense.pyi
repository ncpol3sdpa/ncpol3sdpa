from .exceptions import ShapeError as ShapeError
from .matrixbase import MatrixBase as MatrixBase
from .repmatrix import MutableRepMatrix as MutableRepMatrix, RepMatrix as RepMatrix
from _typeshed import Incomplete
from sympy.core.basic import Basic as Basic
from sympy.core.singleton import S as S
from sympy.core.symbol import Symbol as Symbol
from sympy.core.sympify import sympify as sympify
from sympy.functions.elementary.trigonometric import cos as cos, sin as sin
from sympy.utilities.decorator import doctest_depends_on as doctest_depends_on
from sympy.utilities.exceptions import sympy_deprecation_warning as sympy_deprecation_warning
from sympy.utilities.iterables import is_sequence as is_sequence

__doctest_requires__: Incomplete

class DenseMatrix(RepMatrix):
    is_MatrixExpr: bool
    def as_immutable(self): ...
    def as_mutable(self): ...
    def cholesky(self, hermitian: bool = True): ...
    def LDLdecomposition(self, hermitian: bool = True): ...
    def lower_triangular_solve(self, rhs): ...
    def upper_triangular_solve(self, rhs): ...

class MutableDenseMatrix(DenseMatrix, MutableRepMatrix):
    def simplify(self, **kwargs) -> None: ...
MutableMatrix = MutableDenseMatrix
Matrix = MutableDenseMatrix

def list2numpy(l, dtype=...): ...
def matrix2numpy(m, dtype=...): ...
def rot_givens(i, j, theta, dim: int = 3): ...
def rot_axis3(theta): ...
def rot_axis2(theta): ...
def rot_axis1(theta): ...
def rot_ccw_axis3(theta): ...
def rot_ccw_axis2(theta): ...
def rot_ccw_axis1(theta): ...
def symarray(prefix, shape, **kwargs): ...
def casoratian(seqs, n, zero: bool = True): ...
def eye(*args, **kwargs): ...
def diag(*values, strict: bool = True, unpack: bool = False, **kwargs): ...
def GramSchmidt(vlist, orthonormal: bool = False): ...
def hessian(f, varlist, constraints=()): ...
def jordan_cell(eigenval, n): ...
def matrix_multiply_elementwise(A, B): ...
def ones(*args, **kwargs): ...
def randMatrix(r, c: Incomplete | None = None, min: int = 0, max: int = 99, seed: Incomplete | None = None, symmetric: bool = False, percent: int = 100, prng: Incomplete | None = None): ...
def wronskian(functions, var, method: str = 'bareiss'): ...
def zeros(*args, **kwargs): ...
