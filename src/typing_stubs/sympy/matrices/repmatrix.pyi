from .exceptions import NonInvertibleMatrixError as NonInvertibleMatrixError, NonSquareMatrixError as NonSquareMatrixError, ShapeError as ShapeError
from .kind import MatrixKind as MatrixKind
from .matrixbase import MatrixBase as MatrixBase, classof as classof
from _typeshed import Incomplete
from sympy.core.expr import Expr as Expr
from sympy.core.kind import Kind as Kind, NumberKind as NumberKind, UndefinedKind as UndefinedKind
from sympy.core.numbers import Integer as Integer, Rational as Rational
from sympy.core.singleton import S as S
from sympy.core.sympify import SympifyError as SympifyError
from sympy.polys.domains import EXRAW as EXRAW, GF as GF, QQ as QQ, ZZ as ZZ
from sympy.polys.matrices import DomainMatrix as DomainMatrix
from sympy.polys.matrices.exceptions import DMNonInvertibleMatrixError as DMNonInvertibleMatrixError
from sympy.polys.polyerrors import CoercionFailed as CoercionFailed
from sympy.utilities.exceptions import sympy_deprecation_warning as sympy_deprecation_warning
from sympy.utilities.iterables import is_sequence as is_sequence
from sympy.utilities.misc import as_int as as_int, filldedent as filldedent

class RepMatrix(MatrixBase):
    def __eq__(self, other): ...
    def to_DM(self, domain: Incomplete | None = None, **kwargs): ...
    def flat(self): ...
    def copy(self): ...
    @property
    def kind(self) -> MatrixKind: ...
    def __getitem__(self, key): ...
    def equals(self, other, failing_expression: bool = False): ...
    def inv_mod(M, m): ...
    def lll(self, delta: float = 0.75): ...
    def lll_transform(self, delta: float = 0.75): ...

class MutableRepMatrix(RepMatrix):
    is_zero: bool
    def __new__(cls, *args, **kwargs): ...
    def copy(self): ...
    def as_mutable(self): ...
    def __setitem__(self, key, value) -> None: ...
    def col_op(self, j, f) -> None: ...
    def col_swap(self, i, j) -> None: ...
    def row_op(self, i, f) -> None: ...
    def row_mult(self, i, factor) -> None: ...
    def row_add(self, s, t, k) -> None: ...
    def row_swap(self, i, j) -> None: ...
    def zip_row_op(self, i, k, f) -> None: ...
    def copyin_list(self, key, value): ...
    def copyin_matrix(self, key, value) -> None: ...
    def fill(self, value) -> None: ...
