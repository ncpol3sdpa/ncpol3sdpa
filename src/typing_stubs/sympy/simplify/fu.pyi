from _typeshed import Incomplete
from sympy import SYMPY_DEBUG as SYMPY_DEBUG
from sympy.core.add import Add as Add
from sympy.core.expr import Expr as Expr
from sympy.core.exprtools import Factors as Factors, factor_terms as factor_terms, gcd_terms as gcd_terms
from sympy.core.function import expand_mul as expand_mul
from sympy.core.mul import Mul as Mul
from sympy.core.numbers import I as I, pi as pi
from sympy.core.power import Pow as Pow
from sympy.core.singleton import S as S
from sympy.core.sorting import ordered as ordered
from sympy.core.symbol import Dummy as Dummy
from sympy.core.sympify import sympify as sympify
from sympy.core.traversal import bottom_up as bottom_up
from sympy.functions.combinatorial.factorials import binomial as binomial
from sympy.functions.elementary.hyperbolic import HyperbolicFunction as HyperbolicFunction, cosh as cosh, coth as coth, csch as csch, sech as sech, sinh as sinh, tanh as tanh
from sympy.functions.elementary.trigonometric import TrigonometricFunction as TrigonometricFunction, cos as cos, cot as cot, csc as csc, sec as sec, sin as sin, sqrt as sqrt, tan as tan
from sympy.ntheory.factor_ import perfect_power as perfect_power
from sympy.polys.polytools import factor as factor
from sympy.strategies.core import debug as debug, identity as identity
from sympy.strategies.tree import greedy as greedy

def TR0(rv): ...
def TR1(rv): ...
def TR2(rv): ...
def TR2i(rv, half: bool = False): ...
def TR3(rv): ...
def TR4(rv): ...
def TR5(rv, max: int = 4, pow: bool = False): ...
def TR6(rv, max: int = 4, pow: bool = False): ...
def TR7(rv): ...
def TR8(rv, first: bool = True): ...
def TR9(rv): ...
def TR10(rv, first: bool = True): ...
def TR10i(rv): ...
def TR11(rv, base: Incomplete | None = None): ...
def TR12(rv, first: bool = True): ...
def TR12i(rv): ...
def TR13(rv): ...
def TRmorrie(rv): ...
def TR14(rv, first: bool = True): ...
def TR15(rv, max: int = 4, pow: bool = False): ...
def TR16(rv, max: int = 4, pow: bool = False): ...
def TR111(rv): ...
def TR22(rv, max: int = 4, pow: bool = False): ...
def TRpower(rv): ...
def L(rv): ...

TR0: Incomplete
TR1: Incomplete
TR2: Incomplete
TR3: Incomplete
TR4: Incomplete
TR5: Incomplete
TR6: Incomplete
TR7: Incomplete
TR8: Incomplete
TR9: Incomplete
TR10: Incomplete
TR11: Incomplete
TR12: Incomplete
TR13: Incomplete
TR2i: Incomplete
TRmorrie: Incomplete
TR14: Incomplete
TR15: Incomplete
TR16: Incomplete
TR12i: Incomplete
TR111: Incomplete
TR22: Incomplete
CTR1: Incomplete
CTR2: Incomplete
CTR3: Incomplete
CTR4: Incomplete
RL1: Incomplete
RL2: Incomplete

def fu(rv, measure=...): ...
def process_common_addends(rv, do, key2: Incomplete | None = None, key1: bool = True): ...

fufuncs: Incomplete
FU: Incomplete

def trig_split(a, b, two: bool = False): ...
def as_f_sign_1(e): ...
def hyper_as_trig(rv): ...
def sincos_to_sum(expr): ...
