from _typeshed import Incomplete
from sympy import SYMPY_DEBUG as SYMPY_DEBUG
from sympy.core import Add as Add, Dummy as Dummy, EulerGamma as EulerGamma, Expr as Expr, I as I, Mul as Mul, Rational as Rational, S as S, Tuple as Tuple, expand as expand, expand_func as expand_func, nan as nan, oo as oo, pi as pi, symbols as symbols, sympify as sympify, zoo as zoo
from sympy.core.mod import Mod as Mod
from sympy.core.sorting import default_sort_key as default_sort_key
from sympy.functions import Chi as Chi, Ci as Ci, Ei as Ei, Piecewise as Piecewise, Shi as Shi, Si as Si, besseli as besseli, besselj as besselj, ceiling as ceiling, cos as cos, cosh as cosh, elliptic_e as elliptic_e, elliptic_k as elliptic_k, erf as erf, exp as exp, exp_polar as exp_polar, expint as expint, factorial as factorial, floor as floor, fresnelc as fresnelc, fresnels as fresnels, gamma as gamma, lerchphi as lerchphi, log as log, lowergamma as lowergamma, polar_lift as polar_lift, re as re, rf as rf, root as root, sin as sin, sinh as sinh, sqrt as sqrt, uppergamma as uppergamma
from sympy.functions.elementary.complexes import polarify as polarify, unpolarify as unpolarify
from sympy.functions.special.hyper import HyperRep_asin1 as HyperRep_asin1, HyperRep_asin2 as HyperRep_asin2, HyperRep_atanh as HyperRep_atanh, HyperRep_cosasin as HyperRep_cosasin, HyperRep_log1 as HyperRep_log1, HyperRep_log2 as HyperRep_log2, HyperRep_power1 as HyperRep_power1, HyperRep_power2 as HyperRep_power2, HyperRep_sinasin as HyperRep_sinasin, HyperRep_sqrts1 as HyperRep_sqrts1, HyperRep_sqrts2 as HyperRep_sqrts2, hyper as hyper, meijerg as meijerg
from sympy.matrices import Matrix as Matrix, eye as eye, zeros as zeros
from sympy.polys import Poly as Poly, apart as apart, poly as poly
from sympy.series import residue as residue
from sympy.simplify.powsimp import powdenest as powdenest
from sympy.utilities.iterables import sift as sift

def add_formulae(formulae): ...
def add_meijerg_formulae(formulae): ...
def make_simp(z): ...
def debug(*args) -> None: ...

class Hyper_Function(Expr):
    def __new__(cls, ap, bq): ...
    @property
    def args(self): ...
    @property
    def sizes(self): ...
    @property
    def gamma(self): ...
    def __call__(self, arg): ...
    def build_invariants(self): ...
    def difficulty(self, func): ...

class G_Function(Expr):
    def __new__(cls, an, ap, bm, bq): ...
    @property
    def args(self): ...
    def __call__(self, z): ...
    def compute_buckets(self): ...
    @property
    def signature(self): ...

class Formula:
    z: Incomplete
    symbols: Incomplete
    B: Incomplete
    C: Incomplete
    M: Incomplete
    func: Incomplete
    def __init__(self, func, z, res, symbols, B: Incomplete | None = None, C: Incomplete | None = None, M: Incomplete | None = None) -> None: ...
    @property
    def closed_form(self): ...
    def find_instantiations(self, func): ...

class FormulaCollection:
    symbolic_formulae: Incomplete
    concrete_formulae: Incomplete
    formulae: Incomplete
    def __init__(self) -> None: ...
    def lookup_origin(self, func): ...

class MeijerFormula:
    func: Incomplete
    z: Incomplete
    symbols: Incomplete
    B: Incomplete
    C: Incomplete
    M: Incomplete
    def __init__(self, an, ap, bm, bq, z, symbols, B, C, M, matcher) -> None: ...
    @property
    def closed_form(self): ...
    def try_instantiate(self, func): ...

class MeijerFormulaCollection:
    formulae: Incomplete
    def __init__(self) -> None: ...
    def lookup_origin(self, func): ...

class Operator:
    def apply(self, obj, op): ...

class MultOperator(Operator):
    def __init__(self, p) -> None: ...

class ShiftA(Operator):
    def __init__(self, ai) -> None: ...

class ShiftB(Operator):
    def __init__(self, bi) -> None: ...

class UnShiftA(Operator):
    def __init__(self, ap, bq, i, z) -> None: ...

class UnShiftB(Operator):
    def __init__(self, ap, bq, i, z) -> None: ...

class MeijerShiftA(Operator):
    def __init__(self, bi) -> None: ...

class MeijerShiftB(Operator):
    def __init__(self, bi) -> None: ...

class MeijerShiftC(Operator):
    def __init__(self, bi) -> None: ...

class MeijerShiftD(Operator):
    def __init__(self, bi) -> None: ...

class MeijerUnShiftA(Operator):
    def __init__(self, an, ap, bm, bq, i, z) -> None: ...

class MeijerUnShiftB(Operator):
    def __init__(self, an, ap, bm, bq, i, z) -> None: ...

class MeijerUnShiftC(Operator):
    def __init__(self, an, ap, bm, bq, i, z) -> None: ...

class MeijerUnShiftD(Operator):
    def __init__(self, an, ap, bm, bq, i, z) -> None: ...

class ReduceOrder(Operator):
    def __new__(cls, ai, bj): ...
    @classmethod
    def meijer_minus(cls, b, a): ...
    @classmethod
    def meijer_plus(cls, a, b): ...

def reduce_order(func): ...
def reduce_order_meijer(func): ...
def make_derivative_operator(M, z): ...
def apply_operators(obj, ops, op): ...
def devise_plan(target, origin, z): ...
def try_shifted_sum(func, z): ...
def try_polynomial(func, z): ...
def try_lerchphi(func): ...
def build_hypergeometric_formula(func): ...
def hyperexpand_special(ap, bq, z): ...
def devise_plan_meijer(fro, to, z): ...
def hyperexpand(f, allow_hyper: bool = False, rewrite: str = 'default', place: Incomplete | None = None): ...
