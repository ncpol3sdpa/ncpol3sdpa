from _typeshed import Incomplete
from sympy.core import Derivative as Derivative, Mul as Mul, Pow as Pow, S as S, sympify as sympify
from sympy.core.add import Add as Add
from sympy.core.assumptions import assumptions as assumptions
from sympy.core.exprtools import Factors as Factors, gcd_terms as gcd_terms
from sympy.core.function import expand_mul as expand_mul, expand_power_base as expand_power_base
from sympy.core.numbers import Rational as Rational, nan as nan, zoo as zoo
from sympy.core.parameters import global_parameters as global_parameters
from sympy.core.sorting import default_sort_key as default_sort_key, ordered as ordered
from sympy.core.symbol import Dummy as Dummy, Wild as Wild, symbols as symbols
from sympy.functions import exp as exp, log as log, sqrt as sqrt
from sympy.functions.elementary.complexes import Abs as Abs
from sympy.polys import gcd as gcd
from sympy.simplify.sqrtdenest import sqrtdenest as sqrtdenest
from sympy.utilities.iterables import iterable as iterable, sift as sift

def collect(expr, syms, func: Incomplete | None = None, evaluate: Incomplete | None = None, exact: bool = False, distribute_order_term: bool = True): ...
def rcollect(expr, *vars): ...
def collect_sqrt(expr, evaluate: Incomplete | None = None): ...
def collect_abs(expr): ...
def collect_const(expr, *vars, Numbers: bool = True): ...
def radsimp(expr, symbolic: bool = True, max_terms: int = 4): ...
def rad_rationalize(num, den): ...
def fraction(expr, exact: bool = False): ...
def numer(expr, exact: bool = False): ...
def denom(expr, exact: bool = False): ...
def fraction_expand(expr, **hints): ...
def numer_expand(expr, **hints): ...
def denom_expand(expr, **hints): ...
expand_numer = numer_expand
expand_denom = denom_expand
expand_fraction = fraction_expand

def split_surds(expr): ...
