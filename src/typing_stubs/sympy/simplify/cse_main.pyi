from . import cse_opts as cse_opts
from _typeshed import Incomplete
from sympy.core import Add as Add, Basic as Basic, Mul as Mul, Pow as Pow, sympify as sympify
from sympy.core.containers import OrderedSet as OrderedSet, Tuple as Tuple
from sympy.core.exprtools import factor_terms as factor_terms
from sympy.core.singleton import S as S
from sympy.core.sorting import ordered as ordered
from sympy.core.symbol import Symbol as Symbol, symbols as symbols
from sympy.matrices import ImmutableMatrix as ImmutableMatrix, ImmutableSparseMatrix as ImmutableSparseMatrix, Matrix as Matrix, MatrixBase as MatrixBase, SparseMatrix as SparseMatrix
from sympy.matrices.expressions import Inverse as Inverse, MatAdd as MatAdd, MatMul as MatMul, MatPow as MatPow, MatrixExpr as MatrixExpr, MatrixSymbol as MatrixSymbol
from sympy.matrices.expressions.matexpr import MatrixElement as MatrixElement
from sympy.polys.rootoftools import RootOf as RootOf
from sympy.utilities.iterables import iterable as iterable, numbered_symbols as numbered_symbols, sift as sift, topological_sort as topological_sort

basic_optimizations: Incomplete

def reps_toposort(r): ...
def cse_separate(r, e): ...
def cse_release_variables(r, e): ...
def preprocess_for_cse(expr, optimizations): ...
def postprocess_for_cse(expr, optimizations): ...

class FuncArgTracker:
    value_numbers: Incomplete
    value_number_to_value: Incomplete
    arg_to_funcset: Incomplete
    func_to_argset: Incomplete
    def __init__(self, funcs) -> None: ...
    def get_args_in_value_order(self, argset): ...
    def get_or_add_value_number(self, value): ...
    def stop_arg_tracking(self, func_i) -> None: ...
    def get_common_arg_candidates(self, argset, min_func_i: int = 0): ...
    def get_subset_candidates(self, argset, restrict_to_funcset: Incomplete | None = None): ...
    def update_func_argset(self, func_i, new_argset) -> None: ...

class Unevaluated:
    func: Incomplete
    args: Incomplete
    def __init__(self, func, args) -> None: ...
    def as_unevaluated_basic(self): ...
    @property
    def free_symbols(self): ...

def match_common_args(func_class, funcs, opt_subs): ...
def opt_cse(exprs, order: str = 'canonical'): ...
def tree_cse(exprs, symbols, opt_subs: Incomplete | None = None, order: str = 'canonical', ignore=()): ...
def cse(exprs, symbols: Incomplete | None = None, optimizations: Incomplete | None = None, postprocess: Incomplete | None = None, order: str = 'canonical', ignore=(), list: bool = True): ...
