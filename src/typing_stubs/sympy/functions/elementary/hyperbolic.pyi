from sympy.core import S as S, cacheit as cacheit, sympify as sympify
from sympy.core.add import Add as Add
from sympy.core.function import ArgumentIndexError as ArgumentIndexError, Function as Function
from sympy.core.logic import FuzzyBool as FuzzyBool, fuzzy_and as fuzzy_and, fuzzy_not as fuzzy_not, fuzzy_or as fuzzy_or
from sympy.core.numbers import I as I, Rational as Rational, pi as pi
from sympy.core.symbol import Dummy as Dummy
from sympy.functions.combinatorial.factorials import RisingFactorial as RisingFactorial, binomial as binomial, factorial as factorial
from sympy.functions.combinatorial.numbers import bernoulli as bernoulli, euler as euler, nC as nC
from sympy.functions.elementary.complexes import Abs as Abs, im as im, re as re
from sympy.functions.elementary.exponential import exp as exp, log as log, match_real_imag as match_real_imag
from sympy.functions.elementary.integers import floor as floor
from sympy.functions.elementary.miscellaneous import sqrt as sqrt
from sympy.functions.elementary.trigonometric import acos as acos, acot as acot, asin as asin, atan as atan, cos as cos, cot as cot, csc as csc, sec as sec, sin as sin, tan as tan
from sympy.polys.specialpolys import symmetric_poly as symmetric_poly

class HyperbolicFunction(Function):
    unbranched: bool

class sinh(HyperbolicFunction):
    def fdiff(self, argindex: int = 1): ...
    def inverse(self, argindex: int = 1): ...
    @classmethod
    def eval(cls, arg): ...
    @staticmethod
    def taylor_term(n, x, *previous_terms): ...
    def as_real_imag(self, deep: bool = True, **hints): ...

class cosh(HyperbolicFunction):
    def fdiff(self, argindex: int = 1): ...
    @classmethod
    def eval(cls, arg): ...
    @staticmethod
    def taylor_term(n, x, *previous_terms): ...
    def as_real_imag(self, deep: bool = True, **hints): ...

class tanh(HyperbolicFunction):
    def fdiff(self, argindex: int = 1): ...
    def inverse(self, argindex: int = 1): ...
    @classmethod
    def eval(cls, arg): ...
    @staticmethod
    def taylor_term(n, x, *previous_terms): ...
    def as_real_imag(self, deep: bool = True, **hints): ...

class coth(HyperbolicFunction):
    def fdiff(self, argindex: int = 1): ...
    def inverse(self, argindex: int = 1): ...
    @classmethod
    def eval(cls, arg): ...
    @staticmethod
    def taylor_term(n, x, *previous_terms): ...
    def as_real_imag(self, deep: bool = True, **hints): ...

class ReciprocalHyperbolicFunction(HyperbolicFunction):
    @classmethod
    def eval(cls, arg): ...
    def as_real_imag(self, deep: bool = True, **hints): ...

class csch(ReciprocalHyperbolicFunction):
    def fdiff(self, argindex: int = 1): ...
    @staticmethod
    def taylor_term(n, x, *previous_terms): ...

class sech(ReciprocalHyperbolicFunction):
    def fdiff(self, argindex: int = 1): ...
    @staticmethod
    def taylor_term(n, x, *previous_terms): ...

class InverseHyperbolicFunction(Function): ...

class asinh(InverseHyperbolicFunction):
    def fdiff(self, argindex: int = 1): ...
    @classmethod
    def eval(cls, arg): ...
    @staticmethod
    def taylor_term(n, x, *previous_terms): ...
    def inverse(self, argindex: int = 1): ...

class acosh(InverseHyperbolicFunction):
    def fdiff(self, argindex: int = 1): ...
    @classmethod
    def eval(cls, arg): ...
    @staticmethod
    def taylor_term(n, x, *previous_terms): ...
    def inverse(self, argindex: int = 1): ...

class atanh(InverseHyperbolicFunction):
    def fdiff(self, argindex: int = 1): ...
    @classmethod
    def eval(cls, arg): ...
    @staticmethod
    def taylor_term(n, x, *previous_terms): ...
    def inverse(self, argindex: int = 1): ...

class acoth(InverseHyperbolicFunction):
    def fdiff(self, argindex: int = 1): ...
    @classmethod
    def eval(cls, arg): ...
    @staticmethod
    def taylor_term(n, x, *previous_terms): ...
    def inverse(self, argindex: int = 1): ...

class asech(InverseHyperbolicFunction):
    def fdiff(self, argindex: int = 1): ...
    @classmethod
    def eval(cls, arg): ...
    @staticmethod
    def taylor_term(n, x, *previous_terms): ...
    def inverse(self, argindex: int = 1): ...

class acsch(InverseHyperbolicFunction):
    def fdiff(self, argindex: int = 1): ...
    @classmethod
    def eval(cls, arg): ...
    @staticmethod
    def taylor_term(n, x, *previous_terms): ...
    def inverse(self, argindex: int = 1): ...
