from sympy.core import Add as Add, S as S
from sympy.core.basic import Basic as Basic
from sympy.core.evalf import PrecisionExhausted as PrecisionExhausted, get_integer_part as get_integer_part
from sympy.core.expr import Expr as Expr
from sympy.core.function import Function as Function
from sympy.core.logic import fuzzy_or as fuzzy_or
from sympy.core.numbers import Integer as Integer, int_valued as int_valued
from sympy.core.relational import Ge as Ge, Gt as Gt, Le as Le, Lt as Lt, Relational as Relational, is_eq as is_eq
from sympy.functions.elementary.complexes import im as im, re as re
from sympy.multipledispatch import dispatch as dispatch

class RoundFunction(Function):
    args: tuple[Expr]
    @classmethod
    def eval(cls, arg): ...

class floor(RoundFunction):
    def __le__(self, other): ...
    def __ge__(self, other): ...
    def __gt__(self, other): ...
    def __lt__(self, other): ...

class ceiling(RoundFunction):
    def __lt__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
    def __le__(self, other): ...

class frac(Function):
    @classmethod
    def eval(cls, arg): ...
    def __ge__(self, other): ...
    def __gt__(self, other): ...
    def __le__(self, other): ...
    def __lt__(self, other): ...
