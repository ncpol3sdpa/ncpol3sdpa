from _typeshed import Incomplete
from sympy.core import Dummy as Dummy, Function as Function, Mul as Mul, S as S, Tuple as Tuple, diff as diff
from sympy.core.basic import Basic as Basic, as_Basic as as_Basic
from sympy.core.numbers import NumberSymbol as NumberSymbol, Rational as Rational
from sympy.core.parameters import global_parameters as global_parameters
from sympy.core.relational import Eq as Eq, Gt as Gt, Lt as Lt, Ne as Ne, Relational as Relational
from sympy.core.sorting import ordered as ordered
from sympy.functions.elementary.miscellaneous import Max as Max, Min as Min
from sympy.logic.boolalg import And as And, Boolean as Boolean, ITE as ITE, Not as Not, Or as Or, distribute_and_over_or as distribute_and_over_or, distribute_or_over_and as distribute_or_over_and, false as false, simplify_logic as simplify_logic, to_cnf as to_cnf, true as true
from sympy.utilities.iterables import common_prefix as common_prefix, sift as sift, uniq as uniq
from sympy.utilities.misc import filldedent as filldedent, func_name as func_name

Undefined: Incomplete

class ExprCondPair(Tuple):
    def __new__(cls, expr, cond): ...
    @property
    def expr(self): ...
    @property
    def cond(self): ...
    @property
    def is_commutative(self): ...
    def __iter__(self): ...

class Piecewise(Function):
    nargs: Incomplete
    is_Piecewise: bool
    def __new__(cls, *args, **options): ...
    @classmethod
    def eval(cls, *_args): ...
    def doit(self, **hints): ...
    def piecewise_integrate(self, x, **kwargs): ...
    def as_expr_set_pairs(self, domain: Incomplete | None = None): ...

def piecewise_fold(expr, evaluate: bool = True): ...
def piecewise_simplify_arguments(expr, **kwargs): ...
def piecewise_simplify(expr, **kwargs): ...
def piecewise_exclusive(expr, *, skip_nan: bool = False, deep: bool = True): ...
