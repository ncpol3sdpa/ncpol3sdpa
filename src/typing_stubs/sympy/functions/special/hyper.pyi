from _typeshed import Incomplete
from sympy import ordered as ordered
from sympy.core import Mod as Mod, S as S
from sympy.core.add import Add as Add
from sympy.core.containers import Tuple as Tuple
from sympy.core.expr import Expr as Expr
from sympy.core.function import ArgumentIndexError as ArgumentIndexError, Derivative as Derivative, Function as Function
from sympy.core.mul import Mul as Mul
from sympy.core.numbers import I as I, oo as oo, pi as pi, zoo as zoo
from sympy.core.parameters import global_parameters as global_parameters
from sympy.core.relational import Ne as Ne
from sympy.core.sorting import default_sort_key as default_sort_key
from sympy.core.symbol import Dummy as Dummy
from sympy.external.gmpy import lcm as lcm
from sympy.functions import RisingFactorial as RisingFactorial, acosh as acosh, acoth as acoth, asin as asin, asinh as asinh, atan as atan, atanh as atanh, cos as cos, cosh as cosh, exp as exp, factorial as factorial, log as log, sin as sin, sinh as sinh, sqrt as sqrt
from sympy.functions.elementary.complexes import Abs as Abs, re as re, unpolarify as unpolarify
from sympy.functions.elementary.exponential import exp_polar as exp_polar
from sympy.functions.elementary.integers import ceiling as ceiling
from sympy.functions.elementary.piecewise import Piecewise as Piecewise
from sympy.logic.boolalg import And as And, Or as Or

class TupleArg(Tuple):
    def as_leading_term(self, *x, logx: Incomplete | None = None, cdir: int = 0): ...
    def limit(self, x, xlim, dir: str = '+'): ...

class TupleParametersBase(Function):
    is_commutative: bool

class hyper(TupleParametersBase):
    def __new__(cls, ap, bq, z, **kwargs): ...
    @classmethod
    def eval(cls, ap, bq, z): ...
    def fdiff(self, argindex: int = 3): ...
    @property
    def argument(self): ...
    @property
    def ap(self): ...
    @property
    def bq(self): ...
    @property
    def eta(self): ...
    @property
    def radius_of_convergence(self): ...
    @property
    def convergence_statement(self): ...

class meijerg(TupleParametersBase):
    def __new__(cls, *args, **kwargs): ...
    def fdiff(self, argindex: int = 3): ...
    def get_period(self): ...
    def integrand(self, s): ...
    @property
    def argument(self): ...
    @property
    def an(self): ...
    @property
    def ap(self): ...
    @property
    def aother(self): ...
    @property
    def bm(self): ...
    @property
    def bq(self): ...
    @property
    def bother(self): ...
    @property
    def nu(self): ...
    @property
    def delta(self): ...
    @property
    def is_number(self): ...

class HyperRep(Function):
    @classmethod
    def eval(cls, *args): ...

class HyperRep_power1(HyperRep): ...
class HyperRep_power2(HyperRep): ...
class HyperRep_log1(HyperRep): ...
class HyperRep_atanh(HyperRep): ...
class HyperRep_asin1(HyperRep): ...
class HyperRep_asin2(HyperRep): ...
class HyperRep_sqrts1(HyperRep): ...
class HyperRep_sqrts2(HyperRep): ...
class HyperRep_log2(HyperRep): ...
class HyperRep_cosasin(HyperRep): ...
class HyperRep_sinasin(HyperRep): ...

class appellf1(Function):
    @classmethod
    def eval(cls, a, b1, b2, c, x, y): ...
    def fdiff(self, argindex: int = 5): ...
