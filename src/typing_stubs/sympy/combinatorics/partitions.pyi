from _typeshed import Incomplete
from sympy.core import Basic as Basic, Dict as Dict, Tuple as Tuple, sympify as sympify
from sympy.core.numbers import Integer as Integer
from sympy.core.sorting import default_sort_key as default_sort_key
from sympy.functions.combinatorial.numbers import bell as bell
from sympy.matrices import zeros as zeros
from sympy.sets.sets import FiniteSet as FiniteSet, Union as Union
from sympy.utilities.iterables import flatten as flatten, group as group
from sympy.utilities.misc import as_int as as_int

class Partition(FiniteSet):
    def __new__(cls, *partition): ...
    def sort_key(self, order: Incomplete | None = None): ...
    @property
    def partition(self): ...
    def __add__(self, other): ...
    def __sub__(self, other): ...
    def __le__(self, other): ...
    def __lt__(self, other): ...
    @property
    def rank(self): ...
    @property
    def RGS(self): ...
    @classmethod
    def from_rgs(self, rgs, elements): ...

class IntegerPartition(Basic):
    def __new__(cls, partition, integer: Incomplete | None = None): ...
    def prev_lex(self): ...
    def next_lex(self): ...
    def as_dict(self): ...
    @property
    def conjugate(self): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def as_ferrers(self, char: str = '#'): ...

def random_integer_partition(n, seed: Incomplete | None = None): ...
def RGS_generalized(m): ...
def RGS_enum(m): ...
def RGS_unrank(rank, m): ...
def RGS_rank(rgs): ...
