from _typeshed import Incomplete
from sympy.combinatorics.free_groups import free_group as free_group
from sympy.combinatorics.perm_groups import PermutationGroup as PermutationGroup
from sympy.ntheory.primetest import isprime as isprime
from sympy.printing.defaults import DefaultPrinting as DefaultPrinting

class PolycyclicGroup(DefaultPrinting):
    is_group: bool
    is_solvable: bool
    pcgs: Incomplete
    pc_series: Incomplete
    relative_order: Incomplete
    collector: Incomplete
    def __init__(self, pc_sequence, pc_series, relative_order, collector: Incomplete | None = None) -> None: ...
    def is_prime_order(self): ...
    def length(self): ...

class Collector(DefaultPrinting):
    pcgs: Incomplete
    pc_series: Incomplete
    relative_order: Incomplete
    free_group: Incomplete
    index: Incomplete
    pc_presentation: Incomplete
    def __init__(self, pcgs, pc_series, relative_order, free_group_: Incomplete | None = None, pc_presentation: Incomplete | None = None) -> None: ...
    def minimal_uncollected_subword(self, word): ...
    def relations(self): ...
    def subword_index(self, word, w): ...
    def map_relation(self, w): ...
    def collected_word(self, word): ...
    def pc_relators(self): ...
    def exponent_vector(self, element): ...
    def depth(self, element): ...
    def leading_exponent(self, element): ...
    def induced_pcgs(self, gens): ...
    def constructive_membership_test(self, ipcgs, g): ...
