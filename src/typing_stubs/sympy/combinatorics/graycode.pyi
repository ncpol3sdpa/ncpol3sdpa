from _typeshed import Incomplete
from collections.abc import Generator
from sympy.core import Basic as Basic, Integer as Integer

class GrayCode(Basic):
    def __new__(cls, n, *args, **kw_args): ...
    def next(self, delta: int = 1): ...
    @property
    def selections(self): ...
    @property
    def n(self): ...
    def generate_gray(self, **hints) -> Generator[Incomplete]: ...
    def skip(self) -> None: ...
    @property
    def rank(self): ...
    @property
    def current(self): ...
    @classmethod
    def unrank(self, n, rank): ...

def random_bitstring(n): ...
def gray_to_bin(bin_list): ...
def bin_to_gray(bin_list): ...
def get_subset_from_bitstring(super_set, bitstring): ...
def graycode_subsets(gray_code_set) -> Generator[Incomplete]: ...
