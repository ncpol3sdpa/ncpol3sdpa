from _typeshed import Incomplete
from sympy.combinatorics.free_groups import FreeGroupElement
from sympy.printing.defaults import DefaultPrinting

__all__ = ['fp_group', 'xfp_group', 'vfp_group']

def fp_group(fr_grp, relators=()): ...
def xfp_group(fr_grp, relators=()): ...
def vfp_group(fr_grpm, relators): ...

class FpGroup(DefaultPrinting):
    is_group: bool
    is_FpGroup: bool
    is_PermutationGroup: bool
    free_group: Incomplete
    relators: Incomplete
    generators: Incomplete
    dtype: Incomplete
    def __init__(self, fr_grp, relators) -> None: ...
    def make_confluent(self) -> None: ...
    def reduce(self, word): ...
    def equals(self, word1, word2): ...
    @property
    def identity(self): ...
    def __contains__(self, g) -> bool: ...
    def subgroup(self, gens, C: Incomplete | None = None, homomorphism: bool = False): ...
    def coset_enumeration(self, H, strategy: str = 'relator_based', max_cosets: Incomplete | None = None, draft: Incomplete | None = None, incomplete: bool = False): ...
    def standardize_coset_table(self) -> None: ...
    def coset_table(self, H, strategy: str = 'relator_based', max_cosets: Incomplete | None = None, draft: Incomplete | None = None, incomplete: bool = False): ...
    def order(self, strategy: str = 'relator_based'): ...
    def most_frequent_generator(self): ...
    def random(self): ...
    def index(self, H, strategy: str = 'relator_based'): ...
    def derived_series(self): ...
    def lower_central_series(self): ...
    def center(self): ...
    def derived_subgroup(self): ...
    def centralizer(self, other): ...
    def normal_closure(self, other): ...
    @property
    def is_abelian(self): ...
    @property
    def is_nilpotent(self): ...
    @property
    def is_solvable(self): ...
    @property
    def elements(self): ...
    @property
    def is_cyclic(self): ...
    def abelian_invariants(self): ...
    def composition_series(self): ...

class FpSubgroup(DefaultPrinting):
    parent: Incomplete
    generators: Incomplete
    C: Incomplete
    normal: Incomplete
    def __init__(self, G, gens, normal: bool = False) -> None: ...
    def __contains__(self, g) -> bool: ...
    def order(self): ...
    def to_FpGroup(self): ...
FpGroupElement = FreeGroupElement
