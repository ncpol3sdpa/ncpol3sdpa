from enum import Enum
from sympy.combinatorics.named_groups import AlternatingGroup as AlternatingGroup, CyclicGroup as CyclicGroup, DihedralGroup as DihedralGroup, SymmetricGroup as SymmetricGroup, set_alternating_group_properties as set_alternating_group_properties, set_symmetric_group_properties as set_symmetric_group_properties
from sympy.combinatorics.perm_groups import PermutationGroup as PermutationGroup
from sympy.combinatorics.permutations import Permutation as Permutation

class S1TransitiveSubgroups(Enum):
    S1 = 'S1'
    def get_perm_group(self): ...

class S2TransitiveSubgroups(Enum):
    S2 = 'S2'
    def get_perm_group(self): ...

class S3TransitiveSubgroups(Enum):
    A3 = 'A3'
    S3 = 'S3'
    def get_perm_group(self): ...

class S4TransitiveSubgroups(Enum):
    C4 = 'C4'
    V = 'V'
    D4 = 'D4'
    A4 = 'A4'
    S4 = 'S4'
    def get_perm_group(self): ...

class S5TransitiveSubgroups(Enum):
    C5 = 'C5'
    D5 = 'D5'
    M20 = 'M20'
    A5 = 'A5'
    S5 = 'S5'
    def get_perm_group(self): ...

class S6TransitiveSubgroups(Enum):
    C6 = 'C6'
    S3 = 'S3'
    D6 = 'D6'
    A4 = 'A4'
    G18 = 'G18'
    A4xC2 = 'A4 x C2'
    S4m = 'S4-'
    S4p = 'S4+'
    G36m = 'G36-'
    G36p = 'G36+'
    S4xC2 = 'S4 x C2'
    PSL2F5 = 'PSL2(F5)'
    G72 = 'G72'
    PGL2F5 = 'PGL2(F5)'
    A6 = 'A6'
    S6 = 'S6'
    def get_perm_group(self): ...

def four_group(): ...
def M20(): ...
def S3_in_S6(): ...
def A4_in_S6(): ...
def S4m(): ...
def S4p(): ...
def A4xC2(): ...
def S4xC2(): ...
def G18(): ...
def G36m(): ...
def G36p(): ...
def G72(): ...
def PSL2F5(): ...
def PGL2F5(): ...
def find_transitive_subgroups_of_S6(*targets, print_report: bool = False): ...
