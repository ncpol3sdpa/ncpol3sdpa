from _typeshed import Incomplete
from sympy.combinatorics.perm_groups import PermutationGroup as PermutationGroup
from sympy.combinatorics.permutations import Permutation as Permutation

def dummy_sgs(dummies, sym, n): ...
def transversal2coset(size, base, transversal): ...
def double_coset_can_rep(dummies, sym, b_S, sgens, S_transversals, g): ...
def canonical_free(base, gens, g, num_free): ...
def canonicalize(g, dummies, msym, *v): ...
def perm_af_direct_product(gens1, gens2, signed: bool = True): ...
def bsgs_direct_product(base1, gens1, base2, gens2, signed: bool = True): ...
def get_symmetric_group_sgs(n, antisym: bool = False): ...

riemann_bsgs: Incomplete

def get_transversals(base, gens): ...
def get_minimal_bsgs(base, gens): ...
def tensor_gens(base, gens, list_free_indices, sym: int = 0): ...
def gens_products(*v): ...
