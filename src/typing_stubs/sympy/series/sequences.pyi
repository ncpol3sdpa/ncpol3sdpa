from _typeshed import Incomplete
from sympy.core.basic import Basic as Basic
from sympy.core.cache import cacheit as cacheit
from sympy.core.containers import Tuple as Tuple
from sympy.core.decorators import call_highest_priority as call_highest_priority
from sympy.core.function import AppliedUndef as AppliedUndef, expand as expand
from sympy.core.mul import Mul as Mul
from sympy.core.numbers import Integer as Integer
from sympy.core.parameters import global_parameters as global_parameters
from sympy.core.relational import Eq as Eq
from sympy.core.singleton import S as S, Singleton as Singleton
from sympy.core.sorting import ordered as ordered
from sympy.core.symbol import Dummy as Dummy, Symbol as Symbol, Wild as Wild
from sympy.core.sympify import sympify as sympify
from sympy.matrices import Matrix as Matrix
from sympy.polys import factor as factor, lcm as lcm
from sympy.sets.sets import Intersection as Intersection, Interval as Interval
from sympy.tensor.indexed import Idx as Idx
from sympy.utilities.iterables import flatten as flatten, is_sequence as is_sequence, iterable as iterable

class SeqBase(Basic):
    is_commutative: bool
    @property
    def gen(self) -> None: ...
    @property
    def interval(self) -> None: ...
    @property
    def start(self) -> None: ...
    @property
    def stop(self) -> None: ...
    @property
    def length(self) -> None: ...
    @property
    def variables(self): ...
    @property
    def free_symbols(self): ...
    def coeff(self, pt): ...
    def coeff_mul(self, other): ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __sub__(self, other): ...
    def __rsub__(self, other): ...
    def __neg__(self): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...
    def __iter__(self): ...
    def __getitem__(self, index): ...
    def find_linear_recurrence(self, n, d: Incomplete | None = None, gfvar: Incomplete | None = None): ...

class EmptySequence(SeqBase, metaclass=Singleton):
    @property
    def interval(self): ...
    @property
    def length(self): ...
    def coeff_mul(self, coeff): ...
    def __iter__(self): ...

class SeqExpr(SeqBase):
    @property
    def gen(self): ...
    @property
    def interval(self): ...
    @property
    def start(self): ...
    @property
    def stop(self): ...
    @property
    def length(self): ...
    @property
    def variables(self): ...

class SeqPer(SeqExpr):
    def __new__(cls, periodical, limits: Incomplete | None = None): ...
    @property
    def period(self): ...
    @property
    def periodical(self): ...
    def coeff_mul(self, coeff): ...

class SeqFormula(SeqExpr):
    def __new__(cls, formula, limits: Incomplete | None = None): ...
    @property
    def formula(self): ...
    def coeff_mul(self, coeff): ...
    def expand(self, *args, **kwargs): ...

class RecursiveSeq(SeqBase):
    def __new__(cls, recurrence, yn, n, initial: Incomplete | None = None, start: int = 0): ...
    @property
    def recurrence(self): ...
    @property
    def yn(self): ...
    @property
    def y(self): ...
    @property
    def n(self): ...
    @property
    def initial(self): ...
    @property
    def start(self): ...
    @property
    def stop(self): ...
    @property
    def interval(self): ...
    def __iter__(self): ...

def sequence(seq, limits: Incomplete | None = None): ...

class SeqExprOp(SeqBase):
    @property
    def gen(self): ...
    @property
    def interval(self): ...
    @property
    def start(self): ...
    @property
    def stop(self): ...
    @property
    def variables(self): ...
    @property
    def length(self): ...

class SeqAdd(SeqExprOp):
    def __new__(cls, *args, **kwargs): ...
    @staticmethod
    def reduce(args): ...

class SeqMul(SeqExprOp):
    def __new__(cls, *args, **kwargs): ...
    @staticmethod
    def reduce(args): ...
