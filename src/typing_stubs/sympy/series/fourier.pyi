from _typeshed import Incomplete
from sympy.core.add import Add as Add
from sympy.core.containers import Tuple as Tuple
from sympy.core.expr import Expr as Expr
from sympy.core.numbers import oo as oo, pi as pi
from sympy.core.singleton import S as S
from sympy.core.symbol import Dummy as Dummy, Symbol as Symbol, Wild as Wild
from sympy.core.sympify import sympify as sympify
from sympy.functions.elementary.trigonometric import cos as cos, sin as sin, sinc as sinc
from sympy.series.sequences import SeqFormula as SeqFormula
from sympy.series.series_class import SeriesBase as SeriesBase
from sympy.sets.sets import Interval as Interval
from sympy.utilities.iterables import is_sequence as is_sequence

__doctest_requires__: Incomplete

def fourier_cos_seq(func, limits, n): ...
def fourier_sin_seq(func, limits, n): ...
def finite_check(f, x, L): ...

class FourierSeries(SeriesBase):
    def __new__(cls, *args): ...
    @property
    def function(self): ...
    @property
    def x(self): ...
    @property
    def period(self): ...
    @property
    def a0(self): ...
    @property
    def an(self): ...
    @property
    def bn(self): ...
    @property
    def interval(self): ...
    @property
    def start(self): ...
    @property
    def stop(self): ...
    @property
    def length(self): ...
    @property
    def L(self): ...
    def truncate(self, n: int = 3): ...
    def sigma_approximation(self, n: int = 3): ...
    def shift(self, s): ...
    def shiftx(self, s): ...
    def scale(self, s): ...
    def scalex(self, s): ...
    def __neg__(self): ...
    def __add__(self, other): ...
    def __sub__(self, other): ...

class FiniteFourierSeries(FourierSeries):
    def __new__(cls, f, limits, exprs): ...
    @property
    def interval(self): ...
    @property
    def length(self): ...
    def shiftx(self, s): ...
    def scale(self, s): ...
    def scalex(self, s): ...
    def __add__(self, other): ...

def fourier_series(f, limits: Incomplete | None = None, finite: bool = True): ...
