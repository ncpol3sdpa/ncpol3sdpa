from _typeshed import Incomplete
from collections.abc import Generator
from sympy.core.add import Add as Add
from sympy.core.expr import Expr as Expr
from sympy.core.function import Derivative as Derivative, Function as Function, expand as expand
from sympy.core.mul import Mul as Mul
from sympy.core.numbers import Rational as Rational, nan as nan, oo as oo, zoo as zoo
from sympy.core.relational import Eq as Eq
from sympy.core.singleton import S as S
from sympy.core.symbol import Dummy as Dummy, Symbol as Symbol, Wild as Wild, symbols as symbols
from sympy.core.sympify import sympify as sympify
from sympy.discrete.convolutions import convolution as convolution
from sympy.functions.combinatorial.factorials import binomial as binomial, factorial as factorial, rf as rf
from sympy.functions.combinatorial.numbers import bell as bell
from sympy.functions.elementary.integers import ceiling as ceiling, floor as floor, frac as frac
from sympy.functions.elementary.miscellaneous import Max as Max, Min as Min
from sympy.functions.elementary.piecewise import Piecewise as Piecewise
from sympy.series.limits import Limit as Limit
from sympy.series.order import Order as Order
from sympy.series.sequences import sequence as sequence
from sympy.series.series_class import SeriesBase as SeriesBase
from sympy.sets.sets import Interval as Interval
from sympy.utilities.iterables import iterable as iterable

def rational_algorithm(f, x, k, order: int = 4, full: bool = False): ...
def rational_independent(terms, x): ...
def simpleDE(f, x, g, order: int = 4) -> Generator[Incomplete, None, Incomplete]: ...
def exp_re(DE, r, k): ...
def hyper_re(DE, r, k): ...
def rsolve_hypergeometric(f, x, P, Q, k, m): ...
def solve_de(f, x, DE, order, g, k): ...
def hyper_algorithm(f, x, k, order: int = 4): ...
def compute_fps(f, x, x0: int = 0, dir: int = 1, hyper: bool = True, order: int = 4, rational: bool = True, full: bool = False): ...

class Coeff(Function):
    @classmethod
    def eval(cls, p, x, n): ...

class FormalPowerSeries(SeriesBase):
    def __new__(cls, *args): ...
    ak_seq: Incomplete
    fact_seq: Incomplete
    bell_coeff_seq: Incomplete
    sign_seq: Incomplete
    def __init__(self, *args) -> None: ...
    @property
    def function(self): ...
    @property
    def x(self): ...
    @property
    def x0(self): ...
    @property
    def dir(self): ...
    @property
    def ak(self): ...
    @property
    def xk(self): ...
    @property
    def ind(self): ...
    @property
    def interval(self): ...
    @property
    def start(self): ...
    @property
    def stop(self): ...
    @property
    def length(self): ...
    @property
    def infinite(self): ...
    def polynomial(self, n: int = 6): ...
    def truncate(self, n: int = 6): ...
    def zero_coeff(self): ...
    def integrate(self, x: Incomplete | None = None, **kwargs): ...
    def product(self, other, x: Incomplete | None = None, n: int = 6): ...
    def coeff_bell(self, n): ...
    def compose(self, other, x: Incomplete | None = None, n: int = 6): ...
    def inverse(self, x: Incomplete | None = None, n: int = 6): ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __neg__(self): ...
    def __sub__(self, other): ...
    def __rsub__(self, other): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...

class FiniteFormalPowerSeries(FormalPowerSeries):
    def __init__(self, *args) -> None: ...
    @property
    def ffps(self): ...
    @property
    def gfps(self): ...
    @property
    def f(self): ...
    @property
    def g(self): ...
    @property
    def infinite(self) -> None: ...
    def polynomial(self, n): ...
    def truncate(self, n: int = 6): ...
    def integrate(self, x) -> None: ...

class FormalPowerSeriesProduct(FiniteFormalPowerSeries):
    coeff1: Incomplete
    coeff2: Incomplete
    def __init__(self, *args) -> None: ...
    @property
    def function(self): ...

class FormalPowerSeriesCompose(FiniteFormalPowerSeries):
    @property
    def function(self): ...

class FormalPowerSeriesInverse(FiniteFormalPowerSeries):
    aux_seq: Incomplete
    def __init__(self, *args) -> None: ...
    @property
    def function(self): ...
    @property
    def g(self) -> None: ...
    @property
    def gfps(self) -> None: ...

def fps(f, x: Incomplete | None = None, x0: int = 0, dir: int = 1, hyper: bool = True, order: int = 4, rational: bool = True, full: bool = False): ...
