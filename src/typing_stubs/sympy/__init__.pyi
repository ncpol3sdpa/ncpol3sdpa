from .algebras import Quaternion as Quaternion
from .assumptions import (
    AppliedPredicate as AppliedPredicate,
    AssumptionsContext as AssumptionsContext,
    Predicate as Predicate,
    Q as Q,
    ask as ask,
    assuming as assuming,
    refine as refine,
    register_handler as register_handler,
    remove_handler as remove_handler,
)
from .calculus import (
    AccumBounds as AccumBounds,
    apply_finite_diff as apply_finite_diff,
    differentiate_finite as differentiate_finite,
    euler_equations as euler_equations,
    finite_diff_weights as finite_diff_weights,
    is_convex as is_convex,
    is_decreasing as is_decreasing,
    is_increasing as is_increasing,
    is_monotonic as is_monotonic,
    is_strictly_decreasing as is_strictly_decreasing,
    is_strictly_increasing as is_strictly_increasing,
    maximum as maximum,
    minimum as minimum,
    not_empty_in as not_empty_in,
    periodicity as periodicity,
    singularities as singularities,
    stationary_points as stationary_points,
)
from .concrete import (
    Product as Product,
    Sum as Sum,
    product as product,
    summation as summation,
)
from .core import (
    Add as Add,
    AlgebraicNumber as AlgebraicNumber,
    Atom as Atom,
    AtomicExpr as AtomicExpr,
    Basic as Basic,
    Catalan as Catalan,
    Derivative as Derivative,
    Dict as Dict,
    Dummy as Dummy,
    E as E,
    Eq as Eq,
    Equality as Equality,
    EulerGamma as EulerGamma,
    Expr as Expr,
    Float as Float,
    Function as Function,
    FunctionClass as FunctionClass,
    Ge as Ge,
    GoldenRatio as GoldenRatio,
    GreaterThan as GreaterThan,
    Gt as Gt,
    I as I,
    Integer as Integer,
    Lambda as Lambda,
    Le as Le,
    LessThan as LessThan,
    Lt as Lt,
    Mod as Mod,
    Mul as Mul,
    N as N,
    Ne as Ne,
    Number as Number,
    NumberSymbol as NumberSymbol,
    PoleError as PoleError,
    Pow as Pow,
    PrecisionExhausted as PrecisionExhausted,
    Rational as Rational,
    RealNumber as RealNumber,
    Rel as Rel,
    S as S,
    StrictGreaterThan as StrictGreaterThan,
    StrictLessThan as StrictLessThan,
    Subs as Subs,
    Symbol as Symbol,
    SympifyError as SympifyError,
    TribonacciConstant as TribonacciConstant,
    Tuple as Tuple,
    Unequality as Unequality,
    UnevaluatedExpr as UnevaluatedExpr,
    Wild as Wild,
    WildFunction as WildFunction,
    arity as arity,
    bottom_up as bottom_up,
    cacheit as cacheit,
    comp as comp,
    count_ops as count_ops,
    default_sort_key as default_sort_key,
    diff as diff,
    evalf as evalf,
    evaluate as evaluate,
    expand as expand,
    expand_complex as expand_complex,
    expand_func as expand_func,
    expand_log as expand_log,
    expand_mul as expand_mul,
    expand_multinomial as expand_multinomial,
    expand_power_base as expand_power_base,
    expand_power_exp as expand_power_exp,
    expand_trig as expand_trig,
    factor_nc as factor_nc,
    factor_terms as factor_terms,
    gcd_terms as gcd_terms,
    igcd as igcd,
    ilcm as ilcm,
    integer_log as integer_log,
    integer_nthroot as integer_nthroot,
    mod_inverse as mod_inverse,
    nan as nan,
    nfloat as nfloat,
    num_digits as num_digits,
    oo as oo,
    ordered as ordered,
    pi as pi,
    postorder_traversal as postorder_traversal,
    preorder_traversal as preorder_traversal,
    prod as prod,
    seterr as seterr,
    symbols as symbols,
    sympify as sympify,
    trailing as trailing,
    use as use,
    var as var,
    vectorize as vectorize,
    zoo as zoo,
)
from .discrete import (
    convolution as convolution,
    covering_product as covering_product,
    fft as fft,
    fwht as fwht,
    ifft as ifft,
    ifwht as ifwht,
    intersecting_product as intersecting_product,
    intt as intt,
    inverse_mobius_transform as inverse_mobius_transform,
    mobius_transform as mobius_transform,
    ntt as ntt,
)
from .functions import (
    Abs as Abs,
    Chi as Chi,
    Ci as Ci,
    DiracDelta as DiracDelta,
    E1 as E1,
    Ei as Ei,
    Eijk as Eijk,
    FallingFactorial as FallingFactorial,
    Heaviside as Heaviside,
    Id as Id,
    KroneckerDelta as KroneckerDelta,
    LambertW as LambertW,
    LeviCivita as LeviCivita,
    Li as Li,
    Max as Max,
    Min as Min,
    Piecewise as Piecewise,
    Rem as Rem,
    RisingFactorial as RisingFactorial,
    Shi as Shi,
    Si as Si,
    SingularityFunction as SingularityFunction,
    Ynm as Ynm,
    Ynm_c as Ynm_c,
    Znm as Znm,
    acos as acos,
    acosh as acosh,
    acot as acot,
    acoth as acoth,
    acsc as acsc,
    acsch as acsch,
    adjoint as adjoint,
    airyai as airyai,
    airyaiprime as airyaiprime,
    airybi as airybi,
    airybiprime as airybiprime,
    andre as andre,
    appellf1 as appellf1,
    arg as arg,
    asec as asec,
    asech as asech,
    asin as asin,
    asinh as asinh,
    assoc_laguerre as assoc_laguerre,
    assoc_legendre as assoc_legendre,
    atan as atan,
    atan2 as atan2,
    atanh as atanh,
    bell as bell,
    bernoulli as bernoulli,
    besseli as besseli,
    besselj as besselj,
    besselk as besselk,
    bessely as bessely,
    beta as beta,
    betainc as betainc,
    betainc_regularized as betainc_regularized,
    binomial as binomial,
    bspline_basis as bspline_basis,
    bspline_basis_set as bspline_basis_set,
    carmichael as carmichael,
    catalan as catalan,
    cbrt as cbrt,
    ceiling as ceiling,
    chebyshevt as chebyshevt,
    chebyshevt_root as chebyshevt_root,
    chebyshevu as chebyshevu,
    chebyshevu_root as chebyshevu_root,
    conjugate as conjugate,
    cos as cos,
    cosh as cosh,
    cot as cot,
    coth as coth,
    csc as csc,
    csch as csch,
    digamma as digamma,
    dirichlet_eta as dirichlet_eta,
    divisor_sigma as divisor_sigma,
    elliptic_e as elliptic_e,
    elliptic_f as elliptic_f,
    elliptic_k as elliptic_k,
    elliptic_pi as elliptic_pi,
    erf as erf,
    erf2 as erf2,
    erf2inv as erf2inv,
    erfc as erfc,
    erfcinv as erfcinv,
    erfi as erfi,
    erfinv as erfinv,
    euler as euler,
    exp as exp,
    exp_polar as exp_polar,
    expint as expint,
    factorial as factorial,
    factorial2 as factorial2,
    ff as ff,
    fibonacci as fibonacci,
    floor as floor,
    frac as frac,
    fresnelc as fresnelc,
    fresnels as fresnels,
    gamma as gamma,
    gegenbauer as gegenbauer,
    genocchi as genocchi,
    hankel1 as hankel1,
    hankel2 as hankel2,
    harmonic as harmonic,
    hermite as hermite,
    hermite_prob as hermite_prob,
    hn1 as hn1,
    hn2 as hn2,
    hyper as hyper,
    im as im,
    interpolating_spline as interpolating_spline,
    jacobi as jacobi,
    jacobi_normalized as jacobi_normalized,
    jacobi_symbol as jacobi_symbol,
    jn as jn,
    jn_zeros as jn_zeros,
    kronecker_symbol as kronecker_symbol,
    laguerre as laguerre,
    legendre as legendre,
    legendre_symbol as legendre_symbol,
    lerchphi as lerchphi,
    li as li,
    ln as ln,
    log as log,
    loggamma as loggamma,
    lowergamma as lowergamma,
    lucas as lucas,
    marcumq as marcumq,
    mathieuc as mathieuc,
    mathieucprime as mathieucprime,
    mathieus as mathieus,
    mathieusprime as mathieusprime,
    meijerg as meijerg,
    mobius as mobius,
    motzkin as motzkin,
    multigamma as multigamma,
    partition as partition,
    periodic_argument as periodic_argument,
    piecewise_exclusive as piecewise_exclusive,
    piecewise_fold as piecewise_fold,
    polar_lift as polar_lift,
    polarify as polarify,
    polygamma as polygamma,
    polylog as polylog,
    primenu as primenu,
    primeomega as primeomega,
    primepi as primepi,
    principal_branch as principal_branch,
    re as re,
    real_root as real_root,
    reduced_totient as reduced_totient,
    rf as rf,
    riemann_xi as riemann_xi,
    root as root,
    sec as sec,
    sech as sech,
    sign as sign,
    sin as sin,
    sinc as sinc,
    sinh as sinh,
    sqrt as sqrt,
    stieltjes as stieltjes,
    subfactorial as subfactorial,
    tan as tan,
    tanh as tanh,
    totient as totient,
    transpose as transpose,
    tribonacci as tribonacci,
    trigamma as trigamma,
    unbranched_argument as unbranched_argument,
    unpolarify as unpolarify,
    uppergamma as uppergamma,
    yn as yn,
    zeta as zeta,
)
from .geometry import (
    Circle as Circle,
    Curve as Curve,
    Ellipse as Ellipse,
    GeometryError as GeometryError,
    Line as Line,
    Line2D as Line2D,
    Line3D as Line3D,
    Parabola as Parabola,
    Plane as Plane,
    Point as Point,
    Point2D as Point2D,
    Point3D as Point3D,
    Polygon as Polygon,
    Ray as Ray,
    Ray2D as Ray2D,
    Ray3D as Ray3D,
    RegularPolygon as RegularPolygon,
    Segment as Segment,
    Segment2D as Segment2D,
    Segment3D as Segment3D,
    Triangle as Triangle,
    are_similar as are_similar,
    centroid as centroid,
    closest_points as closest_points,
    convex_hull as convex_hull,
    deg as deg,
    farthest_points as farthest_points,
    idiff as idiff,
    intersection as intersection,
    rad as rad,
)
from .integrals import (
    CosineTransform as CosineTransform,
    FourierTransform as FourierTransform,
    HankelTransform as HankelTransform,
    Integral as Integral,
    InverseCosineTransform as InverseCosineTransform,
    InverseFourierTransform as InverseFourierTransform,
    InverseHankelTransform as InverseHankelTransform,
    InverseLaplaceTransform as InverseLaplaceTransform,
    InverseMellinTransform as InverseMellinTransform,
    InverseSineTransform as InverseSineTransform,
    LaplaceTransform as LaplaceTransform,
    MellinTransform as MellinTransform,
    SineTransform as SineTransform,
    cosine_transform as cosine_transform,
    fourier_transform as fourier_transform,
    hankel_transform as hankel_transform,
    integrate as integrate,
    inverse_cosine_transform as inverse_cosine_transform,
    inverse_fourier_transform as inverse_fourier_transform,
    inverse_hankel_transform as inverse_hankel_transform,
    inverse_laplace_transform as inverse_laplace_transform,
    inverse_mellin_transform as inverse_mellin_transform,
    inverse_sine_transform as inverse_sine_transform,
    laplace_correspondence as laplace_correspondence,
    laplace_initial_conds as laplace_initial_conds,
    laplace_transform as laplace_transform,
    line_integrate as line_integrate,
    mellin_transform as mellin_transform,
    sine_transform as sine_transform,
    singularityintegrate as singularityintegrate,
)
from .interactive import (
    init_printing as init_printing,
    init_session as init_session,
    interactive_traversal as interactive_traversal,
)
from .logic import (
    And as And,
    Equivalent as Equivalent,
    ITE as ITE,
    Implies as Implies,
    Nand as Nand,
    Nor as Nor,
    Not as Not,
    Or as Or,
    POSform as POSform,
    SOPform as SOPform,
    Xor as Xor,
    bool_map as bool_map,
    false as false,
    satisfiable as satisfiable,
    simplify_logic as simplify_logic,
    to_cnf as to_cnf,
    to_dnf as to_dnf,
    to_nnf as to_nnf,
    true as true,
)
from .matrices import (
    Adjoint as Adjoint,
    BlockDiagMatrix as BlockDiagMatrix,
    BlockMatrix as BlockMatrix,
    DeferredVector as DeferredVector,
    Determinant as Determinant,
    DiagMatrix as DiagMatrix,
    DiagonalMatrix as DiagonalMatrix,
    DiagonalOf as DiagonalOf,
    DotProduct as DotProduct,
    FunctionMatrix as FunctionMatrix,
    GramSchmidt as GramSchmidt,
    HadamardPower as HadamardPower,
    HadamardProduct as HadamardProduct,
    Identity as Identity,
    ImmutableDenseMatrix as ImmutableDenseMatrix,
    ImmutableMatrix as ImmutableMatrix,
    ImmutableSparseMatrix as ImmutableSparseMatrix,
    Inverse as Inverse,
    KroneckerProduct as KroneckerProduct,
    MatAdd as MatAdd,
    MatMul as MatMul,
    MatPow as MatPow,
    Matrix as Matrix,
    MatrixBase as MatrixBase,
    MatrixExpr as MatrixExpr,
    MatrixPermute as MatrixPermute,
    MatrixSlice as MatrixSlice,
    MatrixSymbol as MatrixSymbol,
    MutableDenseMatrix as MutableDenseMatrix,
    MutableMatrix as MutableMatrix,
    MutableSparseMatrix as MutableSparseMatrix,
    NonSquareMatrixError as NonSquareMatrixError,
    OneMatrix as OneMatrix,
    Permanent as Permanent,
    PermutationMatrix as PermutationMatrix,
    ShapeError as ShapeError,
    SparseMatrix as SparseMatrix,
    Trace as Trace,
    Transpose as Transpose,
    ZeroMatrix as ZeroMatrix,
    banded as banded,
    block_collapse as block_collapse,
    blockcut as blockcut,
    casoratian as casoratian,
    det as det,
    diag as diag,
    diagonalize_vector as diagonalize_vector,
    eye as eye,
    hadamard_product as hadamard_product,
    hessian as hessian,
    jordan_cell as jordan_cell,
    kronecker_product as kronecker_product,
    list2numpy as list2numpy,
    matrix2numpy as matrix2numpy,
    matrix_multiply_elementwise as matrix_multiply_elementwise,
    matrix_symbols as matrix_symbols,
    ones as ones,
    per as per,
    randMatrix as randMatrix,
    rot_axis1 as rot_axis1,
    rot_axis2 as rot_axis2,
    rot_axis3 as rot_axis3,
    rot_ccw_axis1 as rot_ccw_axis1,
    rot_ccw_axis2 as rot_ccw_axis2,
    rot_ccw_axis3 as rot_ccw_axis3,
    rot_givens as rot_givens,
    symarray as symarray,
    trace as trace,
    wronskian as wronskian,
    zeros as zeros,
)
from .ntheory import (
    Sieve as Sieve,
    abundance as abundance,
    binomial_coefficients as binomial_coefficients,
    binomial_coefficients_list as binomial_coefficients_list,
    composite as composite,
    compositepi as compositepi,
    continued_fraction as continued_fraction,
    continued_fraction_convergents as continued_fraction_convergents,
    continued_fraction_iterator as continued_fraction_iterator,
    continued_fraction_periodic as continued_fraction_periodic,
    continued_fraction_reduce as continued_fraction_reduce,
    cycle_length as cycle_length,
    discrete_log as discrete_log,
    divisor_count as divisor_count,
    divisors as divisors,
    egyptian_fraction as egyptian_fraction,
    factorint as factorint,
    factorrat as factorrat,
    is_abundant as is_abundant,
    is_amicable as is_amicable,
    is_carmichael as is_carmichael,
    is_deficient as is_deficient,
    is_mersenne_prime as is_mersenne_prime,
    is_nthpow_residue as is_nthpow_residue,
    is_perfect as is_perfect,
    is_primitive_root as is_primitive_root,
    is_quad_residue as is_quad_residue,
    isprime as isprime,
    mersenne_prime_exponent as mersenne_prime_exponent,
    multinomial_coefficients as multinomial_coefficients,
    multiplicity as multiplicity,
    n_order as n_order,
    nextprime as nextprime,
    npartitions as npartitions,
    nthroot_mod as nthroot_mod,
    perfect_power as perfect_power,
    pollard_pm1 as pollard_pm1,
    pollard_rho as pollard_rho,
    prevprime as prevprime,
    prime as prime,
    primefactors as primefactors,
    primerange as primerange,
    primitive_root as primitive_root,
    primorial as primorial,
    proper_divisor_count as proper_divisor_count,
    proper_divisors as proper_divisors,
    quadratic_congruence as quadratic_congruence,
    quadratic_residues as quadratic_residues,
    randprime as randprime,
    sieve as sieve,
    sqrt_mod as sqrt_mod,
    sqrt_mod_iter as sqrt_mod_iter,
)
from .parsing import parse_expr as parse_expr
from .plotting import (
    plot as plot,
    plot_backends as plot_backends,
    plot_implicit as plot_implicit,
    plot_parametric as plot_parametric,
    textplot as textplot,
)
from .polys import (
    AlgebraicField as AlgebraicField,
    BasePolynomialError as BasePolynomialError,
    CC as CC,
    CRootOf as CRootOf,
    CoercionFailed as CoercionFailed,
    ComplexField as ComplexField,
    ComplexRootOf as ComplexRootOf,
    ComputationFailed as ComputationFailed,
    Domain as Domain,
    DomainError as DomainError,
    EX as EX,
    EXRAW as EXRAW,
    EvaluationFailed as EvaluationFailed,
    ExactQuotientFailed as ExactQuotientFailed,
    ExpressionDomain as ExpressionDomain,
    ExtraneousFactors as ExtraneousFactors,
    FF as FF,
    FF_gmpy as FF_gmpy,
    FF_python as FF_python,
    FiniteField as FiniteField,
    FlagError as FlagError,
    FractionField as FractionField,
    GF as GF,
    GMPYFiniteField as GMPYFiniteField,
    GMPYIntegerRing as GMPYIntegerRing,
    GMPYRationalField as GMPYRationalField,
    GeneratorsError as GeneratorsError,
    GeneratorsNeeded as GeneratorsNeeded,
    GroebnerBasis as GroebnerBasis,
    HeuristicGCDFailed as HeuristicGCDFailed,
    HomomorphismFailed as HomomorphismFailed,
    IntegerRing as IntegerRing,
    IsomorphismFailed as IsomorphismFailed,
    LC as LC,
    LM as LM,
    LT as LT,
    Monomial as Monomial,
    MultivariatePolynomialError as MultivariatePolynomialError,
    NotAlgebraic as NotAlgebraic,
    NotInvertible as NotInvertible,
    NotReversible as NotReversible,
    OperationNotSupported as OperationNotSupported,
    OptionError as OptionError,
    Options as Options,
    PolificationFailed as PolificationFailed,
    Poly as Poly,
    PolynomialDivisionFailed as PolynomialDivisionFailed,
    PolynomialError as PolynomialError,
    PolynomialRing as PolynomialRing,
    PurePoly as PurePoly,
    PythonFiniteField as PythonFiniteField,
    PythonIntegerRing as PythonIntegerRing,
    PythonRational as PythonRational,
    QQ as QQ,
    QQ_I as QQ_I,
    QQ_gmpy as QQ_gmpy,
    QQ_python as QQ_python,
    RR as RR,
    RationalField as RationalField,
    RealField as RealField,
    RefinementFailed as RefinementFailed,
    RootOf as RootOf,
    RootSum as RootSum,
    UnificationFailed as UnificationFailed,
    UnivariatePolynomialError as UnivariatePolynomialError,
    ZZ as ZZ,
    ZZ_I as ZZ_I,
    ZZ_gmpy as ZZ_gmpy,
    ZZ_python as ZZ_python,
    all_roots as all_roots,
    apart as apart,
    apart_list as apart_list,
    assemble_partfrac_list as assemble_partfrac_list,
    cancel as cancel,
    chebyshevt_poly as chebyshevt_poly,
    chebyshevu_poly as chebyshevu_poly,
    cofactors as cofactors,
    compose as compose,
    construct_domain as construct_domain,
    content as content,
    count_roots as count_roots,
    cyclotomic_poly as cyclotomic_poly,
    decompose as decompose,
    degree as degree,
    degree_list as degree_list,
    discriminant as discriminant,
    div as div,
    exquo as exquo,
    factor as factor,
    factor_list as factor_list,
    field as field,
    field_isomorphism as field_isomorphism,
    galois_group as galois_group,
    gcd as gcd,
    gcd_list as gcd_list,
    gcdex as gcdex,
    gff as gff,
    gff_list as gff_list,
    grevlex as grevlex,
    grlex as grlex,
    groebner as groebner,
    ground_roots as ground_roots,
    half_gcdex as half_gcdex,
    hermite_poly as hermite_poly,
    hermite_prob_poly as hermite_prob_poly,
    horner as horner,
    igrevlex as igrevlex,
    igrlex as igrlex,
    ilex as ilex,
    interpolate as interpolate,
    interpolating_poly as interpolating_poly,
    intervals as intervals,
    invert as invert,
    is_zero_dimensional as is_zero_dimensional,
    isolate as isolate,
    itermonomials as itermonomials,
    jacobi_poly as jacobi_poly,
    laguerre_poly as laguerre_poly,
    lcm as lcm,
    lcm_list as lcm_list,
    legendre_poly as legendre_poly,
    lex as lex,
    minimal_polynomial as minimal_polynomial,
    minpoly as minpoly,
    monic as monic,
    nroots as nroots,
    nth_power_roots_poly as nth_power_roots_poly,
    parallel_poly_from_expr as parallel_poly_from_expr,
    pdiv as pdiv,
    pexquo as pexquo,
    poly as poly,
    poly_from_expr as poly_from_expr,
    pquo as pquo,
    prem as prem,
    prime_decomp as prime_decomp,
    prime_valuation as prime_valuation,
    primitive as primitive,
    primitive_element as primitive_element,
    quo as quo,
    random_poly as random_poly,
    rational_interpolate as rational_interpolate,
    real_roots as real_roots,
    reduced as reduced,
    refine_root as refine_root,
    rem as rem,
    resultant as resultant,
    ring as ring,
    rootof as rootof,
    roots as roots,
    round_two as round_two,
    sfield as sfield,
    sqf as sqf,
    sqf_list as sqf_list,
    sqf_norm as sqf_norm,
    sqf_part as sqf_part,
    sring as sring,
    sturm as sturm,
    subresultants as subresultants,
    swinnerton_dyer_poly as swinnerton_dyer_poly,
    symmetric_poly as symmetric_poly,
    symmetrize as symmetrize,
    terms_gcd as terms_gcd,
    to_number_field as to_number_field,
    together as together,
    total_degree as total_degree,
    trunc as trunc,
    vfield as vfield,
    viete as viete,
    vring as vring,
    xfield as xfield,
    xring as xring,
)
from .printing import (
    StrPrinter as StrPrinter,
    TableForm as TableForm,
    ccode as ccode,
    cxxcode as cxxcode,
    dotprint as dotprint,
    fcode as fcode,
    glsl_code as glsl_code,
    jscode as jscode,
    julia_code as julia_code,
    latex as latex,
    maple_code as maple_code,
    mathematica_code as mathematica_code,
    mathml as mathml,
    multiline_latex as multiline_latex,
    octave_code as octave_code,
    pager_print as pager_print,
    pprint as pprint,
    pprint_try_use_unicode as pprint_try_use_unicode,
    pprint_use_unicode as pprint_use_unicode,
    pretty as pretty,
    pretty_print as pretty_print,
    preview as preview,
    print_ccode as print_ccode,
    print_fcode as print_fcode,
    print_glsl as print_glsl,
    print_gtk as print_gtk,
    print_jscode as print_jscode,
    print_latex as print_latex,
    print_maple_code as print_maple_code,
    print_mathml as print_mathml,
    print_python as print_python,
    print_rcode as print_rcode,
    print_tree as print_tree,
    pycode as pycode,
    python as python,
    rcode as rcode,
    rust_code as rust_code,
    smtlib_code as smtlib_code,
    srepr as srepr,
    sstr as sstr,
    sstrrepr as sstrrepr,
)
from .series import (
    EmptySequence as EmptySequence,
    Limit as Limit,
    O as O,
    Order as Order,
    SeqAdd as SeqAdd,
    SeqFormula as SeqFormula,
    SeqMul as SeqMul,
    SeqPer as SeqPer,
    approximants as approximants,
    difference_delta as difference_delta,
    fourier_series as fourier_series,
    fps as fps,
    gruntz as gruntz,
    limit as limit,
    limit_seq as limit_seq,
    residue as residue,
    sequence as sequence,
    series as series,
)
from .sets import (
    Complement as Complement,
    ComplexRegion as ComplexRegion,
    Complexes as Complexes,
    ConditionSet as ConditionSet,
    Contains as Contains,
    DisjointUnion as DisjointUnion,
    EmptySet as EmptySet,
    FiniteSet as FiniteSet,
    ImageSet as ImageSet,
    Integers as Integers,
    Intersection as Intersection,
    Interval as Interval,
    Naturals as Naturals,
    Naturals0 as Naturals0,
    OmegaPower as OmegaPower,
    Ordinal as Ordinal,
    PowerSet as PowerSet,
    ProductSet as ProductSet,
    Range as Range,
    Rationals as Rationals,
    Reals as Reals,
    Set as Set,
    SymmetricDifference as SymmetricDifference,
    Union as Union,
    UniversalSet as UniversalSet,
    imageset as imageset,
    ord0 as ord0,
)
from .simplify import (
    EPath as EPath,
    FU as FU,
    besselsimp as besselsimp,
    collect as collect,
    collect_const as collect_const,
    combsimp as combsimp,
    cse as cse,
    denom as denom,
    epath as epath,
    exptrigsimp as exptrigsimp,
    fraction as fraction,
    fu as fu,
    gammasimp as gammasimp,
    hyperexpand as hyperexpand,
    hypersimilar as hypersimilar,
    hypersimp as hypersimp,
    kroneckersimp as kroneckersimp,
    logcombine as logcombine,
    nsimplify as nsimplify,
    numer as numer,
    posify as posify,
    powdenest as powdenest,
    powsimp as powsimp,
    radsimp as radsimp,
    ratsimp as ratsimp,
    ratsimpmodprime as ratsimpmodprime,
    rcollect as rcollect,
    separatevars as separatevars,
    signsimp as signsimp,
    simplify as simplify,
    sqrtdenest as sqrtdenest,
    trigsimp as trigsimp,
)
from .solvers import (
    check_assumptions as check_assumptions,
    checkodesol as checkodesol,
    checkpdesol as checkpdesol,
    checksol as checksol,
    classify_ode as classify_ode,
    classify_pde as classify_pde,
    decompogen as decompogen,
    det_quick as det_quick,
    diophantine as diophantine,
    dsolve as dsolve,
    failing_assumptions as failing_assumptions,
    homogeneous_order as homogeneous_order,
    inv_quick as inv_quick,
    linear_eq_to_matrix as linear_eq_to_matrix,
    linsolve as linsolve,
    nonlinsolve as nonlinsolve,
    nsolve as nsolve,
    ode_order as ode_order,
    pde_separate as pde_separate,
    pde_separate_add as pde_separate_add,
    pde_separate_mul as pde_separate_mul,
    pdsolve as pdsolve,
    reduce_abs_inequalities as reduce_abs_inequalities,
    reduce_abs_inequality as reduce_abs_inequality,
    reduce_inequalities as reduce_inequalities,
    rsolve as rsolve,
    rsolve_hyper as rsolve_hyper,
    rsolve_poly as rsolve_poly,
    rsolve_ratio as rsolve_ratio,
    solve as solve,
    solve_linear as solve_linear,
    solve_linear_system as solve_linear_system,
    solve_linear_system_LU as solve_linear_system_LU,
    solve_poly_inequality as solve_poly_inequality,
    solve_poly_system as solve_poly_system,
    solve_rational_inequalities as solve_rational_inequalities,
    solve_triangulated as solve_triangulated,
    solve_undetermined_coeffs as solve_undetermined_coeffs,
    solve_univariate_inequality as solve_univariate_inequality,
    solveset as solveset,
    substitution as substitution,
)
from .tensor import (
    Array as Array,
    DenseNDimArray as DenseNDimArray,
    Idx as Idx,
    ImmutableDenseNDimArray as ImmutableDenseNDimArray,
    ImmutableSparseNDimArray as ImmutableSparseNDimArray,
    Indexed as Indexed,
    IndexedBase as IndexedBase,
    MutableDenseNDimArray as MutableDenseNDimArray,
    MutableSparseNDimArray as MutableSparseNDimArray,
    NDimArray as NDimArray,
    SparseNDimArray as SparseNDimArray,
    derive_by_array as derive_by_array,
    get_contraction_structure as get_contraction_structure,
    get_indices as get_indices,
    permutedims as permutedims,
    shape as shape,
    tensorcontraction as tensorcontraction,
    tensordiagonal as tensordiagonal,
    tensorproduct as tensorproduct,
)
from .utilities import (
    capture as capture,
    cartes as cartes,
    dict_merge as dict_merge,
    filldedent as filldedent,
    flatten as flatten,
    group as group,
    has_dups as has_dups,
    has_variety as has_variety,
    lambdify as lambdify,
    memoize_property as memoize_property,
    numbered_symbols as numbered_symbols,
    postfixes as postfixes,
    prefixes as prefixes,
    public as public,
    reshape as reshape,
    rotations as rotations,
    sift as sift,
    subsets as subsets,
    take as take,
    threaded as threaded,
    timed as timed,
    topological_sort as topological_sort,
    unflatten as unflatten,
    variations as variations,
    xthreaded as xthreaded,
)
from _typeshed import Incomplete
from sympy.release import __version__ as __version__

__all__ = [
    "__version__",
    "sympify",
    "SympifyError",
    "cacheit",
    "Basic",
    "Atom",
    "preorder_traversal",
    "S",
    "Expr",
    "AtomicExpr",
    "UnevaluatedExpr",
    "Symbol",
    "Wild",
    "Dummy",
    "symbols",
    "var",
    "Number",
    "Float",
    "Rational",
    "Integer",
    "NumberSymbol",
    "RealNumber",
    "igcd",
    "ilcm",
    "seterr",
    "E",
    "I",
    "nan",
    "oo",
    "pi",
    "zoo",
    "AlgebraicNumber",
    "comp",
    "mod_inverse",
    "Pow",
    "integer_nthroot",
    "integer_log",
    "trailing",
    "Mul",
    "prod",
    "Add",
    "Mod",
    "Rel",
    "Eq",
    "Ne",
    "Lt",
    "Le",
    "Gt",
    "Ge",
    "Equality",
    "GreaterThan",
    "LessThan",
    "Unequality",
    "StrictGreaterThan",
    "StrictLessThan",
    "vectorize",
    "Lambda",
    "WildFunction",
    "Derivative",
    "diff",
    "FunctionClass",
    "Function",
    "Subs",
    "expand",
    "PoleError",
    "count_ops",
    "expand_mul",
    "expand_log",
    "expand_func",
    "expand_trig",
    "expand_complex",
    "expand_multinomial",
    "nfloat",
    "expand_power_base",
    "expand_power_exp",
    "arity",
    "PrecisionExhausted",
    "N",
    "evalf",
    "Tuple",
    "Dict",
    "gcd_terms",
    "factor_terms",
    "factor_nc",
    "evaluate",
    "Catalan",
    "EulerGamma",
    "GoldenRatio",
    "TribonacciConstant",
    "bottom_up",
    "use",
    "postorder_traversal",
    "default_sort_key",
    "ordered",
    "num_digits",
    "to_cnf",
    "to_dnf",
    "to_nnf",
    "And",
    "Or",
    "Not",
    "Xor",
    "Nand",
    "Nor",
    "Implies",
    "Equivalent",
    "ITE",
    "POSform",
    "SOPform",
    "simplify_logic",
    "bool_map",
    "true",
    "false",
    "satisfiable",
    "AppliedPredicate",
    "Predicate",
    "AssumptionsContext",
    "assuming",
    "Q",
    "ask",
    "register_handler",
    "remove_handler",
    "refine",
    "Poly",
    "PurePoly",
    "poly_from_expr",
    "parallel_poly_from_expr",
    "degree",
    "total_degree",
    "degree_list",
    "LC",
    "LM",
    "LT",
    "pdiv",
    "prem",
    "pquo",
    "pexquo",
    "div",
    "rem",
    "quo",
    "exquo",
    "half_gcdex",
    "gcdex",
    "invert",
    "subresultants",
    "resultant",
    "discriminant",
    "cofactors",
    "gcd_list",
    "gcd",
    "lcm_list",
    "lcm",
    "terms_gcd",
    "trunc",
    "monic",
    "content",
    "primitive",
    "compose",
    "decompose",
    "sturm",
    "gff_list",
    "gff",
    "sqf_norm",
    "sqf_part",
    "sqf_list",
    "sqf",
    "factor_list",
    "factor",
    "intervals",
    "refine_root",
    "count_roots",
    "all_roots",
    "real_roots",
    "nroots",
    "ground_roots",
    "nth_power_roots_poly",
    "cancel",
    "reduced",
    "groebner",
    "is_zero_dimensional",
    "GroebnerBasis",
    "poly",
    "symmetrize",
    "horner",
    "interpolate",
    "rational_interpolate",
    "viete",
    "together",
    "BasePolynomialError",
    "ExactQuotientFailed",
    "PolynomialDivisionFailed",
    "OperationNotSupported",
    "HeuristicGCDFailed",
    "HomomorphismFailed",
    "IsomorphismFailed",
    "ExtraneousFactors",
    "EvaluationFailed",
    "RefinementFailed",
    "CoercionFailed",
    "NotInvertible",
    "NotReversible",
    "NotAlgebraic",
    "DomainError",
    "PolynomialError",
    "UnificationFailed",
    "GeneratorsError",
    "GeneratorsNeeded",
    "ComputationFailed",
    "UnivariatePolynomialError",
    "MultivariatePolynomialError",
    "PolificationFailed",
    "OptionError",
    "FlagError",
    "minpoly",
    "minimal_polynomial",
    "primitive_element",
    "field_isomorphism",
    "to_number_field",
    "isolate",
    "round_two",
    "prime_decomp",
    "prime_valuation",
    "galois_group",
    "itermonomials",
    "Monomial",
    "lex",
    "grlex",
    "grevlex",
    "ilex",
    "igrlex",
    "igrevlex",
    "CRootOf",
    "rootof",
    "RootOf",
    "ComplexRootOf",
    "RootSum",
    "roots",
    "Domain",
    "FiniteField",
    "IntegerRing",
    "RationalField",
    "RealField",
    "ComplexField",
    "PythonFiniteField",
    "GMPYFiniteField",
    "PythonIntegerRing",
    "GMPYIntegerRing",
    "PythonRational",
    "GMPYRationalField",
    "AlgebraicField",
    "PolynomialRing",
    "FractionField",
    "ExpressionDomain",
    "FF_python",
    "FF_gmpy",
    "ZZ_python",
    "ZZ_gmpy",
    "QQ_python",
    "QQ_gmpy",
    "GF",
    "FF",
    "ZZ",
    "QQ",
    "ZZ_I",
    "QQ_I",
    "RR",
    "CC",
    "EX",
    "EXRAW",
    "construct_domain",
    "swinnerton_dyer_poly",
    "cyclotomic_poly",
    "symmetric_poly",
    "random_poly",
    "interpolating_poly",
    "jacobi_poly",
    "chebyshevt_poly",
    "chebyshevu_poly",
    "hermite_poly",
    "hermite_prob_poly",
    "legendre_poly",
    "laguerre_poly",
    "apart",
    "apart_list",
    "assemble_partfrac_list",
    "Options",
    "ring",
    "xring",
    "vring",
    "sring",
    "field",
    "xfield",
    "vfield",
    "sfield",
    "Order",
    "O",
    "limit",
    "Limit",
    "gruntz",
    "series",
    "approximants",
    "residue",
    "EmptySequence",
    "SeqPer",
    "SeqFormula",
    "sequence",
    "SeqAdd",
    "SeqMul",
    "fourier_series",
    "fps",
    "difference_delta",
    "limit_seq",
    "factorial",
    "factorial2",
    "rf",
    "ff",
    "binomial",
    "RisingFactorial",
    "FallingFactorial",
    "subfactorial",
    "carmichael",
    "fibonacci",
    "lucas",
    "motzkin",
    "tribonacci",
    "harmonic",
    "bernoulli",
    "bell",
    "euler",
    "catalan",
    "genocchi",
    "andre",
    "partition",
    "divisor_sigma",
    "legendre_symbol",
    "jacobi_symbol",
    "kronecker_symbol",
    "mobius",
    "primenu",
    "primeomega",
    "totient",
    "primepi",
    "reduced_totient",
    "sqrt",
    "root",
    "Min",
    "Max",
    "Id",
    "real_root",
    "Rem",
    "cbrt",
    "re",
    "im",
    "sign",
    "Abs",
    "conjugate",
    "arg",
    "polar_lift",
    "periodic_argument",
    "unbranched_argument",
    "principal_branch",
    "transpose",
    "adjoint",
    "polarify",
    "unpolarify",
    "sin",
    "cos",
    "tan",
    "sec",
    "csc",
    "cot",
    "sinc",
    "asin",
    "acos",
    "atan",
    "asec",
    "acsc",
    "acot",
    "atan2",
    "exp_polar",
    "exp",
    "ln",
    "log",
    "LambertW",
    "sinh",
    "cosh",
    "tanh",
    "coth",
    "sech",
    "csch",
    "asinh",
    "acosh",
    "atanh",
    "acoth",
    "asech",
    "acsch",
    "floor",
    "ceiling",
    "frac",
    "Piecewise",
    "piecewise_fold",
    "piecewise_exclusive",
    "erf",
    "erfc",
    "erfi",
    "erf2",
    "erfinv",
    "erfcinv",
    "erf2inv",
    "Ei",
    "expint",
    "E1",
    "li",
    "Li",
    "Si",
    "Ci",
    "Shi",
    "Chi",
    "fresnels",
    "fresnelc",
    "gamma",
    "lowergamma",
    "uppergamma",
    "polygamma",
    "loggamma",
    "digamma",
    "trigamma",
    "multigamma",
    "dirichlet_eta",
    "zeta",
    "lerchphi",
    "polylog",
    "stieltjes",
    "Eijk",
    "LeviCivita",
    "KroneckerDelta",
    "SingularityFunction",
    "DiracDelta",
    "Heaviside",
    "bspline_basis",
    "bspline_basis_set",
    "interpolating_spline",
    "besselj",
    "bessely",
    "besseli",
    "besselk",
    "hankel1",
    "hankel2",
    "jn",
    "yn",
    "jn_zeros",
    "hn1",
    "hn2",
    "airyai",
    "airybi",
    "airyaiprime",
    "airybiprime",
    "marcumq",
    "hyper",
    "meijerg",
    "appellf1",
    "legendre",
    "assoc_legendre",
    "hermite",
    "hermite_prob",
    "chebyshevt",
    "chebyshevu",
    "chebyshevu_root",
    "chebyshevt_root",
    "laguerre",
    "assoc_laguerre",
    "gegenbauer",
    "jacobi",
    "jacobi_normalized",
    "Ynm",
    "Ynm_c",
    "Znm",
    "elliptic_k",
    "elliptic_f",
    "elliptic_e",
    "elliptic_pi",
    "beta",
    "mathieus",
    "mathieuc",
    "mathieusprime",
    "mathieucprime",
    "riemann_xi",
    "betainc",
    "betainc_regularized",
    "nextprime",
    "prevprime",
    "prime",
    "primerange",
    "randprime",
    "Sieve",
    "sieve",
    "primorial",
    "cycle_length",
    "composite",
    "compositepi",
    "isprime",
    "divisors",
    "proper_divisors",
    "factorint",
    "multiplicity",
    "perfect_power",
    "pollard_pm1",
    "pollard_rho",
    "primefactors",
    "divisor_count",
    "proper_divisor_count",
    "factorrat",
    "mersenne_prime_exponent",
    "is_perfect",
    "is_mersenne_prime",
    "is_abundant",
    "is_deficient",
    "is_amicable",
    "is_carmichael",
    "abundance",
    "npartitions",
    "is_primitive_root",
    "is_quad_residue",
    "n_order",
    "sqrt_mod",
    "quadratic_residues",
    "primitive_root",
    "nthroot_mod",
    "is_nthpow_residue",
    "sqrt_mod_iter",
    "discrete_log",
    "quadratic_congruence",
    "binomial_coefficients",
    "binomial_coefficients_list",
    "multinomial_coefficients",
    "continued_fraction_periodic",
    "continued_fraction_iterator",
    "continued_fraction_reduce",
    "continued_fraction_convergents",
    "continued_fraction",
    "egyptian_fraction",
    "product",
    "Product",
    "summation",
    "Sum",
    "fft",
    "ifft",
    "ntt",
    "intt",
    "fwht",
    "ifwht",
    "mobius_transform",
    "inverse_mobius_transform",
    "convolution",
    "covering_product",
    "intersecting_product",
    "simplify",
    "hypersimp",
    "hypersimilar",
    "logcombine",
    "separatevars",
    "posify",
    "besselsimp",
    "kroneckersimp",
    "signsimp",
    "nsimplify",
    "FU",
    "fu",
    "sqrtdenest",
    "cse",
    "epath",
    "EPath",
    "hyperexpand",
    "collect",
    "rcollect",
    "radsimp",
    "collect_const",
    "fraction",
    "numer",
    "denom",
    "trigsimp",
    "exptrigsimp",
    "powsimp",
    "powdenest",
    "combsimp",
    "gammasimp",
    "ratsimp",
    "ratsimpmodprime",
    "Set",
    "Interval",
    "Union",
    "EmptySet",
    "FiniteSet",
    "ProductSet",
    "Intersection",
    "imageset",
    "DisjointUnion",
    "Complement",
    "SymmetricDifference",
    "ImageSet",
    "Range",
    "ComplexRegion",
    "Reals",
    "Contains",
    "ConditionSet",
    "Ordinal",
    "OmegaPower",
    "ord0",
    "PowerSet",
    "Naturals",
    "Naturals0",
    "UniversalSet",
    "Integers",
    "Rationals",
    "Complexes",
    "solve",
    "solve_linear_system",
    "solve_linear_system_LU",
    "solve_undetermined_coeffs",
    "nsolve",
    "solve_linear",
    "checksol",
    "det_quick",
    "inv_quick",
    "check_assumptions",
    "failing_assumptions",
    "diophantine",
    "rsolve",
    "rsolve_poly",
    "rsolve_ratio",
    "rsolve_hyper",
    "checkodesol",
    "classify_ode",
    "dsolve",
    "homogeneous_order",
    "solve_poly_system",
    "solve_triangulated",
    "pde_separate",
    "pde_separate_add",
    "pde_separate_mul",
    "pdsolve",
    "classify_pde",
    "checkpdesol",
    "ode_order",
    "reduce_inequalities",
    "reduce_abs_inequality",
    "reduce_abs_inequalities",
    "solve_poly_inequality",
    "solve_rational_inequalities",
    "solve_univariate_inequality",
    "decompogen",
    "solveset",
    "linsolve",
    "linear_eq_to_matrix",
    "nonlinsolve",
    "substitution",
    "ShapeError",
    "NonSquareMatrixError",
    "GramSchmidt",
    "casoratian",
    "diag",
    "eye",
    "hessian",
    "jordan_cell",
    "list2numpy",
    "matrix2numpy",
    "matrix_multiply_elementwise",
    "ones",
    "randMatrix",
    "rot_axis1",
    "rot_axis2",
    "rot_axis3",
    "symarray",
    "wronskian",
    "zeros",
    "MutableDenseMatrix",
    "DeferredVector",
    "MatrixBase",
    "Matrix",
    "MutableMatrix",
    "MutableSparseMatrix",
    "banded",
    "ImmutableDenseMatrix",
    "ImmutableSparseMatrix",
    "ImmutableMatrix",
    "SparseMatrix",
    "MatrixSlice",
    "BlockDiagMatrix",
    "BlockMatrix",
    "FunctionMatrix",
    "Identity",
    "Inverse",
    "MatAdd",
    "MatMul",
    "MatPow",
    "MatrixExpr",
    "MatrixSymbol",
    "Trace",
    "Transpose",
    "ZeroMatrix",
    "OneMatrix",
    "blockcut",
    "block_collapse",
    "matrix_symbols",
    "Adjoint",
    "hadamard_product",
    "HadamardProduct",
    "HadamardPower",
    "Determinant",
    "det",
    "diagonalize_vector",
    "DiagMatrix",
    "DiagonalMatrix",
    "DiagonalOf",
    "trace",
    "DotProduct",
    "kronecker_product",
    "KroneckerProduct",
    "PermutationMatrix",
    "MatrixPermute",
    "Permanent",
    "per",
    "rot_ccw_axis1",
    "rot_ccw_axis2",
    "rot_ccw_axis3",
    "rot_givens",
    "Point",
    "Point2D",
    "Point3D",
    "Line",
    "Ray",
    "Segment",
    "Line2D",
    "Segment2D",
    "Ray2D",
    "Line3D",
    "Segment3D",
    "Ray3D",
    "Plane",
    "Ellipse",
    "Circle",
    "Polygon",
    "RegularPolygon",
    "Triangle",
    "rad",
    "deg",
    "are_similar",
    "centroid",
    "convex_hull",
    "idiff",
    "intersection",
    "closest_points",
    "farthest_points",
    "GeometryError",
    "Curve",
    "Parabola",
    "flatten",
    "group",
    "take",
    "subsets",
    "variations",
    "numbered_symbols",
    "cartes",
    "capture",
    "dict_merge",
    "prefixes",
    "postfixes",
    "sift",
    "topological_sort",
    "unflatten",
    "has_dups",
    "has_variety",
    "reshape",
    "rotations",
    "filldedent",
    "lambdify",
    "threaded",
    "xthreaded",
    "public",
    "memoize_property",
    "timed",
    "integrate",
    "Integral",
    "line_integrate",
    "mellin_transform",
    "inverse_mellin_transform",
    "MellinTransform",
    "InverseMellinTransform",
    "laplace_transform",
    "inverse_laplace_transform",
    "LaplaceTransform",
    "laplace_correspondence",
    "laplace_initial_conds",
    "InverseLaplaceTransform",
    "fourier_transform",
    "inverse_fourier_transform",
    "FourierTransform",
    "InverseFourierTransform",
    "sine_transform",
    "inverse_sine_transform",
    "SineTransform",
    "InverseSineTransform",
    "cosine_transform",
    "inverse_cosine_transform",
    "CosineTransform",
    "InverseCosineTransform",
    "hankel_transform",
    "inverse_hankel_transform",
    "HankelTransform",
    "InverseHankelTransform",
    "singularityintegrate",
    "IndexedBase",
    "Idx",
    "Indexed",
    "get_contraction_structure",
    "get_indices",
    "shape",
    "MutableDenseNDimArray",
    "ImmutableDenseNDimArray",
    "MutableSparseNDimArray",
    "ImmutableSparseNDimArray",
    "NDimArray",
    "tensorproduct",
    "tensorcontraction",
    "tensordiagonal",
    "derive_by_array",
    "permutedims",
    "Array",
    "DenseNDimArray",
    "SparseNDimArray",
    "parse_expr",
    "euler_equations",
    "singularities",
    "is_increasing",
    "is_strictly_increasing",
    "is_decreasing",
    "is_strictly_decreasing",
    "is_monotonic",
    "finite_diff_weights",
    "apply_finite_diff",
    "differentiate_finite",
    "periodicity",
    "not_empty_in",
    "AccumBounds",
    "is_convex",
    "stationary_points",
    "minimum",
    "maximum",
    "Quaternion",
    "pager_print",
    "pretty",
    "pretty_print",
    "pprint",
    "pprint_use_unicode",
    "pprint_try_use_unicode",
    "latex",
    "print_latex",
    "multiline_latex",
    "mathml",
    "print_mathml",
    "python",
    "print_python",
    "pycode",
    "ccode",
    "print_ccode",
    "smtlib_code",
    "glsl_code",
    "print_glsl",
    "cxxcode",
    "fcode",
    "print_fcode",
    "rcode",
    "print_rcode",
    "jscode",
    "print_jscode",
    "julia_code",
    "mathematica_code",
    "octave_code",
    "rust_code",
    "print_gtk",
    "preview",
    "srepr",
    "print_tree",
    "StrPrinter",
    "sstr",
    "sstrrepr",
    "TableForm",
    "dotprint",
    "maple_code",
    "print_maple_code",
    "plot",
    "textplot",
    "plot_backends",
    "plot_implicit",
    "plot_parametric",
    "init_session",
    "init_printing",
    "interactive_traversal",
    "test",
    "doctest",
    "algebras",
    "assumptions",
    "calculus",
    "concrete",
    "discrete",
    "external",
    "functions",
    "geometry",
    "interactive",
    "multipledispatch",
    "ntheory",
    "parsing",
    "plotting",
    "polys",
    "printing",
    "release",
    "strategies",
    "tensor",
    "utilities",
]

test: Incomplete
doctest: Incomplete

# Names in __all__ with no definition:
#   algebras
#   assumptions
#   calculus
#   concrete
#   discrete
#   external
#   functions
#   geometry
#   interactive
#   multipledispatch
#   ntheory
#   parsing
#   plotting
#   polys
#   printing
#   release
#   strategies
#   tensor
#   utilities
