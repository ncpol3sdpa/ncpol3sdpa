from _typeshed import Incomplete
from sympy.core.basic import Basic as Basic
from sympy.core.containers import Tuple as Tuple
from sympy.core.evalf import EvalfMixin as EvalfMixin, N as N
from sympy.core.numbers import oo as oo
from sympy.core.symbol import Dummy as Dummy
from sympy.core.sympify import sympify as sympify
from sympy.functions.elementary.trigonometric import atan as atan, cos as cos, sin as sin
from sympy.matrices import eye as eye
from sympy.multipledispatch import dispatch as dispatch
from sympy.printing import sstr as sstr
from sympy.sets import FiniteSet as FiniteSet, Set as Set, Union as Union
from sympy.sets.handlers.intersection import intersection_sets as intersection_sets
from sympy.sets.handlers.union import union_sets as union_sets
from sympy.solvers.solvers import solve as solve
from sympy.utilities.iterables import is_sequence as is_sequence
from sympy.utilities.misc import func_name as func_name

ordering_of_classes: Incomplete
x: Incomplete
y: Incomplete
T: Incomplete

class GeometryEntity(Basic, EvalfMixin):
    def __cmp__(self, other): ...
    def __contains__(self, other) -> bool: ...
    def __getnewargs__(self): ...
    def __ne__(self, o): ...
    def __new__(cls, *args, **kwargs): ...
    def __radd__(self, a): ...
    def __rtruediv__(self, a): ...
    def __rmul__(self, a): ...
    def __rsub__(self, a): ...
    @property
    def ambient_dimension(self) -> None: ...
    @property
    def bounds(self) -> None: ...
    def encloses(self, o): ...
    def equals(self, o): ...
    def intersection(self, o) -> None: ...
    def is_similar(self, other) -> None: ...
    def reflect(self, line): ...
    def rotate(self, angle, pt: Incomplete | None = None): ...
    def scale(self, x: int = 1, y: int = 1, pt: Incomplete | None = None): ...
    def translate(self, x: int = 0, y: int = 0): ...
    def parameter_value(self, other, t): ...

class GeometrySet(GeometryEntity, Set): ...

def translate(x, y): ...
def scale(x, y, pt: Incomplete | None = None): ...
def rotate(th): ...
