from .entity import GeometryEntity as GeometryEntity
from .line import Line as Line, Line3D as Line3D, LinearEntity as LinearEntity, LinearEntity3D as LinearEntity3D, Ray as Ray, Ray3D as Ray3D, Segment as Segment, Segment3D as Segment3D
from .point import Point as Point, Point3D as Point3D
from _typeshed import Incomplete
from sympy.core import Dummy as Dummy, Rational as Rational, S as S, Symbol as Symbol
from sympy.functions.elementary.trigonometric import acos as acos, asin as asin, cos as cos, sin as sin, sqrt as sqrt
from sympy.matrices import Matrix as Matrix
from sympy.polys.polytools import cancel as cancel
from sympy.solvers import linsolve as linsolve, solve as solve
from sympy.utilities.iterables import is_sequence as is_sequence, uniq as uniq
from sympy.utilities.misc import Undecidable as Undecidable, filldedent as filldedent, func_name as func_name

x: Incomplete
y: Incomplete
z: Incomplete
t: Incomplete

class Plane(GeometryEntity):
    def __new__(cls, p1, a: Incomplete | None = None, b: Incomplete | None = None, **kwargs): ...
    def __contains__(self, o) -> bool: ...
    def angle_between(self, o): ...
    def arbitrary_point(self, u: Incomplete | None = None, v: Incomplete | None = None): ...
    @staticmethod
    def are_concurrent(*planes): ...
    def distance(self, o): ...
    def equals(self, o): ...
    def equation(self, x: Incomplete | None = None, y: Incomplete | None = None, z: Incomplete | None = None): ...
    def intersection(self, o): ...
    def is_coplanar(self, o): ...
    def is_parallel(self, l): ...
    def is_perpendicular(self, l): ...
    @property
    def normal_vector(self): ...
    @property
    def p1(self): ...
    def parallel_plane(self, pt): ...
    def perpendicular_line(self, pt): ...
    def perpendicular_plane(self, *pts): ...
    def projection_line(self, line): ...
    def projection(self, pt): ...
    def random_point(self, seed: Incomplete | None = None): ...
    def parameter_value(self, other, u, v: Incomplete | None = None): ...
    @property
    def ambient_dimension(self): ...
