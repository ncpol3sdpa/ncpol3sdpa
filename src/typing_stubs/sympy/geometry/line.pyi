from .entity import GeometryEntity as GeometryEntity, GeometrySet as GeometrySet
from .exceptions import GeometryError as GeometryError
from .point import Point as Point, Point3D as Point3D
from .util import find as find, intersection as intersection
from _typeshed import Incomplete
from sympy.core.containers import Tuple as Tuple
from sympy.core.evalf import N as N
from sympy.core.expr import Expr as Expr
from sympy.core.numbers import Float as Float, Rational as Rational, oo as oo
from sympy.core.relational import Eq as Eq
from sympy.core.singleton import S as S
from sympy.core.sorting import ordered as ordered
from sympy.core.symbol import Dummy as Dummy, uniquely_named_symbol as uniquely_named_symbol
from sympy.core.sympify import sympify as sympify
from sympy.functions.elementary.piecewise import Piecewise as Piecewise
from sympy.functions.elementary.trigonometric import acos as acos, atan2 as atan2, tan as tan
from sympy.logic.boolalg import And as And
from sympy.matrices import Matrix as Matrix
from sympy.sets.sets import Intersection as Intersection
from sympy.simplify.simplify import simplify as simplify
from sympy.solvers.solvers import solve as solve
from sympy.solvers.solveset import linear_coeffs as linear_coeffs
from sympy.utilities.misc import Undecidable as Undecidable, filldedent as filldedent

t: Incomplete
u: Incomplete

class LinearEntity(GeometrySet):
    def __new__(cls, p1, p2: Incomplete | None = None, **kwargs): ...
    def __contains__(self, other) -> bool: ...
    @property
    def ambient_dimension(self): ...
    def angle_between(l1, l2): ...
    def smallest_angle_between(l1, l2): ...
    def arbitrary_point(self, parameter: str = 't'): ...
    @staticmethod
    def are_concurrent(*lines): ...
    def contains(self, other) -> None: ...
    @property
    def direction(self): ...
    def intersection(self, other): ...
    def is_parallel(l1, l2): ...
    def is_perpendicular(l1, l2): ...
    def is_similar(self, other): ...
    @property
    def length(self): ...
    @property
    def p1(self): ...
    @property
    def p2(self): ...
    def parallel_line(self, p): ...
    def perpendicular_line(self, p): ...
    def perpendicular_segment(self, p): ...
    @property
    def points(self): ...
    def projection(self, other): ...
    def random_point(self, seed: Incomplete | None = None): ...
    def bisectors(self, other): ...

class Line(LinearEntity):
    def __new__(cls, *args, **kwargs): ...
    def contains(self, other): ...
    def distance(self, other): ...
    def equals(self, other): ...
    def plot_interval(self, parameter: str = 't'): ...

class Ray(LinearEntity):
    def __new__(cls, p1, p2: Incomplete | None = None, **kwargs): ...
    def contains(self, other): ...
    def distance(self, other): ...
    def equals(self, other): ...
    def plot_interval(self, parameter: str = 't'): ...
    @property
    def source(self): ...

class Segment(LinearEntity):
    def __new__(cls, p1, p2, **kwargs): ...
    def contains(self, other): ...
    def equals(self, other): ...
    def distance(self, other): ...
    @property
    def length(self): ...
    @property
    def midpoint(self): ...
    def perpendicular_bisector(self, p: Incomplete | None = None): ...
    def plot_interval(self, parameter: str = 't'): ...

class LinearEntity2D(LinearEntity):
    @property
    def bounds(self): ...
    def perpendicular_line(self, p): ...
    @property
    def slope(self): ...

class Line2D(LinearEntity2D, Line):
    def __new__(cls, p1, pt: Incomplete | None = None, slope: Incomplete | None = None, **kwargs): ...
    @property
    def coefficients(self): ...
    def equation(self, x: str = 'x', y: str = 'y'): ...

class Ray2D(LinearEntity2D, Ray):
    def __new__(cls, p1, pt: Incomplete | None = None, angle: Incomplete | None = None, **kwargs): ...
    @property
    def xdirection(self): ...
    @property
    def ydirection(self): ...
    def closing_angle(r1, r2): ...

class Segment2D(LinearEntity2D, Segment):
    def __new__(cls, p1, p2, **kwargs): ...

class LinearEntity3D(LinearEntity):
    def __new__(cls, p1, p2, **kwargs): ...
    ambient_dimension: int
    @property
    def direction_ratio(self): ...
    @property
    def direction_cosine(self): ...

class Line3D(LinearEntity3D, Line):
    def __new__(cls, p1, pt: Incomplete | None = None, direction_ratio=(), **kwargs): ...
    def equation(self, x: str = 'x', y: str = 'y', z: str = 'z'): ...
    def distance(self, other): ...

class Ray3D(LinearEntity3D, Ray):
    def __new__(cls, p1, pt: Incomplete | None = None, direction_ratio=(), **kwargs): ...
    @property
    def xdirection(self): ...
    @property
    def ydirection(self): ...
    @property
    def zdirection(self): ...

class Segment3D(LinearEntity3D, Segment):
    def __new__(cls, p1, p2, **kwargs): ...
