from .ellipse import Circle as Circle
from .entity import GeometryEntity as GeometryEntity, GeometrySet as GeometrySet
from .exceptions import GeometryError as GeometryError
from .line import Line as Line, Ray as Ray, Segment as Segment
from .point import Point as Point
from _typeshed import Incomplete
from sympy.core import Expr as Expr, S as S, oo as oo, pi as pi, sympify as sympify
from sympy.core.evalf import N as N
from sympy.core.sorting import default_sort_key as default_sort_key, ordered as ordered
from sympy.core.symbol import Dummy as Dummy, Symbol as Symbol
from sympy.functions.elementary.complexes import sign as sign
from sympy.functions.elementary.piecewise import Piecewise as Piecewise
from sympy.functions.elementary.trigonometric import cos as cos, sin as sin, tan as tan
from sympy.logic import And as And
from sympy.matrices import Matrix as Matrix
from sympy.simplify.simplify import simplify as simplify
from sympy.solvers.solvers import solve as solve
from sympy.utilities.iterables import has_dups as has_dups, has_variety as has_variety, least_rotation as least_rotation, rotate_left as rotate_left, uniq as uniq
from sympy.utilities.misc import as_int as as_int, func_name as func_name

x: Incomplete
y: Incomplete
T: Incomplete

class Polygon(GeometrySet):
    def __new__(cls, *args, n: int = 0, **kwargs): ...
    @property
    def area(self): ...
    @property
    def angles(self): ...
    @property
    def ambient_dimension(self): ...
    @property
    def perimeter(self): ...
    @property
    def vertices(self): ...
    @property
    def centroid(self): ...
    def second_moment_of_area(self, point: Incomplete | None = None): ...
    def first_moment_of_area(self, point: Incomplete | None = None): ...
    def polar_second_moment_of_area(self): ...
    def section_modulus(self, point: Incomplete | None = None): ...
    @property
    def sides(self): ...
    @property
    def bounds(self): ...
    def is_convex(self): ...
    def encloses_point(self, p): ...
    def arbitrary_point(self, parameter: str = 't'): ...
    def parameter_value(self, other, t): ...
    def plot_interval(self, parameter: str = 't'): ...
    def intersection(self, o): ...
    def cut_section(self, line): ...
    def distance(self, o): ...
    def __contains__(self, o) -> bool: ...
    def bisectors(p, prec: Incomplete | None = None): ...

class RegularPolygon(Polygon):
    def __new__(self, c, r, n, rot: int = 0, **kwargs): ...
    @property
    def args(self): ...
    @property
    def area(self): ...
    @property
    def length(self): ...
    @property
    def center(self): ...
    centroid = center
    @property
    def circumcenter(self): ...
    @property
    def radius(self): ...
    @property
    def circumradius(self): ...
    @property
    def rotation(self): ...
    @property
    def apothem(self): ...
    @property
    def inradius(self): ...
    @property
    def interior_angle(self): ...
    @property
    def exterior_angle(self): ...
    @property
    def circumcircle(self): ...
    @property
    def incircle(self): ...
    @property
    def angles(self): ...
    def encloses_point(self, p): ...
    def spin(self, angle) -> None: ...
    def rotate(self, angle, pt: Incomplete | None = None): ...
    def scale(self, x: int = 1, y: int = 1, pt: Incomplete | None = None): ...
    def reflect(self, line): ...
    @property
    def vertices(self): ...
    def __eq__(self, o): ...
    def __hash__(self): ...

class Triangle(Polygon):
    def __new__(cls, *args, **kwargs): ...
    @property
    def vertices(self): ...
    def is_similar(t1, t2): ...
    def is_equilateral(self): ...
    def is_isosceles(self): ...
    def is_scalene(self): ...
    def is_right(self): ...
    @property
    def altitudes(self): ...
    @property
    def orthocenter(self): ...
    @property
    def circumcenter(self): ...
    @property
    def circumradius(self): ...
    @property
    def circumcircle(self): ...
    def bisectors(self): ...
    @property
    def incenter(self): ...
    @property
    def inradius(self): ...
    @property
    def incircle(self): ...
    @property
    def exradii(self): ...
    @property
    def excenters(self): ...
    @property
    def medians(self): ...
    @property
    def medial(self): ...
    @property
    def nine_point_circle(self): ...
    @property
    def eulerline(self): ...

def rad(d): ...
def deg(r): ...
