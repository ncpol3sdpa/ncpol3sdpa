from .entity import GeometryEntity as GeometryEntity, GeometrySet as GeometrySet
from .exceptions import GeometryError as GeometryError
from .line import Line as Line, Line2D as Line2D, LinearEntity3D as LinearEntity3D, Ray2D as Ray2D, Segment as Segment, Segment2D as Segment2D
from .point import Point as Point, Point2D as Point2D, Point3D as Point3D
from .polygon import Polygon as Polygon, Triangle as Triangle
from .util import find as find, idiff as idiff
from _typeshed import Incomplete
from sympy.core import S as S, pi as pi, sympify as sympify
from sympy.core.evalf import N as N
from sympy.core.expr import Expr as Expr
from sympy.core.logic import fuzzy_bool as fuzzy_bool
from sympy.core.numbers import Rational as Rational, oo as oo
from sympy.core.parameters import global_parameters as global_parameters
from sympy.core.relational import Eq as Eq
from sympy.core.sorting import ordered as ordered
from sympy.core.symbol import Dummy as Dummy, uniquely_named_symbol as uniquely_named_symbol
from sympy.functions.elementary.miscellaneous import Max as Max, sqrt as sqrt
from sympy.functions.elementary.trigonometric import cos as cos, sin as sin
from sympy.functions.special.elliptic_integrals import elliptic_e as elliptic_e
from sympy.polys import DomainError as DomainError, Poly as Poly, PolynomialError as PolynomialError
from sympy.simplify import simplify as simplify, trigsimp as trigsimp
from sympy.solvers import solve as solve
from sympy.solvers.solveset import linear_coeffs as linear_coeffs
from sympy.utilities.misc import filldedent as filldedent, func_name as func_name

x: Incomplete
y: Incomplete

class Ellipse(GeometrySet):
    def __contains__(self, o) -> bool: ...
    def __eq__(self, o): ...
    def __hash__(self): ...
    def __new__(cls, center: Incomplete | None = None, hradius: Incomplete | None = None, vradius: Incomplete | None = None, eccentricity: Incomplete | None = None, **kwargs): ...
    @property
    def ambient_dimension(self): ...
    @property
    def apoapsis(self): ...
    def arbitrary_point(self, parameter: str = 't'): ...
    @property
    def area(self): ...
    @property
    def bounds(self): ...
    @property
    def center(self): ...
    @property
    def circumference(self): ...
    @property
    def eccentricity(self): ...
    def encloses_point(self, p): ...
    def equation(self, x: str = 'x', y: str = 'y', _slope: Incomplete | None = None): ...
    def evolute(self, x: str = 'x', y: str = 'y'): ...
    @property
    def foci(self): ...
    @property
    def focus_distance(self): ...
    @property
    def hradius(self): ...
    def intersection(self, o): ...
    def is_tangent(self, o): ...
    @property
    def major(self): ...
    @property
    def minor(self): ...
    def normal_lines(self, p, prec: Incomplete | None = None): ...
    @property
    def periapsis(self): ...
    @property
    def semilatus_rectum(self): ...
    def auxiliary_circle(self): ...
    def director_circle(self): ...
    def plot_interval(self, parameter: str = 't'): ...
    def random_point(self, seed: Incomplete | None = None): ...
    def reflect(self, line): ...
    def rotate(self, angle: int = 0, pt: Incomplete | None = None): ...
    def scale(self, x: int = 1, y: int = 1, pt: Incomplete | None = None): ...
    def tangent_lines(self, p): ...
    @property
    def vradius(self): ...
    def second_moment_of_area(self, point: Incomplete | None = None): ...
    def polar_second_moment_of_area(self): ...
    def section_modulus(self, point: Incomplete | None = None): ...

class Circle(Ellipse):
    def __new__(cls, *args, **kwargs): ...
    @property
    def circumference(self): ...
    def equation(self, x: str = 'x', y: str = 'y'): ...
    def intersection(self, o): ...
    @property
    def radius(self): ...
    def reflect(self, line): ...
    def scale(self, x: int = 1, y: int = 1, pt: Incomplete | None = None): ...
    @property
    def vradius(self): ...
