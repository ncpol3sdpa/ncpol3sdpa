from _typeshed import Incomplete
from collections.abc import Generator

class PartComponent:
    c: int
    u: int
    v: int
    def __init__(self) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

def multiset_partitions_taocp(multiplicities) -> Generator[Incomplete]: ...
def factoring_visitor(state, primes): ...
def list_visitor(state, components): ...

class MultisetPartitionTraverser:
    debug: bool
    k1: int
    k2: int
    p1: int
    pstack: Incomplete
    f: Incomplete
    lpart: int
    discarded: int
    dp_stack: Incomplete
    dp_map: Incomplete
    def __init__(self) -> None: ...
    def db_trace(self, msg) -> None: ...
    def decrement_part(self, part): ...
    def decrement_part_small(self, part, ub): ...
    def decrement_part_large(self, part, amt, lb): ...
    def decrement_part_range(self, part, lb, ub): ...
    def spread_part_multiplicity(self): ...
    def top_part(self): ...
    def enum_all(self, multiplicities) -> Generator[Incomplete]: ...
    def enum_small(self, multiplicities, ub) -> Generator[Incomplete]: ...
    def enum_large(self, multiplicities, lb) -> Generator[Incomplete]: ...
    def enum_range(self, multiplicities, lb, ub) -> Generator[Incomplete]: ...
    pcount: int
    def count_partitions_slow(self, multiplicities): ...
    def count_partitions(self, multiplicities): ...

def part_key(part): ...
