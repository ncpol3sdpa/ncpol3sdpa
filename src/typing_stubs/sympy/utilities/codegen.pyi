from _typeshed import Incomplete

__all__ = ['Routine', 'DataType', 'default_datatypes', 'get_default_datatype', 'Argument', 'InputArgument', 'OutputArgument', 'Result', 'CodeGen', 'CCodeGen', 'FCodeGen', 'JuliaCodeGen', 'OctaveCodeGen', 'RustCodeGen', 'codegen', 'make_routine']

class Routine:
    name: Incomplete
    arguments: Incomplete
    results: Incomplete
    local_vars: Incomplete
    global_vars: Incomplete
    def __init__(self, name, arguments, results, local_vars, global_vars) -> None: ...
    @property
    def variables(self): ...
    @property
    def result_variables(self): ...

class DataType:
    cname: Incomplete
    fname: Incomplete
    pyname: Incomplete
    jlname: Incomplete
    octname: Incomplete
    rsname: Incomplete
    def __init__(self, cname, fname, pyname, jlname, octname, rsname) -> None: ...

default_datatypes: Incomplete

def get_default_datatype(expr, complex_allowed: Incomplete | None = None): ...

class Variable:
    dimensions: Incomplete
    precision: Incomplete
    def __init__(self, name, datatype: Incomplete | None = None, dimensions: Incomplete | None = None, precision: Incomplete | None = None) -> None: ...
    @property
    def name(self): ...
    def get_datatype(self, language): ...

class Argument(Variable): ...
class InputArgument(Argument): ...

class ResultBase:
    expr: Incomplete
    result_var: Incomplete
    def __init__(self, expr, result_var) -> None: ...

class OutputArgument(Argument, ResultBase):
    def __init__(self, name, result_var, expr, datatype: Incomplete | None = None, dimensions: Incomplete | None = None, precision: Incomplete | None = None) -> None: ...

class InOutArgument(Argument, ResultBase):
    def __init__(self, name, result_var, expr, datatype: Incomplete | None = None, dimensions: Incomplete | None = None, precision: Incomplete | None = None) -> None: ...

class Result(Variable, ResultBase):
    def __init__(self, expr, name: Incomplete | None = None, result_var: Incomplete | None = None, datatype: Incomplete | None = None, dimensions: Incomplete | None = None, precision: Incomplete | None = None) -> None: ...

class CodeGen:
    printer: Incomplete
    project: Incomplete
    cse: Incomplete
    def __init__(self, project: str = 'project', cse: bool = False) -> None: ...
    def routine(self, name, expr, argument_sequence: Incomplete | None = None, global_vars: Incomplete | None = None): ...
    def write(self, routines, prefix, to_files: bool = False, header: bool = True, empty: bool = True): ...
    def dump_code(self, routines, f, prefix, header: bool = True, empty: bool = True) -> None: ...

class CodeGenError(Exception): ...

class CodeGenArgumentListError(Exception):
    @property
    def missing_args(self): ...

class CCodeGen(CodeGen):
    code_extension: str
    interface_extension: str
    standard: str
    printer: Incomplete
    preprocessor_statements: Incomplete
    def __init__(self, project: str = 'project', printer: Incomplete | None = None, preprocessor_statements: Incomplete | None = None, cse: bool = False) -> None: ...
    def get_prototype(self, routine): ...
    def dump_c(self, routines, f, prefix, header: bool = True, empty: bool = True) -> None: ...
    def dump_h(self, routines, f, prefix, header: bool = True, empty: bool = True) -> None: ...
    dump_fns: Incomplete

class C89CodeGen(CCodeGen):
    standard: str

class C99CodeGen(CCodeGen):
    standard: str

class FCodeGen(CodeGen):
    code_extension: str
    interface_extension: str
    printer: Incomplete
    def __init__(self, project: str = 'project', printer: Incomplete | None = None) -> None: ...
    def get_interface(self, routine): ...
    def dump_f95(self, routines, f, prefix, header: bool = True, empty: bool = True) -> None: ...
    def dump_h(self, routines, f, prefix, header: bool = True, empty: bool = True) -> None: ...
    dump_fns: Incomplete

class JuliaCodeGen(CodeGen):
    code_extension: str
    printer: Incomplete
    def __init__(self, project: str = 'project', printer: Incomplete | None = None) -> None: ...
    def routine(self, name, expr, argument_sequence, global_vars): ...
    def dump_jl(self, routines, f, prefix, header: bool = True, empty: bool = True) -> None: ...
    dump_fns: Incomplete

class OctaveCodeGen(CodeGen):
    code_extension: str
    printer: Incomplete
    def __init__(self, project: str = 'project', printer: Incomplete | None = None) -> None: ...
    def routine(self, name, expr, argument_sequence, global_vars): ...
    def dump_m(self, routines, f, prefix, header: bool = True, empty: bool = True, inline: bool = True) -> None: ...
    dump_fns: Incomplete

class RustCodeGen(CodeGen):
    code_extension: str
    printer: Incomplete
    def __init__(self, project: str = 'project', printer: Incomplete | None = None) -> None: ...
    def routine(self, name, expr, argument_sequence, global_vars): ...
    def get_prototype(self, routine): ...
    def dump_rs(self, routines, f, prefix, header: bool = True, empty: bool = True) -> None: ...
    dump_fns: Incomplete

def codegen(name_expr, language: Incomplete | None = None, prefix: Incomplete | None = None, project: str = 'project', to_files: bool = False, header: bool = True, empty: bool = True, argument_sequence: Incomplete | None = None, global_vars: Incomplete | None = None, standard: Incomplete | None = None, code_gen: Incomplete | None = None, printer: Incomplete | None = None): ...
def make_routine(name, expr, argument_sequence: Incomplete | None = None, global_vars: Incomplete | None = None, language: str = 'F95'): ...
