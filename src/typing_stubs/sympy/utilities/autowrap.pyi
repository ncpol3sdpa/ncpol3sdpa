from _typeshed import Incomplete
from sympy.core.cache import cacheit as cacheit
from sympy.core.function import Lambda as Lambda
from sympy.core.relational import Eq as Eq
from sympy.core.symbol import Dummy as Dummy, Symbol as Symbol
from sympy.tensor.indexed import Idx as Idx, IndexedBase as IndexedBase
from sympy.utilities.codegen import C99CodeGen as C99CodeGen, CodeGenArgumentListError as CodeGenArgumentListError, InOutArgument as InOutArgument, InputArgument as InputArgument, OutputArgument as OutputArgument, Result as Result, ResultBase as ResultBase, get_code_generator as get_code_generator, make_routine as make_routine
from sympy.utilities.decorator import doctest_depends_on as doctest_depends_on
from sympy.utilities.iterables import iterable as iterable
from sympy.utilities.lambdify import implemented_function as implemented_function

class CodeWrapError(Exception): ...

class CodeWrapper:
    @property
    def filename(self): ...
    @property
    def module_name(self): ...
    generator: Incomplete
    filepath: Incomplete
    flags: Incomplete
    quiet: Incomplete
    def __init__(self, generator, filepath: Incomplete | None = None, flags=[], verbose: bool = False) -> None: ...
    @property
    def include_header(self): ...
    @property
    def include_empty(self): ...
    def wrap_code(self, routine, helpers: Incomplete | None = None): ...

class DummyWrapper(CodeWrapper):
    template: str

class CythonCodeWrapper(CodeWrapper):
    setup_template: str
    pyx_imports: str
    pyx_header: str
    pyx_func: str
    std_compile_flag: str
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def command(self): ...
    def dump_pyx(self, routines, f, prefix) -> None: ...

class F2PyCodeWrapper(CodeWrapper):
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def command(self): ...

def autowrap(expr, language: Incomplete | None = None, backend: str = 'f2py', tempdir: Incomplete | None = None, args: Incomplete | None = None, flags: Incomplete | None = None, verbose: bool = False, helpers: Incomplete | None = None, code_gen: Incomplete | None = None, **kwargs): ...
def binary_function(symfunc, expr, **kwargs): ...

class UfuncifyCodeWrapper(CodeWrapper):
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def command(self): ...
    def wrap_code(self, routines, helpers: Incomplete | None = None): ...
    def dump_setup(self, f) -> None: ...
    def dump_c(self, routines, f, prefix, funcname: Incomplete | None = None) -> None: ...

def ufuncify(args, expr, language: Incomplete | None = None, backend: str = 'numpy', tempdir: Incomplete | None = None, flags: Incomplete | None = None, verbose: bool = False, helpers: Incomplete | None = None, **kwargs): ...
