from sympy.core import Basic as Basic, Dict as Dict, S as S, Symbol as Symbol, Tuple as Tuple, sympify as sympify
from sympy.core.symbol import Str as Str
from sympy.sets import EmptySet as EmptySet, FiniteSet as FiniteSet, Set as Set
from sympy.utilities.iterables import iterable as iterable

class Class(Set):
    is_proper: bool

class Object(Symbol): ...

class Morphism(Basic):
    def __new__(cls, domain, codomain) -> None: ...
    @property
    def domain(self): ...
    @property
    def codomain(self): ...
    def compose(self, other): ...
    def __mul__(self, other): ...

class IdentityMorphism(Morphism):
    def __new__(cls, domain): ...
    @property
    def codomain(self): ...

class NamedMorphism(Morphism):
    def __new__(cls, domain, codomain, name): ...
    @property
    def name(self): ...

class CompositeMorphism(Morphism):
    def __new__(cls, *components): ...
    @property
    def components(self): ...
    @property
    def domain(self): ...
    @property
    def codomain(self): ...
    def flatten(self, new_name): ...

class Category(Basic):
    def __new__(cls, name, objects=..., commutative_diagrams=...): ...
    @property
    def name(self): ...
    @property
    def objects(self): ...
    @property
    def commutative_diagrams(self): ...
    def hom(self, A, B) -> None: ...
    def all_morphisms(self) -> None: ...

class Diagram(Basic):
    def __new__(cls, *args): ...
    @property
    def premises(self): ...
    @property
    def conclusions(self): ...
    @property
    def objects(self): ...
    def hom(self, A, B): ...
    def is_subdiagram(self, diagram): ...
    def subdiagram_from_objects(self, objects): ...
