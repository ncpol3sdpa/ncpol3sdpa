from sympy.assumptions import AppliedPredicate, Predicate

__all__ = ['BinaryRelation', 'AppliedBinaryRelation']

class BinaryRelation(Predicate):
    is_reflexive: bool | None
    is_symmetric: bool | None
    def __call__(self, *args): ...
    @property
    def reversed(self): ...
    @property
    def negated(self) -> None: ...
    def eval(self, args, assumptions: bool = True): ...

class AppliedBinaryRelation(AppliedPredicate):
    @property
    def lhs(self): ...
    @property
    def rhs(self): ...
    @property
    def reversed(self): ...
    @property
    def reversedsign(self): ...
    @property
    def negated(self): ...
    def __bool__(self) -> bool: ...
