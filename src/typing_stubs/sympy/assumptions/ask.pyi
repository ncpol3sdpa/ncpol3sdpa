from _typeshed import Incomplete
from sympy.assumptions.ask_generated import get_all_known_facts as get_all_known_facts, get_known_facts_dict as get_known_facts_dict
from sympy.assumptions.assume import AppliedPredicate as AppliedPredicate, Predicate as Predicate, global_assumptions as global_assumptions
from sympy.assumptions.cnf import CNF as CNF, EncodedCNF as EncodedCNF, Literal as Literal
from sympy.core import sympify as sympify
from sympy.core.kind import BooleanKind as BooleanKind
from sympy.core.relational import Eq as Eq, Ge as Ge, Gt as Gt, Le as Le, Lt as Lt, Ne as Ne
from sympy.logic.inference import satisfiable as satisfiable
from sympy.utilities.decorator import memoize_property as memoize_property
from sympy.utilities.exceptions import SymPyDeprecationWarning as SymPyDeprecationWarning, ignore_warnings as ignore_warnings, sympy_deprecation_warning as sympy_deprecation_warning

class AssumptionKeys:
    def hermitian(self): ...
    def antihermitian(self): ...
    def real(self): ...
    def extended_real(self): ...
    def imaginary(self): ...
    def complex(self): ...
    def algebraic(self): ...
    def transcendental(self): ...
    def integer(self): ...
    def noninteger(self): ...
    def rational(self): ...
    def irrational(self): ...
    def finite(self): ...
    def infinite(self): ...
    def positive_infinite(self): ...
    def negative_infinite(self): ...
    def positive(self): ...
    def negative(self): ...
    def zero(self): ...
    def extended_positive(self): ...
    def extended_negative(self): ...
    def nonzero(self): ...
    def nonpositive(self): ...
    def nonnegative(self): ...
    def extended_nonzero(self): ...
    def extended_nonpositive(self): ...
    def extended_nonnegative(self): ...
    def even(self): ...
    def odd(self): ...
    def prime(self): ...
    def composite(self): ...
    def commutative(self): ...
    def is_true(self): ...
    def symmetric(self): ...
    def invertible(self): ...
    def orthogonal(self): ...
    def unitary(self): ...
    def positive_definite(self): ...
    def upper_triangular(self): ...
    def lower_triangular(self): ...
    def diagonal(self): ...
    def fullrank(self): ...
    def square(self): ...
    def integer_elements(self): ...
    def real_elements(self): ...
    def complex_elements(self): ...
    def singular(self): ...
    def normal(self): ...
    def triangular(self): ...
    def unit_triangular(self): ...
    def eq(self): ...
    def ne(self): ...
    def gt(self): ...
    def ge(self): ...
    def lt(self): ...
    def le(self): ...

Q: Incomplete

def ask(proposition, assumptions: bool = True, context=...): ...
def register_handler(key, handler) -> None: ...
def remove_handler(key, handler) -> None: ...
