from _typeshed import Incomplete
from sympy.assumptions.ask import Q as Q
from sympy.core import Add as Add, Mul as Mul, Number as Number, NumberSymbol as NumberSymbol, Pow as Pow, Symbol as Symbol
from sympy.core.numbers import ImaginaryUnit as ImaginaryUnit
from sympy.functions.elementary.complexes import Abs as Abs
from sympy.logic.boolalg import And as And, Equivalent as Equivalent, Implies as Implies, Or as Or
from sympy.matrices.expressions import MatMul as MatMul

def allargs(symbol, fact, expr): ...
def anyarg(symbol, fact, expr): ...
def exactlyonearg(symbol, fact, expr): ...

class ClassFactRegistry:
    singlefacts: Incomplete
    multifacts: Incomplete
    def __init__(self) -> None: ...
    def register(self, cls): ...
    def multiregister(self, *classes): ...
    def __getitem__(self, key): ...
    def __call__(self, expr): ...

class_fact_registry: Incomplete
x: Incomplete

def _(expr): ...
