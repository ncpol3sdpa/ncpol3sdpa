from _typeshed import Incomplete
from sympy.core import Expr as Expr, S as S, Tuple as Tuple, sympify as sympify
from sympy.core.assumptions import StdFactKB as StdFactKB
from sympy.core.logic import fuzzy_bool as fuzzy_bool, fuzzy_not as fuzzy_not
from sympy.core.numbers import Number as Number
from sympy.core.symbol import Symbol as Symbol
from sympy.functions.special.tensor_functions import KroneckerDelta as KroneckerDelta
from sympy.multipledispatch import dispatch as dispatch
from sympy.utilities.iterables import NotIterable as NotIterable, is_sequence as is_sequence
from sympy.utilities.misc import filldedent as filldedent

class IndexException(Exception): ...

class Indexed(Expr):
    is_Indexed: bool
    is_symbol: bool
    is_Atom: bool
    def __new__(cls, base, *args, **kw_args): ...
    @property
    def name(self): ...
    @property
    def assumptions0(self): ...
    @property
    def base(self): ...
    @property
    def indices(self): ...
    @property
    def rank(self): ...
    @property
    def shape(self): ...
    @property
    def ranges(self): ...
    @property
    def free_symbols(self): ...
    @property
    def expr_free_symbols(self): ...

class IndexedBase(Expr, NotIterable):
    is_symbol: bool
    is_Atom: bool
    def __new__(cls, label, shape: Incomplete | None = None, *, offset=..., strides: Incomplete | None = None, **kw_args): ...
    @property
    def name(self): ...
    @property
    def assumptions0(self): ...
    def __getitem__(self, indices, **kw_args): ...
    @property
    def shape(self): ...
    @property
    def strides(self): ...
    @property
    def offset(self): ...
    @property
    def label(self): ...

class Idx(Expr):
    is_integer: bool
    is_finite: bool
    is_real: bool
    is_symbol: bool
    is_Atom: bool
    def __new__(cls, label, range: Incomplete | None = None, **kw_args): ...
    @property
    def label(self): ...
    @property
    def lower(self): ...
    @property
    def upper(self): ...
    @property
    def name(self): ...
    @property
    def free_symbols(self): ...
