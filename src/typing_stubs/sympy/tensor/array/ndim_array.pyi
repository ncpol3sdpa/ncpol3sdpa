from _typeshed import Incomplete
from sympy.core.basic import Basic as Basic
from sympy.core.containers import Dict as Dict, Tuple as Tuple
from sympy.core.expr import Expr as Expr
from sympy.core.kind import Kind as Kind, NumberKind as NumberKind, UndefinedKind as UndefinedKind
from sympy.core.numbers import Integer as Integer
from sympy.core.singleton import S as S
from sympy.core.sympify import sympify as sympify
from sympy.external.gmpy import SYMPY_INTS as SYMPY_INTS
from sympy.printing.defaults import Printable as Printable

class ArrayKind(Kind):
    def __new__(cls, element_kind=...): ...

class NDimArray(Printable):
    is_scalar: bool
    def __new__(cls, iterable, shape: Incomplete | None = None, **kwargs): ...
    def __getitem__(self, index) -> None: ...
    def __len__(self) -> int: ...
    @property
    def shape(self): ...
    def rank(self): ...
    def diff(self, *args, **kwargs): ...
    def applyfunc(self, f): ...
    def tolist(self): ...
    def __add__(self, other): ...
    def __sub__(self, other): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...
    def __truediv__(self, other): ...
    def __rtruediv__(self, other) -> None: ...
    def __neg__(self): ...
    def __iter__(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def transpose(self): ...
    def conjugate(self): ...
    def adjoint(self): ...

class ImmutableNDimArray(NDimArray, Basic):
    def __hash__(self): ...
    def as_immutable(self): ...
    def as_mutable(self) -> None: ...
