from _typeshed import Incomplete
from sympy.core.basic import Basic as Basic
from sympy.core.containers import Tuple as Tuple
from sympy.core.singleton import S as S
from sympy.tensor.array.mutable_ndim_array import MutableNDimArray as MutableNDimArray
from sympy.tensor.array.ndim_array import ArrayKind as ArrayKind, ImmutableNDimArray as ImmutableNDimArray, NDimArray as NDimArray
from sympy.utilities.iterables import flatten as flatten

class DenseNDimArray(NDimArray):
    def __new__(self, *args, **kwargs): ...
    @property
    def kind(self) -> ArrayKind: ...
    def __getitem__(self, index): ...
    @classmethod
    def zeros(cls, *shape): ...
    def tomatrix(self): ...
    def reshape(self, *newshape): ...

class ImmutableDenseNDimArray(DenseNDimArray, ImmutableNDimArray):
    def __new__(cls, iterable, shape: Incomplete | None = None, **kwargs): ...
    def __setitem__(self, index, value) -> None: ...
    def as_mutable(self): ...

class MutableDenseNDimArray(DenseNDimArray, MutableNDimArray):
    def __new__(cls, iterable: Incomplete | None = None, shape: Incomplete | None = None, **kwargs): ...
    def __setitem__(self, index, value) -> None: ...
    def as_immutable(self): ...
    @property
    def free_symbols(self): ...
