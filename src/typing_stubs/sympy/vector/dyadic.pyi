from _typeshed import Incomplete
from sympy.core import Pow as Pow, S as S
from sympy.core.expr import AtomicExpr as AtomicExpr
from sympy.vector.basisdependent import BasisDependent as BasisDependent, BasisDependentAdd as BasisDependentAdd, BasisDependentMul as BasisDependentMul, BasisDependentZero as BasisDependentZero

class Dyadic(BasisDependent):
    zero: DyadicZero
    @property
    def components(self): ...
    def dot(self, other): ...
    def __and__(self, other): ...
    def cross(self, other): ...
    def __xor__(self, other): ...
    def to_matrix(self, system, second_system: Incomplete | None = None): ...

class BaseDyadic(Dyadic, AtomicExpr):
    def __new__(cls, vector1, vector2): ...

class DyadicMul(BasisDependentMul, Dyadic):
    def __new__(cls, *args, **options): ...
    @property
    def base_dyadic(self): ...
    @property
    def measure_number(self): ...

class DyadicAdd(BasisDependentAdd, Dyadic):
    def __new__(cls, *args, **options): ...

class DyadicZero(BasisDependentZero, Dyadic):
    def __new__(cls): ...
