from sympy.core.basic import Basic as Basic
from sympy.core.cache import cacheit as cacheit
from sympy.core.symbol import Str as Str
from sympy.core.sympify import sympify as sympify
from sympy.functions.elementary.trigonometric import cos as cos, sin as sin
from sympy.matrices.dense import eye as eye, rot_axis1 as rot_axis1, rot_axis2 as rot_axis2, rot_axis3 as rot_axis3

class Orienter(Basic):
    def rotation_matrix(self): ...

class AxisOrienter(Orienter):
    def __new__(cls, angle, axis): ...
    def __init__(self, angle, axis) -> None: ...
    def rotation_matrix(self, system): ...
    @property
    def angle(self): ...
    @property
    def axis(self): ...

class ThreeAngleOrienter(Orienter):
    def __new__(cls, angle1, angle2, angle3, rot_order): ...
    @property
    def angle1(self): ...
    @property
    def angle2(self): ...
    @property
    def angle3(self): ...
    @property
    def rot_order(self): ...

class BodyOrienter(ThreeAngleOrienter):
    def __new__(cls, angle1, angle2, angle3, rot_order): ...
    def __init__(self, angle1, angle2, angle3, rot_order) -> None: ...

class SpaceOrienter(ThreeAngleOrienter):
    def __new__(cls, angle1, angle2, angle3, rot_order): ...
    def __init__(self, angle1, angle2, angle3, rot_order) -> None: ...

class QuaternionOrienter(Orienter):
    def __new__(cls, q0, q1, q2, q3): ...
    def __init__(self, angle1, angle2, angle3, rot_order) -> None: ...
    @property
    def q0(self): ...
    @property
    def q1(self): ...
    @property
    def q2(self): ...
    @property
    def q3(self): ...
