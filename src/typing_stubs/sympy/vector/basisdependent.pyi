from _typeshed import Incomplete
from sympy.core import Add as Add, Mul as Mul, S as S
from sympy.core.assumptions import StdFactKB as StdFactKB
from sympy.core.decorators import call_highest_priority as call_highest_priority
from sympy.core.expr import Expr as Expr
from sympy.integrals.integrals import Integral as Integral
from sympy.vector.vector import BaseVector as BaseVector

class BasisDependent(Expr):
    zero: BasisDependentZero
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __sub__(self, other): ...
    def __rsub__(self, other): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...
    def __neg__(self): ...
    def __truediv__(self, other): ...
    def __rtruediv__(self, other): ...
    def evalf(self, n: int = 15, subs: Incomplete | None = None, maxn: int = 100, chop: bool = False, strict: bool = False, quad: Incomplete | None = None, verbose: bool = False): ...
    n = evalf
    def simplify(self, **kwargs): ...
    def trigsimp(self, **opts): ...
    def as_numer_denom(self): ...
    def factor(self, *args, **kwargs): ...
    def as_coeff_Mul(self, rational: bool = False): ...
    def as_coeff_add(self, *deps): ...
    def diff(self, *args, **kwargs): ...
    def doit(self, **hints): ...

class BasisDependentAdd(BasisDependent, Add):
    def __new__(cls, *args, **options): ...

class BasisDependentMul(BasisDependent, Mul):
    def __new__(cls, *args, **options): ...

class BasisDependentZero(BasisDependent):
    components: dict['BaseVector', Expr]
    def __new__(cls): ...
    def __hash__(self): ...
    def __eq__(self, other): ...
    __req__ = __eq__
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __sub__(self, other): ...
    def __rsub__(self, other): ...
    def __neg__(self): ...
    def normalize(self): ...
