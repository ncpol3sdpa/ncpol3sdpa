from _typeshed import Incomplete
from sympy.core.add import Add as Add
from sympy.core.assumptions import StdFactKB as StdFactKB
from sympy.core.expr import AtomicExpr as AtomicExpr, Expr as Expr
from sympy.core.power import Pow as Pow
from sympy.core.singleton import S as S
from sympy.core.sorting import default_sort_key as default_sort_key
from sympy.core.sympify import sympify as sympify
from sympy.functions.elementary.miscellaneous import sqrt as sqrt
from sympy.vector.basisdependent import BasisDependent as BasisDependent, BasisDependentAdd as BasisDependentAdd, BasisDependentMul as BasisDependentMul, BasisDependentZero as BasisDependentZero
from sympy.vector.coordsysrect import CoordSys3D as CoordSys3D
from sympy.vector.dyadic import BaseDyadic as BaseDyadic, Dyadic as Dyadic, DyadicAdd as DyadicAdd

class Vector(BasisDependent):
    is_scalar: bool
    is_Vector: bool
    zero: VectorZero
    @property
    def components(self): ...
    def magnitude(self): ...
    def normalize(self): ...
    def dot(self, other): ...
    def __and__(self, other): ...
    def cross(self, other): ...
    def __xor__(self, other): ...
    def outer(self, other): ...
    def projection(self, other, scalar: bool = False): ...
    def __or__(self, other): ...
    def to_matrix(self, system): ...
    def separate(self): ...

class BaseVector(Vector, AtomicExpr):
    def __new__(cls, index, system, pretty_str: Incomplete | None = None, latex_str: Incomplete | None = None): ...
    @property
    def system(self): ...
    @property
    def free_symbols(self): ...

class VectorAdd(BasisDependentAdd, Vector):
    def __new__(cls, *args, **options): ...

class VectorMul(BasisDependentMul, Vector):
    def __new__(cls, *args, **options): ...
    @property
    def base_vector(self): ...
    @property
    def measure_number(self): ...

class VectorZero(BasisDependentZero, Vector):
    def __new__(cls): ...

class Cross(Vector):
    def __new__(cls, expr1, expr2): ...
    def doit(self, **hints): ...

class Dot(Expr):
    def __new__(cls, expr1, expr2): ...
    def doit(self, **hints): ...

def cross(vect1, vect2): ...
def dot(vect1, vect2): ...
