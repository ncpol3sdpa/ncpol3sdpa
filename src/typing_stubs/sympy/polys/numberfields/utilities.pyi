from _typeshed import Incomplete
from collections.abc import Generator

__all__ = ['extract_fundamental_discriminant', 'AlgIntPowers', 'coeff_search', 'isolate']

def extract_fundamental_discriminant(a): ...

class AlgIntPowers:
    T: Incomplete
    modulus: Incomplete
    n: Incomplete
    powers_n_and_up: Incomplete
    max_so_far: Incomplete
    def __init__(self, T, modulus: Incomplete | None = None) -> None: ...
    def red(self, exp): ...
    def __rmod__(self, other): ...
    def compute_up_through(self, e) -> None: ...
    def get(self, e): ...
    def __getitem__(self, item): ...

def coeff_search(m, R) -> Generator[Incomplete]: ...
def isolate(alg, eps: Incomplete | None = None, fast: bool = False): ...
