from _typeshed import Incomplete
from sympy.polys.polyutils import IntegerPowerable

__all__ = ['prime_valuation', 'prime_decomp']

class PrimeIdeal(IntegerPowerable):
    ZK: Incomplete
    p: Incomplete
    alpha: Incomplete
    f: Incomplete
    e: Incomplete
    def __init__(self, ZK, p, alpha, f, e: Incomplete | None = None) -> None: ...
    @property
    def is_inert(self): ...
    def repr(self, field_gen: Incomplete | None = None, just_gens: bool = False): ...
    def as_submodule(self): ...
    def __eq__(self, other): ...
    def __add__(self, other): ...
    __radd__ = __add__
    def __mul__(self, other): ...
    __rmul__ = __mul__
    def test_factor(self): ...
    def valuation(self, I): ...
    def reduce_element(self, elt): ...
    def reduce_ANP(self, a): ...
    def reduce_alg_num(self, a): ...

def prime_valuation(I, P): ...
def prime_decomp(p, T: Incomplete | None = None, ZK: Incomplete | None = None, dK: Incomplete | None = None, radical: Incomplete | None = None): ...
