from _typeshed import Incomplete
from sympy.core.sympify import CantSympify
from sympy.polys.compatibility import IPolys
from sympy.polys.domains.domainelement import DomainElement
from sympy.printing.defaults import DefaultPrinting

__all__ = ['ring', 'xring', 'vring', 'sring']

def ring(symbols, domain, order=...): ...
def xring(symbols, domain, order=...): ...
def vring(symbols, domain, order=...): ...
def sring(exprs, *symbols, **options): ...

class PolyRing(DefaultPrinting, IPolys):
    def __new__(cls, symbols, domain, order=...): ...
    def __getnewargs__(self): ...
    def __hash__(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def clone(self, symbols: Incomplete | None = None, domain: Incomplete | None = None, order: Incomplete | None = None): ...
    def monomial_basis(self, i): ...
    @property
    def zero(self): ...
    @property
    def one(self): ...
    def domain_new(self, element, orig_domain: Incomplete | None = None): ...
    def ground_new(self, coeff): ...
    def term_new(self, monom, coeff): ...
    def ring_new(self, element): ...
    __call__ = ring_new
    def from_dict(self, element, orig_domain: Incomplete | None = None): ...
    def from_terms(self, element, orig_domain: Incomplete | None = None): ...
    def from_list(self, element): ...
    def from_expr(self, expr): ...
    def index(self, gen): ...
    def drop(self, *gens): ...
    def __getitem__(self, key): ...
    def to_ground(self): ...
    def to_domain(self): ...
    def to_field(self): ...
    @property
    def is_univariate(self): ...
    @property
    def is_multivariate(self): ...
    def add(self, *objs): ...
    def mul(self, *objs): ...
    def drop_to_ground(self, *gens): ...
    def compose(self, other): ...
    def add_gens(self, symbols): ...
    def symmetric_poly(self, n): ...

class PolyElement(DomainElement, DefaultPrinting, CantSympify, dict):
    def new(self, init): ...
    def parent(self): ...
    def __getnewargs__(self): ...
    def __hash__(self): ...
    def copy(self): ...
    def set_ring(self, new_ring): ...
    def as_expr(self, *symbols): ...
    def as_expr_dict(self): ...
    def clear_denoms(self): ...
    def strip_zero(self) -> None: ...
    def __eq__(p1, p2): ...
    def __ne__(p1, p2): ...
    def almosteq(p1, p2, tolerance: Incomplete | None = None): ...
    def sort_key(self): ...
    def __lt__(p1, p2): ...
    def __le__(p1, p2): ...
    def __gt__(p1, p2): ...
    def __ge__(p1, p2): ...
    def drop(self, gen): ...
    def drop_to_ground(self, gen): ...
    def to_dense(self): ...
    def to_dict(self): ...
    def str(self, printer, precedence, exp_pattern, mul_symbol): ...
    @property
    def is_generator(self): ...
    @property
    def is_ground(self): ...
    @property
    def is_monomial(self): ...
    @property
    def is_term(self): ...
    @property
    def is_negative(self): ...
    @property
    def is_positive(self): ...
    @property
    def is_nonnegative(self): ...
    @property
    def is_nonpositive(self): ...
    @property
    def is_zero(f): ...
    @property
    def is_one(f): ...
    @property
    def is_monic(f): ...
    @property
    def is_primitive(f): ...
    @property
    def is_linear(f): ...
    @property
    def is_quadratic(f): ...
    @property
    def is_squarefree(f): ...
    @property
    def is_irreducible(f): ...
    @property
    def is_cyclotomic(f): ...
    def __neg__(self): ...
    def __pos__(self): ...
    def __add__(p1, p2): ...
    def __radd__(p1, n): ...
    def __sub__(p1, p2): ...
    def __rsub__(p1, n): ...
    def __mul__(p1, p2): ...
    def __rmul__(p1, p2): ...
    def __pow__(self, n): ...
    def square(self): ...
    def __divmod__(p1, p2): ...
    def __rdivmod__(p1, p2): ...
    def __mod__(p1, p2): ...
    def __rmod__(p1, p2): ...
    def __truediv__(p1, p2): ...
    def __rtruediv__(p1, p2): ...
    __floordiv__ = __truediv__
    __rfloordiv__ = __rtruediv__
    def div(self, fv): ...
    def rem(self, G): ...
    def quo(f, G): ...
    def exquo(f, G): ...
    def degree(f, x: Incomplete | None = None): ...
    def degrees(f): ...
    def tail_degree(f, x: Incomplete | None = None): ...
    def tail_degrees(f): ...
    def leading_expv(self): ...
    def coeff(self, element): ...
    def const(self): ...
    @property
    def LC(self): ...
    @property
    def LM(self): ...
    def leading_monom(self): ...
    @property
    def LT(self): ...
    def leading_term(self): ...
    def coeffs(self, order: Incomplete | None = None): ...
    def monoms(self, order: Incomplete | None = None): ...
    def terms(self, order: Incomplete | None = None): ...
    def itercoeffs(self): ...
    def itermonoms(self): ...
    def iterterms(self): ...
    def listcoeffs(self): ...
    def listmonoms(self): ...
    def listterms(self): ...
    def imul_num(p, c): ...
    def content(f): ...
    def primitive(f): ...
    def monic(f): ...
    def mul_ground(f, x): ...
    def mul_monom(f, monom): ...
    def mul_term(f, term): ...
    def quo_ground(f, x): ...
    def quo_term(f, term): ...
    def trunc_ground(f, p): ...
    rem_ground = trunc_ground
    def extract_ground(self, g): ...
    def max_norm(f): ...
    def l1_norm(f): ...
    def deflate(f, *G): ...
    def inflate(f, J): ...
    def lcm(self, g): ...
    def gcd(f, g): ...
    def cofactors(f, g): ...
    def cancel(self, g): ...
    def canonical_unit(f): ...
    def diff(f, x): ...
    def __call__(f, *values): ...
    def evaluate(self, x, a: Incomplete | None = None): ...
    def subs(self, x, a: Incomplete | None = None): ...
    def symmetrize(self): ...
    def compose(f, x, a: Incomplete | None = None): ...
    def coeff_wrt(self, x, deg): ...
    def prem(self, g, x: Incomplete | None = None): ...
    def pdiv(self, g, x: Incomplete | None = None): ...
    def pquo(self, g, x: Incomplete | None = None): ...
    def pexquo(self, g, x: Incomplete | None = None): ...
    def subresultants(self, g, x: Incomplete | None = None): ...
    def half_gcdex(f, g): ...
    def gcdex(f, g): ...
    def resultant(f, g): ...
    def discriminant(f): ...
    def decompose(f): ...
    def shift(f, a): ...
    def shift_list(f, a): ...
    def sturm(f): ...
    def gff_list(f): ...
    def norm(f): ...
    def sqf_norm(f): ...
    def sqf_part(f): ...
    def sqf_list(f, all: bool = False): ...
    def factor_list(f): ...
