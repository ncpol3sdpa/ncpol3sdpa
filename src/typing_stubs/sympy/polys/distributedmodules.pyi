from _typeshed import Incomplete
from sympy.core.singleton import S as S
from sympy.core.sympify import sympify as sympify
from sympy.polys.monomials import monomial_deg as monomial_deg, monomial_div as monomial_div, monomial_lcm as monomial_lcm, monomial_mul as monomial_mul
from sympy.polys.polytools import Poly as Poly
from sympy.polys.polyutils import parallel_dict_from_expr as parallel_dict_from_expr

def sdm_monomial_mul(M, X): ...
def sdm_monomial_deg(M): ...
def sdm_monomial_lcm(A, B): ...
def sdm_monomial_divides(A, B): ...
def sdm_LC(f, K): ...
def sdm_to_dict(f): ...
def sdm_from_dict(d, O): ...
def sdm_sort(f, O): ...
def sdm_strip(f): ...
def sdm_add(f, g, O, K): ...
def sdm_LM(f): ...
def sdm_LT(f): ...
def sdm_mul_term(f, term, O, K): ...
def sdm_zero(): ...
def sdm_deg(f): ...
def sdm_from_vector(vec, O, K, **opts): ...
def sdm_to_vector(f, gens, K, n: Incomplete | None = None): ...
def sdm_spoly(f, g, O, K, phantom: Incomplete | None = None): ...
def sdm_ecart(f): ...
def sdm_nf_mora(f, G, O, K, phantom: Incomplete | None = None): ...
def sdm_nf_buchberger(f, G, O, K, phantom: Incomplete | None = None): ...
def sdm_nf_buchberger_reduced(f, G, O, K): ...
def sdm_groebner(G, NF, O, K, extended: bool = False): ...
