from sympy.polys.densearith import dmp_add as dmp_add, dmp_div as dmp_div, dmp_max_norm as dmp_max_norm, dmp_mul as dmp_mul, dmp_mul_ground as dmp_mul_ground, dmp_mul_term as dmp_mul_term, dmp_neg as dmp_neg, dmp_pow as dmp_pow, dmp_prem as dmp_prem, dmp_quo as dmp_quo, dmp_quo_ground as dmp_quo_ground, dmp_sub as dmp_sub, dup_div as dup_div, dup_max_norm as dup_max_norm, dup_mul as dup_mul, dup_mul_ground as dup_mul_ground, dup_neg as dup_neg, dup_prem as dup_prem, dup_quo as dup_quo, dup_quo_ground as dup_quo_ground, dup_rem as dup_rem, dup_sub_mul as dup_sub_mul
from sympy.polys.densebasic import dmp_LC as dmp_LC, dmp_apply_pairs as dmp_apply_pairs, dmp_convert as dmp_convert, dmp_degree as dmp_degree, dmp_degree_in as dmp_degree_in, dmp_ground as dmp_ground, dmp_ground_LC as dmp_ground_LC, dmp_inflate as dmp_inflate, dmp_multi_deflate as dmp_multi_deflate, dmp_one as dmp_one, dmp_one_p as dmp_one_p, dmp_raise as dmp_raise, dmp_zero as dmp_zero, dmp_zero_p as dmp_zero_p, dmp_zeros as dmp_zeros, dup_LC as dup_LC, dup_convert as dup_convert, dup_degree as dup_degree, dup_strip as dup_strip
from sympy.polys.densetools import dmp_clear_denoms as dmp_clear_denoms, dmp_diff as dmp_diff, dmp_eval as dmp_eval, dmp_eval_in as dmp_eval_in, dmp_ground_extract as dmp_ground_extract, dmp_ground_monic as dmp_ground_monic, dmp_ground_primitive as dmp_ground_primitive, dmp_ground_trunc as dmp_ground_trunc, dup_clear_denoms as dup_clear_denoms, dup_diff as dup_diff, dup_eval as dup_eval, dup_extract as dup_extract, dup_monic as dup_monic, dup_primitive as dup_primitive, dup_trunc as dup_trunc
from sympy.polys.galoistools import gf_crt as gf_crt, gf_int as gf_int
from sympy.polys.polyconfig import query as query
from sympy.polys.polyerrors import DomainError as DomainError, HeuristicGCDFailed as HeuristicGCDFailed, HomomorphismFailed as HomomorphismFailed, MultivariatePolynomialError as MultivariatePolynomialError, NotInvertible as NotInvertible

def dup_half_gcdex(f, g, K): ...
def dmp_half_gcdex(f, g, u, K): ...
def dup_gcdex(f, g, K): ...
def dmp_gcdex(f, g, u, K): ...
def dup_invert(f, g, K): ...
def dmp_invert(f, g, u, K): ...
def dup_euclidean_prs(f, g, K): ...
def dmp_euclidean_prs(f, g, u, K): ...
def dup_primitive_prs(f, g, K): ...
def dmp_primitive_prs(f, g, u, K): ...
def dup_inner_subresultants(f, g, K): ...
def dup_subresultants(f, g, K): ...
def dup_prs_resultant(f, g, K): ...
def dup_resultant(f, g, K, includePRS: bool = False): ...
def dmp_inner_subresultants(f, g, u, K): ...
def dmp_subresultants(f, g, u, K): ...
def dmp_prs_resultant(f, g, u, K): ...
def dmp_zz_modular_resultant(f, g, p, u, K): ...
def dmp_zz_collins_resultant(f, g, u, K): ...
def dmp_qq_collins_resultant(f, g, u, K0): ...
def dmp_resultant(f, g, u, K, includePRS: bool = False): ...
def dup_discriminant(f, K): ...
def dmp_discriminant(f, u, K): ...
def dup_rr_prs_gcd(f, g, K): ...
def dup_ff_prs_gcd(f, g, K): ...
def dmp_rr_prs_gcd(f, g, u, K): ...
def dmp_ff_prs_gcd(f, g, u, K): ...

HEU_GCD_MAX: int

def dup_zz_heu_gcd(f, g, K): ...
def dmp_zz_heu_gcd(f, g, u, K): ...
def dup_qq_heu_gcd(f, g, K0): ...
def dmp_qq_heu_gcd(f, g, u, K0): ...
def dup_inner_gcd(f, g, K): ...
def dmp_inner_gcd(f, g, u, K): ...
def dup_gcd(f, g, K): ...
def dmp_gcd(f, g, u, K): ...
def dup_rr_lcm(f, g, K): ...
def dup_ff_lcm(f, g, K): ...
def dup_lcm(f, g, K): ...
def dmp_rr_lcm(f, g, u, K): ...
def dmp_ff_lcm(f, g, u, K): ...
def dmp_lcm(f, g, u, K): ...
def dmp_content(f, u, K): ...
def dmp_primitive(f, u, K): ...
def dup_cancel(f, g, K, include: bool = True): ...
def dmp_cancel(f, g, u, K, include: bool = True): ...
