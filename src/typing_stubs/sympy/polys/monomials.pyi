from _typeshed import Incomplete
from collections.abc import Generator
from sympy.polys.polyutils import PicklableWithSlots

__all__ = ['itermonomials', 'Monomial']

def itermonomials(variables, max_degrees, min_degrees: Incomplete | None = None) -> Generator[Incomplete, Incomplete]: ...

class MonomialOps:
    ngens: Incomplete
    def __init__(self, ngens) -> None: ...
    def mul(self): ...
    def pow(self): ...
    def mulpow(self): ...
    def ldiv(self): ...
    def div(self): ...
    def lcm(self): ...
    def gcd(self): ...

class Monomial(PicklableWithSlots):
    exponents: Incomplete
    gens: Incomplete
    def __init__(self, monom, gens: Incomplete | None = None) -> None: ...
    def rebuild(self, exponents, gens: Incomplete | None = None): ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __getitem__(self, item): ...
    def __hash__(self): ...
    def as_expr(self, *gens): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __mul__(self, other): ...
    def __truediv__(self, other): ...
    __floordiv__ = __truediv__
    def __pow__(self, other): ...
    def gcd(self, other): ...
    def lcm(self, other): ...
