from sympy.concrete.summations import summation as summation
from sympy.core.function import expand as expand
from sympy.core.numbers import nan as nan
from sympy.core.singleton import S as S
from sympy.functions.elementary.complexes import Abs as Abs, sign as sign
from sympy.functions.elementary.integers import floor as floor
from sympy.matrices.dense import Matrix as Matrix, eye as eye, zeros as zeros
from sympy.polys.domains import QQ as QQ
from sympy.polys.polyerrors import PolynomialError as PolynomialError
from sympy.polys.polytools import LC as LC, Poly as Poly, degree as degree, pquo as pquo, prem as prem, quo as quo, rem as rem
from sympy.simplify.simplify import simplify as simplify

def sylvester(f, g, x, method: int = 1): ...
def process_matrix_output(poly_seq, x): ...
def subresultants_sylv(f, g, x): ...
def modified_subresultants_sylv(f, g, x): ...
def res(f, g, x): ...
def res_q(f, g, x): ...
def res_z(f, g, x): ...
def sign_seq(poly_seq, x): ...
def bezout(p, q, x, method: str = 'bz'): ...
def backward_eye(n): ...
def subresultants_bezout(p, q, x): ...
def modified_subresultants_bezout(p, q, x): ...
def sturm_pg(p, q, x, method: int = 0): ...
def sturm_q(p, q, x): ...
def sturm_amv(p, q, x, method: int = 0): ...
def euclid_pg(p, q, x): ...
def euclid_q(p, q, x): ...
def euclid_amv(f, g, x): ...
def modified_subresultants_pg(p, q, x): ...
def subresultants_pg(p, q, x): ...
def subresultants_amv_q(p, q, x): ...
def compute_sign(base, expo): ...
def rem_z(p, q, x): ...
def quo_z(p, q, x): ...
def subresultants_amv(f, g, x): ...
def modified_subresultants_amv(p, q, x): ...
def correct_sign(deg_f, deg_g, s1, rdel, cdel): ...
def subresultants_rem(p, q, x): ...
def pivot(M, i, j): ...
def rotate_r(L, k): ...
def rotate_l(L, k): ...
def row2poly(row, deg, x): ...
def create_ma(deg_f, deg_g, row1, row2, col_num): ...
def find_degree(M, deg_f): ...
def final_touches(s2, r, deg_g): ...
def subresultants_vv(p, q, x, method: int = 0): ...
def subresultants_vv_2(p, q, x): ...
