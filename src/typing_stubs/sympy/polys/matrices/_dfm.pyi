from _typeshed import Incomplete
from collections.abc import Generator

__all__ = ['DFM']

class DFM:
    fmt: str
    is_DFM: bool
    is_DDM: bool
    def __new__(cls, rowslist, shape, domain): ...
    def __eq__(self, other): ...
    @classmethod
    def from_list(cls, rowslist, shape, domain): ...
    def to_list(self): ...
    def copy(self): ...
    def to_ddm(self): ...
    def to_sdm(self): ...
    def to_dfm(self): ...
    def to_dfm_or_ddm(self): ...
    @classmethod
    def from_ddm(cls, ddm): ...
    @classmethod
    def from_list_flat(cls, elements, shape, domain): ...
    def to_list_flat(self): ...
    def to_flat_nz(self): ...
    @classmethod
    def from_flat_nz(cls, elements, data, domain): ...
    def to_dod(self): ...
    @classmethod
    def from_dod(cls, dod, shape, domain): ...
    def to_dok(self): ...
    @classmethod
    def from_dok(cls, dok, shape, domain): ...
    def iter_values(self) -> Generator[Incomplete]: ...
    def iter_items(self) -> Generator[Incomplete]: ...
    def convert_to(self, domain): ...
    def getitem(self, i, j): ...
    def setitem(self, i, j, value) -> None: ...
    def extract(self, rowslist, colslist): ...
    def extract_slice(self, rowslice, colslice): ...
    def neg(self): ...
    def add(self, other): ...
    def sub(self, other): ...
    def mul(self, other): ...
    def rmul(self, other): ...
    def mul_elementwise(self, other): ...
    def matmul(self, other): ...
    def __neg__(self): ...
    @classmethod
    def zeros(cls, shape, domain): ...
    @classmethod
    def ones(cls, shape, domain): ...
    @classmethod
    def eye(cls, n, domain): ...
    @classmethod
    def diag(cls, elements, domain): ...
    def applyfunc(self, func, domain): ...
    def transpose(self): ...
    def hstack(self, *others): ...
    def vstack(self, *others): ...
    def diagonal(self): ...
    def is_upper(self): ...
    def is_lower(self): ...
    def is_diagonal(self): ...
    def is_zero_matrix(self): ...
    def nnz(self): ...
    def scc(self): ...
    def det(self): ...
    def charpoly(self): ...
    def inv(self): ...
    def lu(self): ...
    def lu_solve(self, rhs): ...
    def nullspace(self): ...
    def nullspace_from_rref(self, pivots: Incomplete | None = None): ...
    def particular(self): ...
    def lll(self, delta: float = 0.75): ...
    def lll_transform(self, delta: float = 0.75): ...
