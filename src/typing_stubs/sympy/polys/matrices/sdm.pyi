from .ddm import DDM as DDM
from .exceptions import DMBadInputError as DMBadInputError, DMDomainError as DMDomainError, DMShapeError as DMShapeError
from _typeshed import Incomplete
from collections.abc import Generator
from sympy.external.gmpy import GROUND_TYPES as GROUND_TYPES
from sympy.polys.domains import QQ as QQ
from sympy.utilities.decorator import doctest_depends_on as doctest_depends_on

__doctest_skip__: Incomplete

class SDM(dict):
    fmt: str
    is_DFM: bool
    is_DDM: bool
    shape: Incomplete
    domain: Incomplete
    def __init__(self, elemsdict, shape, domain) -> None: ...
    def getitem(self, i, j): ...
    def setitem(self, i, j, value) -> None: ...
    def extract_slice(self, slice1, slice2): ...
    def extract(self, rows, cols): ...
    @classmethod
    def new(cls, sdm, shape, domain): ...
    def copy(A): ...
    @classmethod
    def from_list(cls, ddm, shape, domain): ...
    @classmethod
    def from_ddm(cls, ddm): ...
    def to_list(M): ...
    def to_list_flat(M): ...
    @classmethod
    def from_list_flat(cls, elements, shape, domain): ...
    def to_flat_nz(M): ...
    @classmethod
    def from_flat_nz(cls, elements, data, domain): ...
    def to_dod(M): ...
    @classmethod
    def from_dod(cls, dod, shape, domain): ...
    def to_dok(M): ...
    @classmethod
    def from_dok(cls, dok, shape, domain): ...
    def iter_values(M) -> Generator[Incomplete, Incomplete]: ...
    def iter_items(M) -> Generator[Incomplete]: ...
    def to_ddm(M): ...
    def to_sdm(M): ...
    def to_dfm(M): ...
    def to_dfm_or_ddm(M): ...
    @classmethod
    def zeros(cls, shape, domain): ...
    @classmethod
    def ones(cls, shape, domain): ...
    @classmethod
    def eye(cls, shape, domain): ...
    @classmethod
    def diag(cls, diagonal, domain, shape: Incomplete | None = None): ...
    def transpose(M): ...
    def __add__(A, B): ...
    def __sub__(A, B): ...
    def __neg__(A): ...
    def __mul__(A, B): ...
    def __rmul__(a, b): ...
    def matmul(A, B): ...
    def mul(A, b): ...
    def rmul(A, b): ...
    def mul_elementwise(A, B): ...
    def add(A, B): ...
    def sub(A, B): ...
    def neg(A): ...
    def convert_to(A, K): ...
    def nnz(A): ...
    def scc(A): ...
    def rref(A): ...
    def rref_den(A): ...
    def inv(A): ...
    def det(A): ...
    def lu(A): ...
    def lu_solve(A, b): ...
    def nullspace(A): ...
    def nullspace_from_rref(A, pivots: Incomplete | None = None): ...
    def particular(A): ...
    def hstack(A, *B): ...
    def vstack(A, *B): ...
    def applyfunc(self, func, domain): ...
    def charpoly(A): ...
    def is_zero_matrix(self): ...
    def is_upper(self): ...
    def is_lower(self): ...
    def is_diagonal(self): ...
    def diagonal(self): ...
    def lll(A, delta=...): ...
    def lll_transform(A, delta=...): ...

def binop_dict(A, B, fab, fa, fb): ...
def unop_dict(A, f): ...
def sdm_transpose(M): ...
def sdm_dotvec(A, B, K): ...
def sdm_matvecmul(A, B, K): ...
def sdm_matmul(A, B, K, m, o): ...
def sdm_matmul_exraw(A, B, K, m, o): ...
def sdm_irref(A): ...
def sdm_rref_den(A, K): ...
def sdm_nullspace_from_rref(A, one, ncols, pivots, nonzero_cols): ...
def sdm_particular_from_rref(A, ncols, pivots): ...
def sdm_berk(M, n, K): ...
