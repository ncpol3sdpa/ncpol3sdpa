from .dense import ddm_berk as ddm_berk, ddm_iadd as ddm_iadd, ddm_idet as ddm_idet, ddm_iinv as ddm_iinv, ddm_ilu_solve as ddm_ilu_solve, ddm_ilu_split as ddm_ilu_split, ddm_imatmul as ddm_imatmul, ddm_imul as ddm_imul, ddm_ineg as ddm_ineg, ddm_irmul as ddm_irmul, ddm_irref as ddm_irref, ddm_irref_den as ddm_irref_den, ddm_isub as ddm_isub, ddm_transpose as ddm_transpose
from .dfm import DFM as DFM
from .exceptions import DMBadInputError as DMBadInputError, DMDomainError as DMDomainError, DMNonSquareMatrixError as DMNonSquareMatrixError, DMShapeError as DMShapeError
from .lll import ddm_lll as ddm_lll, ddm_lll_transform as ddm_lll_transform
from .sdm import SDM as SDM
from _typeshed import Incomplete
from collections.abc import Generator
from sympy.external.gmpy import GROUND_TYPES as GROUND_TYPES
from sympy.polys.domains import QQ as QQ
from sympy.utilities.decorator import doctest_depends_on as doctest_depends_on

__doctest_skip__: Incomplete

class DDM(list):
    fmt: str
    is_DFM: bool
    is_DDM: bool
    shape: Incomplete
    rows: Incomplete
    cols: Incomplete
    domain: Incomplete
    def __init__(self, rowslist, shape, domain) -> None: ...
    def getitem(self, i, j): ...
    def setitem(self, i, j, value) -> None: ...
    def extract_slice(self, slice1, slice2): ...
    def extract(self, rows, cols): ...
    @classmethod
    def from_list(cls, rowslist, shape, domain): ...
    @classmethod
    def from_ddm(cls, other): ...
    def to_list(self): ...
    def to_list_flat(self): ...
    @classmethod
    def from_list_flat(cls, flat, shape, domain): ...
    def flatiter(self): ...
    def flat(self): ...
    def to_flat_nz(self): ...
    @classmethod
    def from_flat_nz(cls, elements, data, domain): ...
    def to_dod(self): ...
    @classmethod
    def from_dod(cls, dod, shape, domain): ...
    def to_dok(self): ...
    @classmethod
    def from_dok(cls, dok, shape, domain): ...
    def iter_values(self) -> Generator[Incomplete, Incomplete]: ...
    def iter_items(self) -> Generator[Incomplete]: ...
    def to_ddm(self): ...
    def to_sdm(self): ...
    def to_dfm(self): ...
    def to_dfm_or_ddm(self): ...
    def convert_to(self, K): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    @classmethod
    def zeros(cls, shape, domain): ...
    @classmethod
    def ones(cls, shape, domain): ...
    @classmethod
    def eye(cls, size, domain): ...
    def copy(self): ...
    def transpose(self): ...
    def __add__(a, b): ...
    def __sub__(a, b): ...
    def __neg__(a): ...
    def __mul__(a, b): ...
    def __rmul__(a, b): ...
    def __matmul__(a, b): ...
    def add(a, b): ...
    def sub(a, b): ...
    def neg(a): ...
    def mul(a, b): ...
    def rmul(a, b): ...
    def matmul(a, b): ...
    def mul_elementwise(a, b): ...
    def hstack(A, *B): ...
    def vstack(A, *B): ...
    def applyfunc(self, func, domain): ...
    def nnz(a): ...
    def scc(a): ...
    @classmethod
    def diag(cls, values, domain): ...
    def rref(a): ...
    def rref_den(a): ...
    def nullspace(a): ...
    def nullspace_from_rref(a, pivots: Incomplete | None = None): ...
    def particular(a): ...
    def det(a): ...
    def inv(a): ...
    def lu(a): ...
    def lu_solve(a, b): ...
    def charpoly(a): ...
    def is_zero_matrix(self): ...
    def is_upper(self): ...
    def is_lower(self): ...
    def is_diagonal(self): ...
    def diagonal(self): ...
    def lll(A, delta=...): ...
    def lll_transform(A, delta=...): ...
