from sympy.core import Expr as Expr, Function as Function, PoleError as PoleError
from sympy.core.intfunc import igcd as igcd
from sympy.core.numbers import Rational as Rational
from sympy.functions import atan as atan, atanh as atanh, ceiling as ceiling, cos as cos, exp as exp, log as log, sin as sin, tan as tan, tanh as tanh
from sympy.polys.domains import EX as EX, QQ as QQ
from sympy.polys.monomials import monomial_div as monomial_div, monomial_ldiv as monomial_ldiv, monomial_min as monomial_min, monomial_mul as monomial_mul
from sympy.polys.polyerrors import DomainError as DomainError
from sympy.polys.rings import PolyElement as PolyElement, ring as ring, sring as sring
from sympy.utilities.misc import as_int as as_int

def rs_trunc(p1, x, prec): ...
def rs_is_puiseux(p, x): ...
def rs_puiseux(f, p, x, prec): ...
def rs_puiseux2(f, p, q, x, prec): ...
def rs_mul(p1, p2, x, prec): ...
def rs_square(p1, x, prec): ...
def rs_pow(p1, n, x, prec): ...
def rs_subs(p, rules, x, prec): ...
def rs_series_inversion(p, x, prec): ...
def rs_series_reversion(p, x, n, y): ...
def rs_series_from_list(p, c, x, prec, concur: int = 1): ...
def rs_diff(p, x): ...
def rs_integrate(p, x): ...
def rs_fun(p, f, *args): ...
def mul_xin(p, i, n): ...
def pow_xin(p, i, n): ...
def rs_nth_root(p, n, x, prec): ...
def rs_log(p, x, prec): ...
def rs_LambertW(p, x, prec): ...
def rs_exp(p, x, prec): ...
def rs_atan(p, x, prec): ...
def rs_asin(p, x, prec): ...
def rs_tan(p, x, prec): ...
def rs_cot(p, x, prec): ...
def rs_sin(p, x, prec): ...
def rs_cos(p, x, prec): ...
def rs_cos_sin(p, x, prec): ...
def rs_atanh(p, x, prec): ...
def rs_sinh(p, x, prec): ...
def rs_cosh(p, x, prec): ...
def rs_tanh(p, x, prec): ...
def rs_newton(p, x, prec): ...
def rs_hadamard_exp(p1, inverse: bool = False): ...
def rs_compose_add(p1, p2): ...
def rs_min_pow(expr, series_rs, a): ...
def rs_series(expr, a, prec): ...
