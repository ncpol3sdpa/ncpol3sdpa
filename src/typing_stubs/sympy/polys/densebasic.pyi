from _typeshed import Incomplete
from sympy.core import igcd as igcd
from sympy.polys.monomials import monomial_div as monomial_div, monomial_min as monomial_min
from sympy.polys.orderings import monomial_key as monomial_key

ninf: Incomplete

def poly_LC(f, K): ...
def poly_TC(f, K): ...
dup_LC = poly_LC
dmp_LC = poly_LC
dup_TC = poly_TC
dmp_TC = poly_TC

def dmp_ground_LC(f, u, K): ...
def dmp_ground_TC(f, u, K): ...
def dmp_true_LT(f, u, K): ...
def dup_degree(f): ...
def dmp_degree(f, u): ...
def dmp_degree_in(f, j, u): ...
def dmp_degree_list(f, u): ...
def dup_strip(f): ...
def dmp_strip(f, u): ...
def dmp_validate(f, K: Incomplete | None = None): ...
def dup_reverse(f): ...
def dup_copy(f): ...
def dmp_copy(f, u): ...
def dup_to_tuple(f): ...
def dmp_to_tuple(f, u): ...
def dup_normal(f, K): ...
def dmp_normal(f, u, K): ...
def dup_convert(f, K0, K1): ...
def dmp_convert(f, u, K0, K1): ...
def dup_from_sympy(f, K): ...
def dmp_from_sympy(f, u, K): ...
def dup_nth(f, n, K): ...
def dmp_nth(f, n, u, K): ...
def dmp_ground_nth(f, N, u, K): ...
def dmp_zero_p(f, u): ...
def dmp_zero(u): ...
def dmp_one_p(f, u, K): ...
def dmp_one(u, K): ...
def dmp_ground_p(f, c, u): ...
def dmp_ground(c, u): ...
def dmp_zeros(n, u, K): ...
def dmp_grounds(c, n, u): ...
def dmp_negative_p(f, u, K): ...
def dmp_positive_p(f, u, K): ...
def dup_from_dict(f, K): ...
def dup_from_raw_dict(f, K): ...
def dmp_from_dict(f, u, K): ...
def dup_to_dict(f, K: Incomplete | None = None, zero: bool = False): ...
def dup_to_raw_dict(f, K: Incomplete | None = None, zero: bool = False): ...
def dmp_to_dict(f, u, K: Incomplete | None = None, zero: bool = False): ...
def dmp_swap(f, i, j, u, K): ...
def dmp_permute(f, P, u, K): ...
def dmp_nest(f, l, K): ...
def dmp_raise(f, l, u, K): ...
def dup_deflate(f, K): ...
def dmp_deflate(f, u, K): ...
def dup_multi_deflate(polys, K): ...
def dmp_multi_deflate(polys, u, K): ...
def dup_inflate(f, m, K): ...
def dmp_inflate(f, M, u, K): ...
def dmp_exclude(f, u, K): ...
def dmp_include(f, J, u, K): ...
def dmp_inject(f, u, K, front: bool = False): ...
def dmp_eject(f, u, K, front: bool = False): ...
def dup_terms_gcd(f, K): ...
def dmp_terms_gcd(f, u, K): ...
def dmp_list_terms(f, u, K, order: Incomplete | None = None): ...
def dup_apply_pairs(f, g, h, args, K): ...
def dmp_apply_pairs(f, g, h, args, u, K): ...
def dup_slice(f, m, n, K): ...
def dmp_slice(f, m, n, u, K): ...
def dmp_slice_in(f, m, n, j, u, K): ...
def dup_random(n, a, b, K): ...
