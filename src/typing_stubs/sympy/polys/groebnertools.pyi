from _typeshed import Incomplete
from sympy.core.symbol import Dummy as Dummy
from sympy.polys.monomials import monomial_divides as monomial_divides, monomial_lcm as monomial_lcm, monomial_mul as monomial_mul, term_div as term_div
from sympy.polys.orderings import lex as lex
from sympy.polys.polyconfig import query as query
from sympy.polys.polyerrors import DomainError as DomainError

def groebner(seq, ring, method: Incomplete | None = None): ...
def spoly(p1, p2, ring): ...
def Sign(f): ...
def Polyn(f): ...
def Num(f): ...
def sig(monomial, index): ...
def lbp(signature, polynomial, number): ...
def sig_cmp(u, v, order): ...
def sig_key(s, order): ...
def sig_mult(s, m): ...
def lbp_sub(f, g): ...
def lbp_mul_term(f, cx): ...
def lbp_cmp(f, g): ...
def lbp_key(f): ...
def critical_pair(f, g, ring): ...
def cp_cmp(c, d): ...
def cp_key(c, ring): ...
def s_poly(cp): ...
def is_rewritable_or_comparable(sign, num, B): ...
def f5_reduce(f, B): ...
def red_groebner(G, ring): ...
def is_groebner(G, ring): ...
def is_minimal(G, ring): ...
def is_reduced(G, ring): ...
def groebner_lcm(f, g): ...
def groebner_gcd(f, g): ...
