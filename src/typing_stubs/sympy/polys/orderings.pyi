from _typeshed import Incomplete

__all__ = ['lex', 'grlex', 'grevlex', 'ilex', 'igrlex', 'igrevlex']

class MonomialOrder:
    alias: str | None
    is_global: bool | None
    is_default: bool
    def __call__(self, monomial) -> None: ...
    def __eq__(self, other): ...
    def __hash__(self): ...
    def __ne__(self, other): ...

class LexOrder(MonomialOrder):
    alias: str
    is_global: bool
    is_default: bool
    def __call__(self, monomial): ...

class GradedLexOrder(MonomialOrder):
    alias: str
    is_global: bool
    def __call__(self, monomial): ...

class ReversedGradedLexOrder(MonomialOrder):
    alias: str
    is_global: bool
    def __call__(self, monomial): ...

class ProductOrder(MonomialOrder):
    args: Incomplete
    def __init__(self, *args) -> None: ...
    def __call__(self, monomial): ...
    def __eq__(self, other): ...
    def __hash__(self): ...
    @property
    def is_global(self): ...

class InverseOrder(MonomialOrder):
    O: Incomplete
    def __init__(self, O) -> None: ...
    def __call__(self, monomial): ...
    @property
    def is_global(self): ...
    def __eq__(self, other): ...
    def __hash__(self): ...

lex: Incomplete
grlex: Incomplete
grevlex: Incomplete
ilex: Incomplete
igrlex: Incomplete
igrevlex: Incomplete

class _ItemGetter:
    seq: Incomplete
    def __init__(self, seq) -> None: ...
    def __call__(self, m): ...
    def __eq__(self, other): ...
