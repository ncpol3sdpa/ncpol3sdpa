from _typeshed import Incomplete

__all__ = ['IPolys']

class IPolys:
    symbols: Incomplete
    ngens: Incomplete
    domain: Incomplete
    order: Incomplete
    gens: Incomplete
    def drop(self, gen) -> None: ...
    def clone(self, symbols: Incomplete | None = None, domain: Incomplete | None = None, order: Incomplete | None = None) -> None: ...
    def to_ground(self) -> None: ...
    def ground_new(self, element) -> None: ...
    def domain_new(self, element) -> None: ...
    def from_dict(self, d) -> None: ...
    def wrap(self, element): ...
    def to_dense(self, element): ...
    def from_dense(self, element): ...
    def dup_add_term(self, f, c, i): ...
    def dmp_add_term(self, f, c, i): ...
    def dup_sub_term(self, f, c, i): ...
    def dmp_sub_term(self, f, c, i): ...
    def dup_mul_term(self, f, c, i): ...
    def dmp_mul_term(self, f, c, i): ...
    def dup_add_ground(self, f, c): ...
    def dmp_add_ground(self, f, c): ...
    def dup_sub_ground(self, f, c): ...
    def dmp_sub_ground(self, f, c): ...
    def dup_mul_ground(self, f, c): ...
    def dmp_mul_ground(self, f, c): ...
    def dup_quo_ground(self, f, c): ...
    def dmp_quo_ground(self, f, c): ...
    def dup_exquo_ground(self, f, c): ...
    def dmp_exquo_ground(self, f, c): ...
    def dup_lshift(self, f, n): ...
    def dup_rshift(self, f, n): ...
    def dup_abs(self, f): ...
    def dmp_abs(self, f): ...
    def dup_neg(self, f): ...
    def dmp_neg(self, f): ...
    def dup_add(self, f, g): ...
    def dmp_add(self, f, g): ...
    def dup_sub(self, f, g): ...
    def dmp_sub(self, f, g): ...
    def dup_add_mul(self, f, g, h): ...
    def dmp_add_mul(self, f, g, h): ...
    def dup_sub_mul(self, f, g, h): ...
    def dmp_sub_mul(self, f, g, h): ...
    def dup_mul(self, f, g): ...
    def dmp_mul(self, f, g): ...
    def dup_sqr(self, f): ...
    def dmp_sqr(self, f): ...
    def dup_pow(self, f, n): ...
    def dmp_pow(self, f, n): ...
    def dup_pdiv(self, f, g): ...
    def dup_prem(self, f, g): ...
    def dup_pquo(self, f, g): ...
    def dup_pexquo(self, f, g): ...
    def dmp_pdiv(self, f, g): ...
    def dmp_prem(self, f, g): ...
    def dmp_pquo(self, f, g): ...
    def dmp_pexquo(self, f, g): ...
    def dup_rr_div(self, f, g): ...
    def dmp_rr_div(self, f, g): ...
    def dup_ff_div(self, f, g): ...
    def dmp_ff_div(self, f, g): ...
    def dup_div(self, f, g): ...
    def dup_rem(self, f, g): ...
    def dup_quo(self, f, g): ...
    def dup_exquo(self, f, g): ...
    def dmp_div(self, f, g): ...
    def dmp_rem(self, f, g): ...
    def dmp_quo(self, f, g): ...
    def dmp_exquo(self, f, g): ...
    def dup_max_norm(self, f): ...
    def dmp_max_norm(self, f): ...
    def dup_l1_norm(self, f): ...
    def dmp_l1_norm(self, f): ...
    def dup_l2_norm_squared(self, f): ...
    def dmp_l2_norm_squared(self, f): ...
    def dup_expand(self, polys): ...
    def dmp_expand(self, polys): ...
    def dup_LC(self, f): ...
    def dmp_LC(self, f): ...
    def dup_TC(self, f): ...
    def dmp_TC(self, f): ...
    def dmp_ground_LC(self, f): ...
    def dmp_ground_TC(self, f): ...
    def dup_degree(self, f): ...
    def dmp_degree(self, f): ...
    def dmp_degree_in(self, f, j): ...
    def dup_integrate(self, f, m): ...
    def dmp_integrate(self, f, m): ...
    def dup_diff(self, f, m): ...
    def dmp_diff(self, f, m): ...
    def dmp_diff_in(self, f, m, j): ...
    def dmp_integrate_in(self, f, m, j): ...
    def dup_eval(self, f, a): ...
    def dmp_eval(self, f, a): ...
    def dmp_eval_in(self, f, a, j): ...
    def dmp_diff_eval_in(self, f, m, a, j): ...
    def dmp_eval_tail(self, f, A): ...
    def dup_trunc(self, f, p): ...
    def dmp_trunc(self, f, g): ...
    def dmp_ground_trunc(self, f, p): ...
    def dup_monic(self, f): ...
    def dmp_ground_monic(self, f): ...
    def dup_extract(self, f, g): ...
    def dmp_ground_extract(self, f, g): ...
    def dup_real_imag(self, f): ...
    def dup_mirror(self, f): ...
    def dup_scale(self, f, a): ...
    def dup_shift(self, f, a): ...
    def dmp_shift(self, f, a): ...
    def dup_transform(self, f, p, q): ...
    def dup_compose(self, f, g): ...
    def dmp_compose(self, f, g): ...
    def dup_decompose(self, f): ...
    def dmp_lift(self, f): ...
    def dup_sign_variations(self, f): ...
    def dup_clear_denoms(self, f, convert: bool = False): ...
    def dmp_clear_denoms(self, f, convert: bool = False): ...
    def dup_revert(self, f, n): ...
    def dup_half_gcdex(self, f, g): ...
    def dmp_half_gcdex(self, f, g): ...
    def dup_gcdex(self, f, g): ...
    def dmp_gcdex(self, f, g): ...
    def dup_invert(self, f, g): ...
    def dmp_invert(self, f, g): ...
    def dup_euclidean_prs(self, f, g): ...
    def dmp_euclidean_prs(self, f, g): ...
    def dup_primitive_prs(self, f, g): ...
    def dmp_primitive_prs(self, f, g): ...
    def dup_inner_subresultants(self, f, g): ...
    def dmp_inner_subresultants(self, f, g): ...
    def dup_subresultants(self, f, g): ...
    def dmp_subresultants(self, f, g): ...
    def dup_prs_resultant(self, f, g): ...
    def dmp_prs_resultant(self, f, g): ...
    def dmp_zz_modular_resultant(self, f, g, p): ...
    def dmp_zz_collins_resultant(self, f, g): ...
    def dmp_qq_collins_resultant(self, f, g): ...
    def dup_resultant(self, f, g): ...
    def dmp_resultant(self, f, g): ...
    def dup_discriminant(self, f): ...
    def dmp_discriminant(self, f): ...
    def dup_rr_prs_gcd(self, f, g): ...
    def dup_ff_prs_gcd(self, f, g): ...
    def dmp_rr_prs_gcd(self, f, g): ...
    def dmp_ff_prs_gcd(self, f, g): ...
    def dup_zz_heu_gcd(self, f, g): ...
    def dmp_zz_heu_gcd(self, f, g): ...
    def dup_qq_heu_gcd(self, f, g): ...
    def dmp_qq_heu_gcd(self, f, g): ...
    def dup_inner_gcd(self, f, g): ...
    def dmp_inner_gcd(self, f, g): ...
    def dup_gcd(self, f, g): ...
    def dmp_gcd(self, f, g): ...
    def dup_rr_lcm(self, f, g): ...
    def dup_ff_lcm(self, f, g): ...
    def dup_lcm(self, f, g): ...
    def dmp_rr_lcm(self, f, g): ...
    def dmp_ff_lcm(self, f, g): ...
    def dmp_lcm(self, f, g): ...
    def dup_content(self, f): ...
    def dup_primitive(self, f): ...
    def dmp_content(self, f): ...
    def dmp_primitive(self, f): ...
    def dmp_ground_content(self, f): ...
    def dmp_ground_primitive(self, f): ...
    def dup_cancel(self, f, g, include: bool = True): ...
    def dmp_cancel(self, f, g, include: bool = True): ...
    def dup_trial_division(self, f, factors): ...
    def dmp_trial_division(self, f, factors): ...
    def dup_zz_mignotte_bound(self, f): ...
    def dmp_zz_mignotte_bound(self, f): ...
    def dup_zz_hensel_step(self, m, f, g, h, s, t): ...
    def dup_zz_hensel_lift(self, p, f, f_list, l): ...
    def dup_zz_zassenhaus(self, f): ...
    def dup_zz_irreducible_p(self, f): ...
    def dup_cyclotomic_p(self, f, irreducible: bool = False): ...
    def dup_zz_cyclotomic_poly(self, n): ...
    def dup_zz_cyclotomic_factor(self, f): ...
    def dmp_zz_wang_non_divisors(self, E, cs, ct): ...
    def dmp_zz_wang_lead_coeffs(self, f, T, cs, E, H, A): ...
    def dup_zz_diophantine(self, F, m, p): ...
    def dmp_zz_diophantine(self, F, c, A, d, p): ...
    def dmp_zz_wang_hensel_lifting(self, f, H, LC, A, p): ...
    def dmp_zz_wang(self, f, mod: Incomplete | None = None, seed: Incomplete | None = None): ...
    def dup_zz_factor_sqf(self, f): ...
    def dup_zz_factor(self, f): ...
    def dmp_zz_factor(self, f): ...
    def dup_qq_i_factor(self, f): ...
    def dmp_qq_i_factor(self, f): ...
    def dup_zz_i_factor(self, f): ...
    def dmp_zz_i_factor(self, f): ...
    def dup_ext_factor(self, f): ...
    def dmp_ext_factor(self, f): ...
    def dup_gf_factor(self, f): ...
    def dmp_gf_factor(self, f): ...
    def dup_factor_list(self, f): ...
    def dup_factor_list_include(self, f): ...
    def dmp_factor_list(self, f): ...
    def dmp_factor_list_include(self, f): ...
    def dup_irreducible_p(self, f): ...
    def dmp_irreducible_p(self, f): ...
    def dup_sturm(self, f): ...
    def dup_sqf_p(self, f): ...
    def dmp_sqf_p(self, f): ...
    def dmp_norm(self, f): ...
    def dup_sqf_norm(self, f): ...
    def dmp_sqf_norm(self, f): ...
    def dup_gf_sqf_part(self, f): ...
    def dmp_gf_sqf_part(self, f): ...
    def dup_sqf_part(self, f): ...
    def dmp_sqf_part(self, f): ...
    def dup_gf_sqf_list(self, f, all: bool = False): ...
    def dmp_gf_sqf_list(self, f, all: bool = False): ...
    def dup_sqf_list(self, f, all: bool = False): ...
    def dup_sqf_list_include(self, f, all: bool = False): ...
    def dmp_sqf_list(self, f, all: bool = False): ...
    def dmp_sqf_list_include(self, f, all: bool = False): ...
    def dup_gff_list(self, f): ...
    def dmp_gff_list(self, f): ...
    def dup_root_upper_bound(self, f): ...
    def dup_root_lower_bound(self, f): ...
    def dup_step_refine_real_root(self, f, M, fast: bool = False): ...
    def dup_inner_refine_real_root(self, f, M, eps: Incomplete | None = None, steps: Incomplete | None = None, disjoint: Incomplete | None = None, fast: bool = False, mobius: bool = False): ...
    def dup_outer_refine_real_root(self, f, s, t, eps: Incomplete | None = None, steps: Incomplete | None = None, disjoint: Incomplete | None = None, fast: bool = False): ...
    def dup_refine_real_root(self, f, s, t, eps: Incomplete | None = None, steps: Incomplete | None = None, disjoint: Incomplete | None = None, fast: bool = False): ...
    def dup_inner_isolate_real_roots(self, f, eps: Incomplete | None = None, fast: bool = False): ...
    def dup_inner_isolate_positive_roots(self, f, eps: Incomplete | None = None, inf: Incomplete | None = None, sup: Incomplete | None = None, fast: bool = False, mobius: bool = False): ...
    def dup_inner_isolate_negative_roots(self, f, inf: Incomplete | None = None, sup: Incomplete | None = None, eps: Incomplete | None = None, fast: bool = False, mobius: bool = False): ...
    def dup_isolate_real_roots_sqf(self, f, eps: Incomplete | None = None, inf: Incomplete | None = None, sup: Incomplete | None = None, fast: bool = False, blackbox: bool = False): ...
    def dup_isolate_real_roots(self, f, eps: Incomplete | None = None, inf: Incomplete | None = None, sup: Incomplete | None = None, basis: bool = False, fast: bool = False): ...
    def dup_isolate_real_roots_list(self, polys, eps: Incomplete | None = None, inf: Incomplete | None = None, sup: Incomplete | None = None, strict: bool = False, basis: bool = False, fast: bool = False): ...
    def dup_count_real_roots(self, f, inf: Incomplete | None = None, sup: Incomplete | None = None): ...
    def dup_count_complex_roots(self, f, inf: Incomplete | None = None, sup: Incomplete | None = None, exclude: Incomplete | None = None): ...
    def dup_isolate_complex_roots_sqf(self, f, eps: Incomplete | None = None, inf: Incomplete | None = None, sup: Incomplete | None = None, blackbox: bool = False): ...
    def dup_isolate_all_roots_sqf(self, f, eps: Incomplete | None = None, inf: Incomplete | None = None, sup: Incomplete | None = None, fast: bool = False, blackbox: bool = False): ...
    def dup_isolate_all_roots(self, f, eps: Incomplete | None = None, inf: Incomplete | None = None, sup: Incomplete | None = None, fast: bool = False): ...
    def fateman_poly_F_1(self): ...
    def fateman_poly_F_2(self): ...
    def fateman_poly_F_3(self): ...
    def to_gf_dense(self, element): ...
    def from_gf_dense(self, element): ...
    def gf_degree(self, f): ...
    def gf_LC(self, f): ...
    def gf_TC(self, f): ...
    def gf_strip(self, f): ...
    def gf_trunc(self, f): ...
    def gf_normal(self, f): ...
    def gf_from_dict(self, f): ...
    def gf_to_dict(self, f, symmetric: bool = True): ...
    def gf_from_int_poly(self, f): ...
    def gf_to_int_poly(self, f, symmetric: bool = True): ...
    def gf_neg(self, f): ...
    def gf_add_ground(self, f, a): ...
    def gf_sub_ground(self, f, a): ...
    def gf_mul_ground(self, f, a): ...
    def gf_quo_ground(self, f, a): ...
    def gf_add(self, f, g): ...
    def gf_sub(self, f, g): ...
    def gf_mul(self, f, g): ...
    def gf_sqr(self, f): ...
    def gf_add_mul(self, f, g, h): ...
    def gf_sub_mul(self, f, g, h): ...
    def gf_expand(self, F): ...
    def gf_div(self, f, g): ...
    def gf_rem(self, f, g): ...
    def gf_quo(self, f, g): ...
    def gf_exquo(self, f, g): ...
    def gf_lshift(self, f, n): ...
    def gf_rshift(self, f, n): ...
    def gf_pow(self, f, n): ...
    def gf_pow_mod(self, f, n, g): ...
    def gf_cofactors(self, f, g): ...
    def gf_gcd(self, f, g): ...
    def gf_lcm(self, f, g): ...
    def gf_gcdex(self, f, g): ...
    def gf_monic(self, f): ...
    def gf_diff(self, f): ...
    def gf_eval(self, f, a): ...
    def gf_multi_eval(self, f, A): ...
    def gf_compose(self, f, g): ...
    def gf_compose_mod(self, g, h, f): ...
    def gf_trace_map(self, a, b, c, n, f): ...
    def gf_random(self, n): ...
    def gf_irreducible(self, n): ...
    def gf_irred_p_ben_or(self, f): ...
    def gf_irred_p_rabin(self, f): ...
    def gf_irreducible_p(self, f): ...
    def gf_sqf_p(self, f): ...
    def gf_sqf_part(self, f): ...
    def gf_sqf_list(self, f, all: bool = False): ...
    def gf_Qmatrix(self, f): ...
    def gf_berlekamp(self, f): ...
    def gf_ddf_zassenhaus(self, f): ...
    def gf_edf_zassenhaus(self, f, n): ...
    def gf_ddf_shoup(self, f): ...
    def gf_edf_shoup(self, f, n): ...
    def gf_zassenhaus(self, f): ...
    def gf_shoup(self, f): ...
    def gf_factor_sqf(self, f, method: Incomplete | None = None): ...
    def gf_factor(self, f): ...
