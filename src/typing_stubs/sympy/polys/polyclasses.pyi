from _typeshed import Incomplete
from sympy.core.numbers import oo as oo
from sympy.core.sympify import CantSympify as CantSympify
from sympy.external.gmpy import GROUND_TYPES as GROUND_TYPES
from sympy.polys.densearith import dmp_abs as dmp_abs, dmp_add as dmp_add, dmp_add_ground as dmp_add_ground, dmp_add_mul as dmp_add_mul, dmp_div as dmp_div, dmp_exquo as dmp_exquo, dmp_exquo_ground as dmp_exquo_ground, dmp_l1_norm as dmp_l1_norm, dmp_l2_norm_squared as dmp_l2_norm_squared, dmp_max_norm as dmp_max_norm, dmp_mul as dmp_mul, dmp_mul_ground as dmp_mul_ground, dmp_neg as dmp_neg, dmp_pdiv as dmp_pdiv, dmp_pexquo as dmp_pexquo, dmp_pow as dmp_pow, dmp_pquo as dmp_pquo, dmp_prem as dmp_prem, dmp_quo as dmp_quo, dmp_quo_ground as dmp_quo_ground, dmp_rem as dmp_rem, dmp_sqr as dmp_sqr, dmp_sub as dmp_sub, dmp_sub_ground as dmp_sub_ground, dmp_sub_mul as dmp_sub_mul
from sympy.polys.densebasic import dmp_convert as dmp_convert, dmp_deflate as dmp_deflate, dmp_degree_in as dmp_degree_in, dmp_degree_list as dmp_degree_list, dmp_eject as dmp_eject, dmp_exclude as dmp_exclude, dmp_from_dict as dmp_from_dict, dmp_from_sympy as dmp_from_sympy, dmp_ground as dmp_ground, dmp_ground_LC as dmp_ground_LC, dmp_ground_TC as dmp_ground_TC, dmp_ground_nth as dmp_ground_nth, dmp_ground_p as dmp_ground_p, dmp_inject as dmp_inject, dmp_list_terms as dmp_list_terms, dmp_negative_p as dmp_negative_p, dmp_normal as dmp_normal, dmp_one as dmp_one, dmp_one_p as dmp_one_p, dmp_permute as dmp_permute, dmp_slice_in as dmp_slice_in, dmp_terms_gcd as dmp_terms_gcd, dmp_to_dict as dmp_to_dict, dmp_to_tuple as dmp_to_tuple, dmp_validate as dmp_validate, dmp_zero as dmp_zero, dmp_zero_p as dmp_zero_p, dup_convert as dup_convert, dup_from_dict as dup_from_dict, dup_normal as dup_normal, dup_slice as dup_slice, dup_strip as dup_strip, ninf as ninf
from sympy.polys.densetools import dmp_clear_denoms as dmp_clear_denoms, dmp_compose as dmp_compose, dmp_diff_in as dmp_diff_in, dmp_eval_in as dmp_eval_in, dmp_ground_content as dmp_ground_content, dmp_ground_monic as dmp_ground_monic, dmp_ground_primitive as dmp_ground_primitive, dmp_ground_trunc as dmp_ground_trunc, dmp_integrate_in as dmp_integrate_in, dmp_lift as dmp_lift, dmp_shift as dmp_shift, dup_decompose as dup_decompose, dup_revert as dup_revert, dup_shift as dup_shift, dup_transform as dup_transform
from sympy.polys.domains import Domain as Domain, QQ as QQ, ZZ as ZZ
from sympy.polys.euclidtools import dmp_cancel as dmp_cancel, dmp_discriminant as dmp_discriminant, dmp_gcd as dmp_gcd, dmp_inner_gcd as dmp_inner_gcd, dmp_lcm as dmp_lcm, dmp_resultant as dmp_resultant, dmp_subresultants as dmp_subresultants, dup_gcdex as dup_gcdex, dup_half_gcdex as dup_half_gcdex, dup_invert as dup_invert
from sympy.polys.factortools import dmp_factor_list as dmp_factor_list, dmp_factor_list_include as dmp_factor_list_include, dmp_irreducible_p as dmp_irreducible_p, dup_cyclotomic_p as dup_cyclotomic_p
from sympy.polys.polyerrors import CoercionFailed as CoercionFailed, DomainError as DomainError, ExactQuotientFailed as ExactQuotientFailed, NotInvertible as NotInvertible, PolynomialError as PolynomialError, UnificationFailed as UnificationFailed
from sympy.polys.polyutils import PicklableWithSlots as PicklableWithSlots
from sympy.polys.rootisolation import dup_cauchy_lower_bound as dup_cauchy_lower_bound, dup_cauchy_upper_bound as dup_cauchy_upper_bound, dup_count_complex_roots as dup_count_complex_roots, dup_count_real_roots as dup_count_real_roots, dup_isolate_all_roots as dup_isolate_all_roots, dup_isolate_all_roots_sqf as dup_isolate_all_roots_sqf, dup_isolate_real_roots as dup_isolate_real_roots, dup_isolate_real_roots_sqf as dup_isolate_real_roots_sqf, dup_mignotte_sep_bound_squared as dup_mignotte_sep_bound_squared, dup_refine_real_root as dup_refine_real_root, dup_sturm as dup_sturm
from sympy.polys.sqfreetools import dmp_norm as dmp_norm, dmp_sqf_list as dmp_sqf_list, dmp_sqf_list_include as dmp_sqf_list_include, dmp_sqf_norm as dmp_sqf_norm, dmp_sqf_p as dmp_sqf_p, dmp_sqf_part as dmp_sqf_part, dup_gff_list as dup_gff_list
from sympy.utilities.exceptions import sympy_deprecation_warning as sympy_deprecation_warning

class DMP(CantSympify):
    def __new__(cls, rep, dom, lev: Incomplete | None = None): ...
    @classmethod
    def new(cls, rep, dom, lev): ...
    @property
    def rep(f): ...
    def to_best(f): ...
    @classmethod
    def from_dict(cls, rep, lev, dom): ...
    @classmethod
    def from_list(cls, rep, lev, dom): ...
    @classmethod
    def from_sympy_list(cls, rep, lev, dom): ...
    @classmethod
    def from_monoms_coeffs(cls, monoms, coeffs, lev, dom): ...
    def convert(f, dom): ...
    @classmethod
    def zero(cls, lev, dom): ...
    @classmethod
    def one(cls, lev, dom): ...
    def __hash__(f): ...
    def __getnewargs__(self): ...
    def ground_new(f, coeff) -> None: ...
    def unify_DMP(f, g): ...
    def to_dict(f, zero: bool = False): ...
    def to_sympy_dict(f, zero: bool = False): ...
    def to_sympy_list(f): ...
    def to_list(f) -> None: ...
    def to_tuple(f) -> None: ...
    def to_ring(f): ...
    def to_field(f): ...
    def to_exact(f): ...
    def slice(f, m, n, j: int = 0): ...
    def coeffs(f, order: Incomplete | None = None): ...
    def monoms(f, order: Incomplete | None = None): ...
    def terms(f, order: Incomplete | None = None): ...
    def all_coeffs(f): ...
    def all_monoms(f): ...
    def all_terms(f): ...
    def lift(f): ...
    def deflate(f) -> None: ...
    def inject(f, front: bool = False) -> None: ...
    def eject(f, dom, front: bool = False) -> None: ...
    def exclude(f): ...
    def permute(f, P): ...
    def terms_gcd(f) -> None: ...
    def abs(f) -> None: ...
    def neg(f) -> None: ...
    def add_ground(f, c): ...
    def sub_ground(f, c): ...
    def mul_ground(f, c): ...
    def quo_ground(f, c): ...
    def exquo_ground(f, c): ...
    def add(f, g): ...
    def sub(f, g): ...
    def mul(f, g): ...
    def sqr(f): ...
    def pow(f, n): ...
    def pdiv(f, g): ...
    def prem(f, g): ...
    def pquo(f, g): ...
    def pexquo(f, g): ...
    def div(f, g): ...
    def rem(f, g): ...
    def quo(f, g): ...
    def exquo(f, g): ...
    def degree(f, j: int = 0): ...
    def degree_list(f) -> None: ...
    def total_degree(f) -> None: ...
    def homogenize(f, s): ...
    def homogeneous_order(f): ...
    def LC(f) -> None: ...
    def TC(f) -> None: ...
    def nth(f, *N): ...
    def max_norm(f) -> None: ...
    def l1_norm(f) -> None: ...
    def l2_norm_squared(f) -> None: ...
    def clear_denoms(f) -> None: ...
    def integrate(f, m: int = 1, j: int = 0): ...
    def diff(f, m: int = 1, j: int = 0): ...
    def eval(f, a, j: int = 0): ...
    def half_gcdex(f, g): ...
    def gcdex(f, g): ...
    def invert(f, g): ...
    def revert(f, n): ...
    def subresultants(f, g): ...
    def resultant(f, g, includePRS: bool = False): ...
    def discriminant(f) -> None: ...
    def cofactors(f, g): ...
    def gcd(f, g): ...
    def lcm(f, g): ...
    def cancel(f, g, include: bool = True): ...
    def trunc(f, p): ...
    def monic(f) -> None: ...
    def content(f) -> None: ...
    def primitive(f) -> None: ...
    def compose(f, g): ...
    def decompose(f): ...
    def shift(f, a): ...
    def shift_list(f, a): ...
    def transform(f, p, q): ...
    def sturm(f): ...
    def cauchy_upper_bound(f): ...
    def cauchy_lower_bound(f): ...
    def mignotte_sep_bound_squared(f): ...
    def gff_list(f): ...
    def norm(f) -> None: ...
    def sqf_norm(f) -> None: ...
    def sqf_part(f) -> None: ...
    def sqf_list(f, all: bool = False) -> None: ...
    def sqf_list_include(f, all: bool = False) -> None: ...
    def factor_list(f) -> None: ...
    def factor_list_include(f) -> None: ...
    def intervals(f, all: bool = False, eps: Incomplete | None = None, inf: Incomplete | None = None, sup: Incomplete | None = None, fast: bool = False, sqf: bool = False): ...
    def refine_root(f, s, t, eps: Incomplete | None = None, steps: Incomplete | None = None, fast: bool = False): ...
    def count_real_roots(f, inf: Incomplete | None = None, sup: Incomplete | None = None) -> None: ...
    def count_complex_roots(f, inf: Incomplete | None = None, sup: Incomplete | None = None) -> None: ...
    @property
    def is_zero(f) -> None: ...
    @property
    def is_one(f) -> None: ...
    @property
    def is_ground(f) -> None: ...
    @property
    def is_sqf(f) -> None: ...
    @property
    def is_monic(f) -> None: ...
    @property
    def is_primitive(f) -> None: ...
    @property
    def is_linear(f) -> None: ...
    @property
    def is_quadratic(f) -> None: ...
    @property
    def is_monomial(f) -> None: ...
    @property
    def is_homogeneous(f) -> None: ...
    @property
    def is_irreducible(f) -> None: ...
    @property
    def is_cyclotomic(f) -> None: ...
    def __abs__(f): ...
    def __neg__(f): ...
    def __add__(f, g): ...
    def __radd__(f, g): ...
    def __sub__(f, g): ...
    def __rsub__(f, g): ...
    def __mul__(f, g): ...
    def __rmul__(f, g): ...
    def __truediv__(f, g): ...
    def __rtruediv__(f, g): ...
    def __pow__(f, n): ...
    def __divmod__(f, g): ...
    def __mod__(f, g): ...
    def __floordiv__(f, g): ...
    def __eq__(f, g): ...
    def eq(f, g, strict: bool = False): ...
    def ne(f, g, strict: bool = False): ...
    def __lt__(f, g): ...
    def __le__(f, g): ...
    def __gt__(f, g): ...
    def __ge__(f, g): ...
    def __bool__(f) -> bool: ...

class DMP_Python(DMP):
    def per(f, rep): ...
    def ground_new(f, coeff): ...
    def unify(f, g): ...
    def to_DUP_Flint(f): ...
    def to_list(f): ...
    def to_tuple(f): ...
    def deflate(f): ...
    def inject(f, front: bool = False): ...
    def eject(f, dom, front: bool = False): ...
    def terms_gcd(f): ...
    def abs(f): ...
    def neg(f): ...
    def sqr(f): ...
    def degree_list(f): ...
    def total_degree(f): ...
    def LC(f): ...
    def TC(f): ...
    def max_norm(f): ...
    def l1_norm(f): ...
    def l2_norm_squared(f): ...
    def clear_denoms(f): ...
    def discriminant(f): ...
    def monic(f): ...
    def content(f): ...
    def primitive(f): ...
    def norm(f): ...
    def sqf_norm(f): ...
    def sqf_part(f): ...
    def sqf_list(f, all: bool = False): ...
    def sqf_list_include(f, all: bool = False): ...
    def factor_list(f): ...
    def factor_list_include(f): ...
    def count_real_roots(f, inf: Incomplete | None = None, sup: Incomplete | None = None): ...
    def count_complex_roots(f, inf: Incomplete | None = None, sup: Incomplete | None = None): ...
    @property
    def is_zero(f): ...
    @property
    def is_one(f): ...
    @property
    def is_ground(f): ...
    @property
    def is_sqf(f): ...
    @property
    def is_monic(f): ...
    @property
    def is_primitive(f): ...
    @property
    def is_linear(f): ...
    @property
    def is_quadratic(f): ...
    @property
    def is_monomial(f): ...
    @property
    def is_homogeneous(f): ...
    @property
    def is_irreducible(f): ...
    @property
    def is_cyclotomic(f): ...

class DUP_Flint(DMP):
    lev: int
    def __reduce__(self): ...
    def to_list(f): ...
    @classmethod
    def from_rep(cls, rep, dom): ...
    def ground_new(f, coeff): ...
    def unify(f, g) -> None: ...
    def to_DMP_Python(f): ...
    def to_tuple(f): ...
    def deflate(f): ...
    def inject(f, front: bool = False) -> None: ...
    def eject(f, dom, front: bool = False) -> None: ...
    def terms_gcd(f): ...
    def abs(f): ...
    def neg(f): ...
    def sqr(f): ...
    def degree_list(f): ...
    def total_degree(f): ...
    def LC(f): ...
    def TC(f): ...
    def max_norm(f): ...
    def l1_norm(f): ...
    def l2_norm_squared(f): ...
    def clear_denoms(f): ...
    def discriminant(f): ...
    def monic(f): ...
    def content(f): ...
    def primitive(f): ...
    def norm(f) -> None: ...
    def sqf_norm(f) -> None: ...
    def sqf_part(f): ...
    def sqf_list(f, all: bool = False): ...
    def sqf_list_include(f, all: bool = False): ...
    def factor_list(f): ...
    def factor_list_include(f): ...
    def count_real_roots(f, inf: Incomplete | None = None, sup: Incomplete | None = None): ...
    def count_complex_roots(f, inf: Incomplete | None = None, sup: Incomplete | None = None): ...
    @property
    def is_zero(f): ...
    @property
    def is_one(f): ...
    @property
    def is_ground(f): ...
    @property
    def is_linear(f): ...
    @property
    def is_quadratic(f): ...
    @property
    def is_monomial(f): ...
    @property
    def is_monic(f): ...
    @property
    def is_primitive(f): ...
    @property
    def is_homogeneous(f): ...
    @property
    def is_sqf(f): ...
    @property
    def is_irreducible(f): ...
    @property
    def is_cyclotomic(f): ...

def init_normal_DMF(num, den, lev, dom): ...

class DMF(PicklableWithSlots, CantSympify):
    num: Incomplete
    den: Incomplete
    lev: Incomplete
    dom: Incomplete
    def __init__(self, rep, dom, lev: Incomplete | None = None) -> None: ...
    @classmethod
    def new(cls, rep, dom, lev: Incomplete | None = None): ...
    def ground_new(self, rep): ...
    def __hash__(f): ...
    def poly_unify(f, g): ...
    def frac_unify(f, g): ...
    def per(f, num, den, cancel: bool = True, kill: bool = False): ...
    def half_per(f, rep, kill: bool = False): ...
    @classmethod
    def zero(cls, lev, dom): ...
    @classmethod
    def one(cls, lev, dom): ...
    def numer(f): ...
    def denom(f): ...
    def cancel(f): ...
    def neg(f): ...
    def add_ground(f, c): ...
    def add(f, g): ...
    def sub(f, g): ...
    def mul(f, g): ...
    def pow(f, n): ...
    def quo(f, g): ...
    exquo = quo
    def invert(f, check: bool = True): ...
    @property
    def is_zero(f): ...
    @property
    def is_one(f): ...
    def __neg__(f): ...
    def __add__(f, g): ...
    def __radd__(f, g): ...
    def __sub__(f, g): ...
    def __rsub__(f, g): ...
    def __mul__(f, g): ...
    def __rmul__(f, g): ...
    def __pow__(f, n): ...
    def __truediv__(f, g): ...
    def __rtruediv__(self, g): ...
    def __eq__(f, g): ...
    def __ne__(f, g): ...
    def __lt__(f, g): ...
    def __le__(f, g): ...
    def __gt__(f, g): ...
    def __ge__(f, g): ...
    def __bool__(f) -> bool: ...

def init_normal_ANP(rep, mod, dom): ...

class ANP(CantSympify):
    def __new__(cls, rep, mod, dom): ...
    @classmethod
    def new(cls, rep, mod, dom): ...
    def __reduce__(self): ...
    @property
    def rep(self): ...
    @property
    def mod(self): ...
    def to_DMP(self): ...
    def mod_to_DMP(self): ...
    def per(f, rep): ...
    def __hash__(f): ...
    def convert(f, dom): ...
    def unify(f, g): ...
    def unify_ANP(f, g): ...
    @classmethod
    def zero(cls, mod, dom): ...
    @classmethod
    def one(cls, mod, dom): ...
    def to_dict(f): ...
    def to_sympy_dict(f): ...
    def to_list(f): ...
    def mod_to_list(f): ...
    def to_sympy_list(f): ...
    def to_tuple(f): ...
    @classmethod
    def from_list(cls, rep, mod, dom): ...
    def add_ground(f, c): ...
    def sub_ground(f, c): ...
    def mul_ground(f, c): ...
    def quo_ground(f, c): ...
    def neg(f): ...
    def add(f, g): ...
    def sub(f, g): ...
    def mul(f, g): ...
    def pow(f, n): ...
    def exquo(f, g): ...
    def div(f, g): ...
    def quo(f, g): ...
    def rem(f, g): ...
    def LC(f): ...
    def TC(f): ...
    @property
    def is_zero(f): ...
    @property
    def is_one(f): ...
    @property
    def is_ground(f): ...
    def __pos__(f): ...
    def __neg__(f): ...
    def __add__(f, g): ...
    def __radd__(f, g): ...
    def __sub__(f, g): ...
    def __rsub__(f, g): ...
    def __mul__(f, g): ...
    def __rmul__(f, g): ...
    def __pow__(f, n): ...
    def __divmod__(f, g): ...
    def __mod__(f, g): ...
    def __truediv__(f, g): ...
    def __eq__(f, g): ...
    def __ne__(f, g): ...
    def __lt__(f, g): ...
    def __le__(f, g): ...
    def __gt__(f, g): ...
    def __ge__(f, g): ...
    def __bool__(f) -> bool: ...
