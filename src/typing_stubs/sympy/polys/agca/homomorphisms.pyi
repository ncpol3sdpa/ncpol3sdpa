from _typeshed import Incomplete
from sympy.polys.agca.modules import FreeModule as FreeModule, Module as Module, QuotientModule as QuotientModule, SubModule as SubModule, SubQuotientModule as SubQuotientModule
from sympy.polys.polyerrors import CoercionFailed as CoercionFailed

class ModuleHomomorphism:
    domain: Incomplete
    codomain: Incomplete
    ring: Incomplete
    def __init__(self, domain, codomain) -> None: ...
    def kernel(self): ...
    def image(self): ...
    def restrict_domain(self, sm): ...
    def restrict_codomain(self, sm): ...
    def quotient_domain(self, sm): ...
    def quotient_codomain(self, sm): ...
    def __call__(self, elem): ...
    def __mul__(self, oth): ...
    __rmul__ = __mul__
    def __truediv__(self, oth): ...
    def __add__(self, oth): ...
    def __sub__(self, oth): ...
    def is_injective(self): ...
    def is_surjective(self): ...
    def is_isomorphism(self): ...
    def is_zero(self): ...
    def __eq__(self, oth): ...
    def __ne__(self, oth): ...

class MatrixHomomorphism(ModuleHomomorphism):
    matrix: Incomplete
    def __init__(self, domain, codomain, matrix) -> None: ...

class FreeModuleHomomorphism(MatrixHomomorphism): ...
class SubModuleHomomorphism(MatrixHomomorphism): ...

def homomorphism(domain, codomain, matrix): ...
