from _typeshed import Incomplete
from sympy.polys.polyerrors import CoercionFailed as CoercionFailed
from sympy.polys.polyutils import IntegerPowerable as IntegerPowerable

class Ideal(IntegerPowerable):
    def is_whole_ring(self) -> None: ...
    def is_zero(self) -> None: ...
    def is_prime(self) -> None: ...
    def is_maximal(self) -> None: ...
    def is_radical(self) -> None: ...
    def is_primary(self) -> None: ...
    def is_principal(self) -> None: ...
    def radical(self) -> None: ...
    def depth(self) -> None: ...
    def height(self) -> None: ...
    ring: Incomplete
    def __init__(self, ring) -> None: ...
    def contains(self, elem): ...
    def subset(self, other): ...
    def quotient(self, J, **opts): ...
    def intersect(self, J): ...
    def saturate(self, J) -> None: ...
    def union(self, J): ...
    def product(self, J): ...
    def reduce_element(self, x): ...
    def __add__(self, e): ...
    __radd__ = __add__
    def __mul__(self, e): ...
    __rmul__ = __mul__
    def __eq__(self, e): ...
    def __ne__(self, e): ...

class ModuleImplementedIdeal(Ideal):
    def __init__(self, ring, module) -> None: ...
    @property
    def gens(self): ...
    def is_zero(self): ...
    def is_whole_ring(self): ...
    def in_terms_of_generators(self, e): ...
    def reduce_element(self, x, **options): ...
