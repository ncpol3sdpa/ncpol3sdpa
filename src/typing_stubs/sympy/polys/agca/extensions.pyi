from _typeshed import Incomplete
from sympy.polys.domains.domain import Domain as Domain
from sympy.polys.domains.domainelement import DomainElement as DomainElement
from sympy.polys.polyerrors import CoercionFailed as CoercionFailed, GeneratorsError as GeneratorsError, NotInvertible as NotInvertible
from sympy.polys.polytools import Poly as Poly
from sympy.printing.defaults import DefaultPrinting as DefaultPrinting

class ExtensionElement(DomainElement, DefaultPrinting):
    rep: Incomplete
    ext: Incomplete
    def __init__(self, rep, ext) -> None: ...
    def parent(f): ...
    def as_expr(f): ...
    def __bool__(f) -> bool: ...
    def __pos__(f): ...
    def __neg__(f): ...
    def __add__(f, g): ...
    __radd__ = __add__
    def __sub__(f, g): ...
    def __rsub__(f, g): ...
    def __mul__(f, g): ...
    __rmul__ = __mul__
    def inverse(f): ...
    def __truediv__(f, g): ...
    __floordiv__ = __truediv__
    def __rtruediv__(f, g): ...
    __rfloordiv__ = __rtruediv__
    def __mod__(f, g): ...
    def __rmod__(f, g): ...
    def __pow__(f, n): ...
    def __eq__(f, g): ...
    def __ne__(f, g): ...
    def __hash__(f): ...
    @property
    def is_ground(f): ...
    def to_ground(f): ...
ExtElem = ExtensionElement

class MonogenicFiniteExtension(Domain):
    is_FiniteExtension: bool
    dtype = ExtensionElement
    rank: Incomplete
    modulus: Incomplete
    mod: Incomplete
    domain: Incomplete
    ring: Incomplete
    zero: Incomplete
    one: Incomplete
    symbol: Incomplete
    generator: Incomplete
    basis: Incomplete
    is_Field: Incomplete
    def __init__(self, mod) -> None: ...
    def new(self, arg): ...
    def __eq__(self, other): ...
    def __hash__(self): ...
    @property
    def has_CharacteristicZero(self): ...
    def characteristic(self): ...
    def convert(self, f, base: Incomplete | None = None): ...
    def convert_from(self, f, base): ...
    def to_sympy(self, f): ...
    def from_sympy(self, f): ...
    def set_domain(self, K): ...
    def drop(self, *symbols): ...
    def quo(self, f, g): ...
    def exquo(self, f, g): ...
    def is_negative(self, a): ...
    def is_unit(self, a): ...
FiniteExtension = MonogenicFiniteExtension
