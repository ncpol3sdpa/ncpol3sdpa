from _typeshed import Incomplete
from sympy.polys.domains.field import Field
from sympy.polys.domains.simpledomain import SimpleDomain

__all__ = ['FiniteField']

class FiniteField(Field, SimpleDomain):
    rep: str
    alias: str
    is_FiniteField: bool
    is_FF: bool
    is_Numerical: bool
    has_assoc_Ring: bool
    has_assoc_Field: bool
    dom: Incomplete
    mod: Incomplete
    dtype: Incomplete
    zero: Incomplete
    one: Incomplete
    sym: Incomplete
    def __init__(self, mod, symmetric: bool = True) -> None: ...
    @property
    def tp(self): ...
    def __hash__(self): ...
    def __eq__(self, other): ...
    def characteristic(self): ...
    def get_field(self): ...
    def to_sympy(self, a): ...
    def from_sympy(self, a): ...
    def to_int(self, a): ...
    def is_positive(self, a): ...
    def is_nonnegative(self, a): ...
    def is_negative(self, a): ...
    def is_nonpositive(self, a): ...
    def from_FF(K1, a, K0: Incomplete | None = None): ...
    def from_FF_python(K1, a, K0: Incomplete | None = None): ...
    def from_ZZ(K1, a, K0: Incomplete | None = None): ...
    def from_ZZ_python(K1, a, K0: Incomplete | None = None): ...
    def from_QQ(K1, a, K0: Incomplete | None = None): ...
    def from_QQ_python(K1, a, K0: Incomplete | None = None): ...
    def from_FF_gmpy(K1, a, K0: Incomplete | None = None): ...
    def from_ZZ_gmpy(K1, a, K0: Incomplete | None = None): ...
    def from_QQ_gmpy(K1, a, K0: Incomplete | None = None): ...
    def from_RealField(K1, a, K0): ...
    def is_square(self, a): ...
    def exsqrt(self, a): ...
FF = FiniteField
GF = FiniteField
