from _typeshed import Incomplete
from sympy.polys.domains.characteristiczero import CharacteristicZero
from sympy.polys.domains.field import Field
from sympy.polys.domains.simpledomain import SimpleDomain
from sympy.polys.polyclasses import ANP

__all__ = ['AlgebraicField']

class AlgebraicField(Field, CharacteristicZero, SimpleDomain):
    dtype = ANP
    is_AlgebraicField: bool
    is_Algebraic: bool
    is_Numerical: bool
    has_assoc_Ring: bool
    has_assoc_Field: bool
    orig_ext: Incomplete
    ext: Incomplete
    mod: Incomplete
    domain: Incomplete
    ngens: int
    symbols: Incomplete
    unit: Incomplete
    zero: Incomplete
    one: Incomplete
    def __init__(self, dom, *ext, alias: Incomplete | None = None) -> None: ...
    def new(self, element): ...
    def __hash__(self): ...
    def __eq__(self, other): ...
    def algebraic_field(self, *extension, alias: Incomplete | None = None): ...
    def to_alg_num(self, a): ...
    def to_sympy(self, a): ...
    def from_sympy(self, a): ...
    def from_ZZ(K1, a, K0): ...
    def from_ZZ_python(K1, a, K0): ...
    def from_QQ(K1, a, K0): ...
    def from_QQ_python(K1, a, K0): ...
    def from_ZZ_gmpy(K1, a, K0): ...
    def from_QQ_gmpy(K1, a, K0): ...
    def from_RealField(K1, a, K0): ...
    def get_ring(self) -> None: ...
    def is_positive(self, a): ...
    def is_negative(self, a): ...
    def is_nonpositive(self, a): ...
    def is_nonnegative(self, a): ...
    def numer(self, a): ...
    def denom(self, a): ...
    def from_AlgebraicField(K1, a, K0): ...
    def from_GaussianIntegerRing(K1, a, K0): ...
    def from_GaussianRationalField(K1, a, K0): ...
    def maximal_order(self): ...
    def integral_basis(self, fmt: Incomplete | None = None): ...
    def discriminant(self): ...
    def primes_above(self, p): ...
    def galois_group(self, by_name: bool = False, max_tries: int = 30, randomize: bool = False): ...
