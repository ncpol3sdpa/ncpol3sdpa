from _typeshed import Incomplete
from typing import Any

__all__ = ['Domain']

class Domain:
    dtype: type | None
    zero: Any
    one: Any
    is_Ring: bool
    is_Field: bool
    has_assoc_Ring: bool
    has_assoc_Field: bool
    is_FiniteField: bool
    is_FF: bool
    is_IntegerRing: bool
    is_ZZ: bool
    is_RationalField: bool
    is_QQ: bool
    is_GaussianRing: bool
    is_ZZ_I: bool
    is_GaussianField: bool
    is_QQ_I: bool
    is_RealField: bool
    is_RR: bool
    is_ComplexField: bool
    is_CC: bool
    is_AlgebraicField: bool
    is_Algebraic: bool
    is_PolynomialRing: bool
    is_Poly: bool
    is_FractionField: bool
    is_Frac: bool
    is_SymbolicDomain: bool
    is_EX: bool
    is_SymbolicRawDomain: bool
    is_EXRAW: bool
    is_FiniteExtension: bool
    is_Exact: bool
    is_Numerical: bool
    is_Simple: bool
    is_Composite: bool
    is_PID: bool
    has_CharacteristicZero: bool
    rep: str | None
    alias: str | None
    def __init__(self) -> None: ...
    def __hash__(self): ...
    def new(self, *args): ...
    @property
    def tp(self): ...
    def __call__(self, *args): ...
    def normal(self, *args): ...
    def convert_from(self, element, base): ...
    def convert(self, element, base: Incomplete | None = None): ...
    def of_type(self, element): ...
    def __contains__(self, a) -> bool: ...
    def to_sympy(self, a) -> None: ...
    def from_sympy(self, a) -> None: ...
    def sum(self, args): ...
    def from_FF(K1, a, K0) -> None: ...
    def from_FF_python(K1, a, K0) -> None: ...
    def from_ZZ_python(K1, a, K0) -> None: ...
    def from_QQ_python(K1, a, K0) -> None: ...
    def from_FF_gmpy(K1, a, K0) -> None: ...
    def from_ZZ_gmpy(K1, a, K0) -> None: ...
    def from_QQ_gmpy(K1, a, K0) -> None: ...
    def from_RealField(K1, a, K0) -> None: ...
    def from_ComplexField(K1, a, K0) -> None: ...
    def from_AlgebraicField(K1, a, K0) -> None: ...
    def from_PolynomialRing(K1, a, K0): ...
    def from_FractionField(K1, a, K0) -> None: ...
    def from_MonogenicFiniteExtension(K1, a, K0): ...
    def from_ExpressionDomain(K1, a, K0): ...
    def from_ExpressionRawDomain(K1, a, K0): ...
    def from_GlobalPolynomialRing(K1, a, K0): ...
    def from_GeneralizedPolynomialRing(K1, a, K0): ...
    def unify_with_symbols(K0, K1, symbols): ...
    def unify_composite(K0, K1): ...
    def unify(K0, K1, symbols: Incomplete | None = None): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def map(self, seq): ...
    def get_ring(self) -> None: ...
    def get_field(self) -> None: ...
    def get_exact(self): ...
    def __getitem__(self, symbols): ...
    def poly_ring(self, *symbols, order=...): ...
    def frac_field(self, *symbols, order=...): ...
    def old_poly_ring(self, *symbols, **kwargs): ...
    def old_frac_field(self, *symbols, **kwargs): ...
    def algebraic_field(self, *extension, alias: Incomplete | None = None) -> None: ...
    def alg_field_from_poly(self, poly, alias: Incomplete | None = None, root_index: int = -1): ...
    def cyclotomic_field(self, n, ss: bool = False, alias: str = 'zeta', gen: Incomplete | None = None, root_index: int = -1): ...
    def inject(self, *symbols) -> None: ...
    def drop(self, *symbols): ...
    def is_zero(self, a): ...
    def is_one(self, a): ...
    def is_positive(self, a): ...
    def is_negative(self, a): ...
    def is_nonpositive(self, a): ...
    def is_nonnegative(self, a): ...
    def canonical_unit(self, a): ...
    def abs(self, a): ...
    def neg(self, a): ...
    def pos(self, a): ...
    def add(self, a, b): ...
    def sub(self, a, b): ...
    def mul(self, a, b): ...
    def pow(self, a, b): ...
    def exquo(self, a, b) -> None: ...
    def quo(self, a, b) -> None: ...
    def rem(self, a, b) -> None: ...
    def div(self, a, b) -> None: ...
    def invert(self, a, b) -> None: ...
    def revert(self, a) -> None: ...
    def numer(self, a) -> None: ...
    def denom(self, a) -> None: ...
    def half_gcdex(self, a, b): ...
    def gcdex(self, a, b) -> None: ...
    def cofactors(self, a, b): ...
    def gcd(self, a, b) -> None: ...
    def lcm(self, a, b) -> None: ...
    def log(self, a, b) -> None: ...
    def sqrt(self, a) -> None: ...
    def is_square(self, a) -> None: ...
    def exsqrt(self, a) -> None: ...
    def evalf(self, a, prec: Incomplete | None = None, **options): ...
    n = evalf
    def real(self, a): ...
    def imag(self, a): ...
    def almosteq(self, a, b, tolerance: Incomplete | None = None): ...
    def characteristic(self) -> None: ...
