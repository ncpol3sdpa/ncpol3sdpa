from _typeshed import Incomplete
from sympy.polys.domains.ring import Ring

__all__ = ['QuotientRingElement']

class QuotientRingElement:
    ring: Incomplete
    data: Incomplete
    def __init__(self, ring, data) -> None: ...
    def __bool__(self) -> bool: ...
    def __add__(self, om): ...
    __radd__ = __add__
    def __neg__(self): ...
    def __sub__(self, om): ...
    def __rsub__(self, om): ...
    def __mul__(self, o): ...
    __rmul__ = __mul__
    def __rtruediv__(self, o): ...
    def __truediv__(self, o): ...
    def __pow__(self, oth): ...
    def __eq__(self, om): ...
    def __ne__(self, om): ...

class QuotientRing(Ring):
    has_assoc_Ring: bool
    has_assoc_Field: bool
    dtype = QuotientRingElement
    ring: Incomplete
    base_ideal: Incomplete
    zero: Incomplete
    one: Incomplete
    def __init__(self, ring, ideal) -> None: ...
    def __hash__(self): ...
    def new(self, a): ...
    def __eq__(self, other): ...
    def from_ZZ(K1, a, K0): ...
    from_ZZ_python = from_ZZ
    from_QQ_python = from_ZZ_python
    from_ZZ_gmpy = from_ZZ_python
    from_QQ_gmpy = from_ZZ_python
    from_RealField = from_ZZ_python
    from_GlobalPolynomialRing = from_ZZ_python
    from_FractionField = from_ZZ_python
    def from_sympy(self, a): ...
    def to_sympy(self, a): ...
    def from_QuotientRing(self, a, K0): ...
    def poly_ring(self, *gens) -> None: ...
    def frac_field(self, *gens) -> None: ...
    def revert(self, a): ...
    def is_zero(self, a): ...
    def free_module(self, rank): ...
