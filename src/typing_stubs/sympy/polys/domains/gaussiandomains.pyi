from _typeshed import Incomplete
from sympy.core.numbers import I as I
from sympy.polys.domains.algebraicfield import AlgebraicField as AlgebraicField
from sympy.polys.domains.domain import Domain as Domain
from sympy.polys.domains.domainelement import DomainElement as DomainElement
from sympy.polys.domains.field import Field as Field
from sympy.polys.domains.integerring import ZZ as ZZ
from sympy.polys.domains.rationalfield import QQ as QQ
from sympy.polys.domains.ring import Ring as Ring
from sympy.polys.polyerrors import CoercionFailed as CoercionFailed

class GaussianElement(DomainElement):
    base: Domain
    def __new__(cls, x, y: int = 0): ...
    @classmethod
    def new(cls, x, y): ...
    def parent(self): ...
    def __hash__(self): ...
    def __eq__(self, other): ...
    def __lt__(self, other): ...
    def __pos__(self): ...
    def __neg__(self): ...
    def __add__(self, other): ...
    __radd__ = __add__
    def __sub__(self, other): ...
    def __rsub__(self, other): ...
    def __mul__(self, other): ...
    __rmul__ = __mul__
    def __pow__(self, exp): ...
    def __bool__(self) -> bool: ...
    def quadrant(self): ...
    def __rdivmod__(self, other): ...
    def __rtruediv__(self, other): ...
    def __floordiv__(self, other): ...
    def __rfloordiv__(self, other): ...
    def __mod__(self, other): ...
    def __rmod__(self, other): ...

class GaussianInteger(GaussianElement):
    base = ZZ
    def __truediv__(self, other): ...
    def __divmod__(self, other): ...

class GaussianRational(GaussianElement):
    base = QQ
    def __truediv__(self, other): ...
    def __divmod__(self, other): ...

class GaussianDomain:
    dom: Domain
    is_Numerical: bool
    is_Exact: bool
    has_assoc_Ring: bool
    has_assoc_Field: bool
    def to_sympy(self, a): ...
    def from_sympy(self, a): ...
    def inject(self, *gens): ...
    def canonical_unit(self, d): ...
    def is_negative(self, element): ...
    def is_positive(self, element): ...
    def is_nonnegative(self, element): ...
    def is_nonpositive(self, element): ...
    def from_ZZ_gmpy(K1, a, K0): ...
    def from_ZZ(K1, a, K0): ...
    def from_ZZ_python(K1, a, K0): ...
    def from_QQ(K1, a, K0): ...
    def from_QQ_gmpy(K1, a, K0): ...
    def from_QQ_python(K1, a, K0): ...
    def from_AlgebraicField(K1, a, K0): ...

class GaussianIntegerRing(GaussianDomain, Ring):
    dom = ZZ
    dtype = GaussianInteger
    zero: Incomplete
    one: Incomplete
    imag_unit: Incomplete
    units: Incomplete
    rep: str
    is_GaussianRing: bool
    is_ZZ_I: bool
    def __init__(self) -> None: ...
    def __eq__(self, other): ...
    def __hash__(self): ...
    @property
    def has_CharacteristicZero(self): ...
    def characteristic(self): ...
    def get_ring(self): ...
    def get_field(self): ...
    def normalize(self, d, *args): ...
    def gcd(self, a, b): ...
    def lcm(self, a, b): ...
    def from_GaussianIntegerRing(K1, a, K0): ...
    def from_GaussianRationalField(K1, a, K0): ...

ZZ_I: Incomplete

class GaussianRationalField(GaussianDomain, Field):
    dom = QQ
    dtype = GaussianRational
    zero: Incomplete
    one: Incomplete
    imag_unit: Incomplete
    units: Incomplete
    rep: str
    is_GaussianField: bool
    is_QQ_I: bool
    def __init__(self) -> None: ...
    def __eq__(self, other): ...
    def __hash__(self): ...
    @property
    def has_CharacteristicZero(self): ...
    def characteristic(self): ...
    def get_ring(self): ...
    def get_field(self): ...
    def as_AlgebraicField(self): ...
    def numer(self, a): ...
    def denom(self, a): ...
    def from_GaussianIntegerRing(K1, a, K0): ...
    def from_GaussianRationalField(K1, a, K0): ...
    def from_ComplexField(K1, a, K0): ...

QQ_I: Incomplete
