from _typeshed import Incomplete
from sympy.polys.domains.compositedomain import CompositeDomain
from sympy.polys.domains.ring import Ring

__all__ = ['PolynomialRing']

class PolynomialRing(Ring, CompositeDomain):
    is_PolynomialRing: bool
    is_Poly: bool
    has_assoc_Ring: bool
    has_assoc_Field: bool
    ring: Incomplete
    dtype: Incomplete
    gens: Incomplete
    ngens: Incomplete
    symbols: Incomplete
    domain: Incomplete
    is_PID: bool
    dom: Incomplete
    def __init__(self, domain_or_ring, symbols: Incomplete | None = None, order: Incomplete | None = None) -> None: ...
    def new(self, element): ...
    @property
    def zero(self): ...
    @property
    def one(self): ...
    @property
    def order(self): ...
    def __hash__(self): ...
    def __eq__(self, other): ...
    def is_unit(self, a): ...
    def canonical_unit(self, a): ...
    def to_sympy(self, a): ...
    def from_sympy(self, a): ...
    def from_ZZ(K1, a, K0): ...
    def from_ZZ_python(K1, a, K0): ...
    def from_QQ(K1, a, K0): ...
    def from_QQ_python(K1, a, K0): ...
    def from_ZZ_gmpy(K1, a, K0): ...
    def from_QQ_gmpy(K1, a, K0): ...
    def from_GaussianIntegerRing(K1, a, K0): ...
    def from_GaussianRationalField(K1, a, K0): ...
    def from_RealField(K1, a, K0): ...
    def from_ComplexField(K1, a, K0): ...
    def from_AlgebraicField(K1, a, K0): ...
    def from_PolynomialRing(K1, a, K0): ...
    def from_FractionField(K1, a, K0): ...
    def from_GlobalPolynomialRing(K1, a, K0): ...
    def get_field(self): ...
    def is_positive(self, a): ...
    def is_negative(self, a): ...
    def is_nonpositive(self, a): ...
    def is_nonnegative(self, a): ...
    def gcdex(self, a, b): ...
    def gcd(self, a, b): ...
    def lcm(self, a, b): ...
    def factorial(self, a): ...
