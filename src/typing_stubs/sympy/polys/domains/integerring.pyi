from _typeshed import Incomplete
from sympy.external.gmpy import MPZ
from sympy.polys.domains.characteristiczero import CharacteristicZero
from sympy.polys.domains.ring import Ring
from sympy.polys.domains.simpledomain import SimpleDomain

__all__ = ['IntegerRing']

class IntegerRing(Ring, CharacteristicZero, SimpleDomain):
    rep: str
    alias: str
    dtype = MPZ
    zero: Incomplete
    one: Incomplete
    tp: Incomplete
    is_IntegerRing: bool
    is_ZZ: bool
    is_Numerical: bool
    is_PID: bool
    has_assoc_Ring: bool
    has_assoc_Field: bool
    def __init__(self) -> None: ...
    def __eq__(self, other): ...
    def __hash__(self): ...
    def to_sympy(self, a): ...
    def from_sympy(self, a): ...
    def get_field(self): ...
    def algebraic_field(self, *extension, alias: Incomplete | None = None): ...
    def from_AlgebraicField(K1, a, K0): ...
    def log(self, a, b): ...
    def from_FF(K1, a, K0): ...
    def from_FF_python(K1, a, K0): ...
    def from_ZZ(K1, a, K0): ...
    def from_ZZ_python(K1, a, K0): ...
    def from_QQ(K1, a, K0): ...
    def from_QQ_python(K1, a, K0): ...
    def from_FF_gmpy(K1, a, K0): ...
    def from_ZZ_gmpy(K1, a, K0): ...
    def from_QQ_gmpy(K1, a, K0): ...
    def from_RealField(K1, a, K0): ...
    def from_GaussianIntegerRing(K1, a, K0): ...
    def from_EX(K1, a, K0): ...
    def gcdex(self, a, b): ...
    def gcd(self, a, b): ...
    def lcm(self, a, b): ...
    def sqrt(self, a): ...
    def is_square(self, a): ...
    def exsqrt(self, a): ...
    def factorial(self, a): ...
