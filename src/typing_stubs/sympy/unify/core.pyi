from _typeshed import Incomplete
from collections.abc import Generator
from sympy.utilities.iterables import kbins as kbins

class Compound:
    op: Incomplete
    args: Incomplete
    def __init__(self, op, args) -> None: ...
    def __eq__(self, other): ...
    def __hash__(self): ...

class Variable:
    arg: Incomplete
    def __init__(self, arg) -> None: ...
    def __eq__(self, other): ...
    def __hash__(self): ...

class CondVariable:
    arg: Incomplete
    valid: Incomplete
    def __init__(self, arg, valid) -> None: ...
    def __eq__(self, other): ...
    def __hash__(self): ...

def unify(x, y, s: Incomplete | None = None, **fns) -> Generator[Incomplete, Incomplete, Incomplete]: ...
def unify_var(var, x, s, **fns) -> Generator[Incomplete, Incomplete]: ...
def occur_check(var, x): ...
def assoc(d, key, val): ...
def is_args(x): ...
def unpack(x): ...
def allcombinations(A, B, ordered) -> Generator[Incomplete]: ...
def partition(it, part): ...
def index(it, ind): ...
