from _typeshed import Incomplete
from sympy.core import Add as Add, S as S
from sympy.core.function import AppliedUndef as AppliedUndef, Function as Function, Subs as Subs, expand as expand
from sympy.core.relational import Eq as Eq, Equality as Equality
from sympy.core.symbol import Symbol as Symbol, Wild as Wild, symbols as symbols
from sympy.functions import exp as exp
from sympy.integrals.integrals import Integral as Integral, integrate as integrate
from sympy.simplify import simplify as simplify
from sympy.simplify.radsimp import collect as collect
from sympy.solvers.deutils import ode_order as ode_order
from sympy.solvers.solvers import solve as solve
from sympy.utilities.iterables import has_dups as has_dups, is_sequence as is_sequence
from sympy.utilities.misc import filldedent as filldedent

allhints: Incomplete

def pdsolve(eq, func: Incomplete | None = None, hint: str = 'default', dict: bool = False, solvefun: Incomplete | None = None, **kwargs): ...
def classify_pde(eq, func: Incomplete | None = None, dict: bool = False, *, prep: bool = True, **kwargs): ...
def checkpdesol(pde, sol, func: Incomplete | None = None, solve_for_func: bool = True): ...
def pde_1st_linear_constant_coeff_homogeneous(eq, func, order, match, solvefun): ...
def pde_1st_linear_constant_coeff(eq, func, order, match, solvefun): ...
def pde_1st_linear_variable_coeff(eq, func, order, match, solvefun): ...
def pde_separate(eq, fun, sep, strategy: str = 'mul'): ...
def pde_separate_add(eq, fun, sep): ...
def pde_separate_mul(eq, fun, sep): ...
