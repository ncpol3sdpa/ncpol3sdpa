from .single import SingleODEProblem as SingleODEProblem, SingleODESolver as SingleODESolver, solver_map as solver_map
from _typeshed import Incomplete
from sympy.core import Add as Add, Mul as Mul, Pow as Pow, S as S, oo as oo
from sympy.core.containers import Tuple as Tuple
from sympy.core.expr import AtomicExpr as AtomicExpr, Expr as Expr
from sympy.core.function import AppliedUndef as AppliedUndef, Derivative as Derivative, Function as Function, Subs as Subs, diff as diff, expand as expand, expand_mul as expand_mul
from sympy.core.multidimensional import vectorize as vectorize
from sympy.core.numbers import Number as Number, nan as nan, zoo as zoo
from sympy.core.relational import Eq as Eq, Equality as Equality
from sympy.core.sorting import default_sort_key as default_sort_key, ordered as ordered
from sympy.core.symbol import Dummy as Dummy, Symbol as Symbol, Wild as Wild, symbols as symbols
from sympy.core.sympify import sympify as sympify
from sympy.core.traversal import preorder_traversal as preorder_traversal
from sympy.functions import exp as exp, log as log, sqrt as sqrt
from sympy.functions.combinatorial.factorials import factorial as factorial
from sympy.integrals.integrals import Integral as Integral
from sympy.logic.boolalg import BooleanAtom as BooleanAtom, BooleanFalse as BooleanFalse, BooleanTrue as BooleanTrue
from sympy.polys import Poly as Poly, PolynomialError as PolynomialError, lcm as lcm, terms_gcd as terms_gcd
from sympy.polys.polytools import cancel as cancel
from sympy.series import Order as Order
from sympy.series.series import series as series
from sympy.simplify import collect as collect, cse as cse, logcombine as logcombine, powsimp as powsimp, separatevars as separatevars, simplify as simplify
from sympy.simplify.radsimp import collect_const as collect_const
from sympy.solvers import checksol as checksol, solve as solve
from sympy.solvers.deutils import ode_order as ode_order
from sympy.utilities import numbered_symbols as numbered_symbols
from sympy.utilities.iterables import iterable as iterable, sift as sift, uniq as uniq

allhints: Incomplete

def get_numbered_constants(eq, num: int = 1, start: int = 1, prefix: str = 'C'): ...
def iter_numbered_constants(eq, start: int = 1, prefix: str = 'C'): ...
def dsolve(eq, func: Incomplete | None = None, hint: str = 'default', simplify: bool = True, ics: Incomplete | None = None, xi: Incomplete | None = None, eta: Incomplete | None = None, x0: int = 0, n: int = 6, **kwargs): ...
def solve_ics(sols, funcs, constants, ics): ...
def classify_ode(eq, func: Incomplete | None = None, dict: bool = False, ics: Incomplete | None = None, *, prep: bool = True, xi: Incomplete | None = None, eta: Incomplete | None = None, n: Incomplete | None = None, **kwargs): ...
def classify_sysode(eq, funcs: Incomplete | None = None, **kwargs): ...
def check_linear_2eq_order1(eq, func, func_coef): ...
def check_nonlinear_2eq_order1(eq, func, func_coef): ...
def check_nonlinear_2eq_order2(eq, func, func_coef) -> None: ...
def check_nonlinear_3eq_order1(eq, func, func_coef): ...
def check_nonlinear_3eq_order2(eq, func, func_coef) -> None: ...
def odesimp(ode, eq, func, hint): ...
def ode_sol_simplicity(sol, func, trysolving: bool = True): ...
def constantsimp(expr, constants): ...
def constant_renumber(expr, variables: Incomplete | None = None, newconstants: Incomplete | None = None): ...
def homogeneous_order(eq, *symbols): ...
def ode_2nd_power_series_ordinary(eq, func, order, match): ...
def ode_2nd_power_series_regular(eq, func, order, match): ...
def ode_1st_power_series(eq, func, order, match): ...
def checkinfsol(eq, infinitesimals, func: Incomplete | None = None, order: Incomplete | None = None): ...
def sysode_linear_2eq_order1(match_): ...
def sysode_nonlinear_2eq_order1(match_): ...
def sysode_nonlinear_3eq_order1(match_): ...
