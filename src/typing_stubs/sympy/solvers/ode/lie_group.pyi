from .ode import checkinfsol as checkinfsol
from _typeshed import Incomplete
from sympy.core import Add as Add, Mul as Mul, Pow as Pow, S as S
from sympy.core.exprtools import factor_terms as factor_terms
from sympy.core.function import AppliedUndef as AppliedUndef, Function as Function, expand as expand
from sympy.core.relational import Eq as Eq, Equality as Equality
from sympy.core.symbol import Dummy as Dummy, Symbol as Symbol, Wild as Wild, symbols as symbols
from sympy.functions import exp as exp, log as log
from sympy.integrals.integrals import integrate as integrate
from sympy.polys import Poly as Poly
from sympy.polys.polytools import cancel as cancel, div as div
from sympy.simplify import collect as collect, powsimp as powsimp, separatevars as separatevars, simplify as simplify
from sympy.solvers import solve as solve
from sympy.solvers.deutils import ode_order as ode_order
from sympy.solvers.pde import pdsolve as pdsolve
from sympy.utilities import numbered_symbols as numbered_symbols

lie_heuristics: Incomplete

def infinitesimals(eq, func: Incomplete | None = None, order: Incomplete | None = None, hint: str = 'default', match: Incomplete | None = None): ...
def lie_heuristic_abaco1_simple(match, comp: bool = False): ...
def lie_heuristic_abaco1_product(match, comp: bool = False): ...
def lie_heuristic_bivariate(match, comp: bool = False): ...
def lie_heuristic_chi(match, comp: bool = False): ...
def lie_heuristic_function_sum(match, comp: bool = False): ...
def lie_heuristic_abaco2_similar(match, comp: bool = False): ...
def lie_heuristic_abaco2_unique_unknown(match, comp: bool = False): ...
def lie_heuristic_abaco2_unique_general(match, comp: bool = False): ...
def lie_heuristic_linear(match, comp: bool = False): ...
