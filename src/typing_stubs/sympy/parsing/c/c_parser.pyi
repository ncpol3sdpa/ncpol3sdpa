from _typeshed import Incomplete
from sympy.codegen.ast import Assignment as Assignment, CodeBlock as CodeBlock, Float as Float, FunctionCall as FunctionCall, FunctionDefinition as FunctionDefinition, FunctionPrototype as FunctionPrototype, Integer as Integer, Return as Return, Variable as Variable, While as While, aug_assign as aug_assign, bool_ as bool_, float32 as float32, float64 as float64, float80 as float80, int16 as int16, int64 as int64, int8 as int8, intc as intc, none as none, uint16 as uint16, uint32 as uint32, uint64 as uint64, uint8 as uint8
from sympy.codegen.cnodes import PostDecrement as PostDecrement, PostIncrement as PostIncrement, PreDecrement as PreDecrement, PreIncrement as PreIncrement
from sympy.core import Add as Add, Mod as Mod, Mul as Mul, Pow as Pow, Rel as Rel
from sympy.core.symbol import Symbol as Symbol
from sympy.core.sympify import sympify as sympify
from sympy.external import import_module as import_module
from sympy.logic.boolalg import And as And, Not as Not, Or as Or, as_Boolean as as_Boolean, false as false, true as true

cin: Incomplete

class BaseParser:
    index: Incomplete
    def __init__(self) -> None: ...
    def diagnostics(self, out) -> None: ...

class CCodeConverter(BaseParser):
    def __init__(self) -> None: ...
    tu: Incomplete
    def parse(self, filename, flags): ...
    def parse_str(self, source, flags): ...
    def transform(self, node): ...
    def transform_var_decl(self, node): ...
    def transform_function_decl(self, node): ...
    def transform_parm_decl(self, node): ...
    def transform_integer_literal(self, node): ...
    def transform_floating_literal(self, node): ...
    def transform_string_literal(self, node) -> None: ...
    def transform_character_literal(self, node): ...
    def transform_cxx_bool_literal_expr(self, node): ...
    def transform_unexposed_decl(self, node) -> None: ...
    def transform_unexposed_expr(self, node): ...
    def transform_decl_ref_expr(self, node): ...
    def transform_call_expr(self, node): ...
    def transform_return_stmt(self, node): ...
    def transform_compound_stmt(self, node): ...
    def transform_decl_stmt(self, node): ...
    def transform_paren_expr(self, node): ...
    def transform_compound_assignment_operator(self, node): ...
    def transform_unary_operator(self, node): ...
    def transform_binary_operator(self, node): ...
    def priority_of(self, op): ...
    def perform_operation(self, lhs, rhs, op): ...
    def get_expr_for_operand(self, combined_variable): ...
    def transform_null_stmt(self, node): ...
    def transform_while_stmt(self, node): ...

class CCodeConverter:
    def __init__(self, *args, **kwargs) -> None: ...

def parse_c(source): ...
