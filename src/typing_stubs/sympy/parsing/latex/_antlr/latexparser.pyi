from antlr4 import *
from _typeshed import Incomplete
from io import StringIO as StringIO
from typing import TextIO

def serializedATN(): ...

class LaTeXParser(Parser):
    grammarFileName: str
    atn: Incomplete
    decisionsToDFA: Incomplete
    sharedContextCache: Incomplete
    literalNames: Incomplete
    symbolicNames: Incomplete
    RULE_math: int
    RULE_relation: int
    RULE_equality: int
    RULE_expr: int
    RULE_additive: int
    RULE_mp: int
    RULE_mp_nofunc: int
    RULE_unary: int
    RULE_unary_nofunc: int
    RULE_postfix: int
    RULE_postfix_nofunc: int
    RULE_postfix_op: int
    RULE_eval_at: int
    RULE_eval_at_sub: int
    RULE_eval_at_sup: int
    RULE_exp: int
    RULE_exp_nofunc: int
    RULE_comp: int
    RULE_comp_nofunc: int
    RULE_group: int
    RULE_abs_group: int
    RULE_number: int
    RULE_atom: int
    RULE_bra: int
    RULE_ket: int
    RULE_mathit: int
    RULE_mathit_text: int
    RULE_frac: int
    RULE_binom: int
    RULE_floor: int
    RULE_ceil: int
    RULE_func_normal: int
    RULE_func: int
    RULE_args: int
    RULE_limit_sub: int
    RULE_func_arg: int
    RULE_func_arg_noparens: int
    RULE_subexpr: int
    RULE_supexpr: int
    RULE_subeq: int
    RULE_supeq: int
    ruleNames: Incomplete
    EOF: Incomplete
    T__0: int
    T__1: int
    WS: int
    THINSPACE: int
    MEDSPACE: int
    THICKSPACE: int
    QUAD: int
    QQUAD: int
    NEGTHINSPACE: int
    NEGMEDSPACE: int
    NEGTHICKSPACE: int
    CMD_LEFT: int
    CMD_RIGHT: int
    IGNORE: int
    ADD: int
    SUB: int
    MUL: int
    DIV: int
    L_PAREN: int
    R_PAREN: int
    L_BRACE: int
    R_BRACE: int
    L_BRACE_LITERAL: int
    R_BRACE_LITERAL: int
    L_BRACKET: int
    R_BRACKET: int
    BAR: int
    R_BAR: int
    L_BAR: int
    L_ANGLE: int
    R_ANGLE: int
    FUNC_LIM: int
    LIM_APPROACH_SYM: int
    FUNC_INT: int
    FUNC_SUM: int
    FUNC_PROD: int
    FUNC_EXP: int
    FUNC_LOG: int
    FUNC_LG: int
    FUNC_LN: int
    FUNC_SIN: int
    FUNC_COS: int
    FUNC_TAN: int
    FUNC_CSC: int
    FUNC_SEC: int
    FUNC_COT: int
    FUNC_ARCSIN: int
    FUNC_ARCCOS: int
    FUNC_ARCTAN: int
    FUNC_ARCCSC: int
    FUNC_ARCSEC: int
    FUNC_ARCCOT: int
    FUNC_SINH: int
    FUNC_COSH: int
    FUNC_TANH: int
    FUNC_ARSINH: int
    FUNC_ARCOSH: int
    FUNC_ARTANH: int
    L_FLOOR: int
    R_FLOOR: int
    L_CEIL: int
    R_CEIL: int
    FUNC_SQRT: int
    FUNC_OVERLINE: int
    CMD_TIMES: int
    CMD_CDOT: int
    CMD_DIV: int
    CMD_FRAC: int
    CMD_BINOM: int
    CMD_DBINOM: int
    CMD_TBINOM: int
    CMD_MATHIT: int
    UNDERSCORE: int
    CARET: int
    COLON: int
    DIFFERENTIAL: int
    LETTER: int
    DIGIT: int
    EQUAL: int
    NEQ: int
    LT: int
    LTE: int
    LTE_Q: int
    LTE_S: int
    GT: int
    GTE: int
    GTE_Q: int
    GTE_S: int
    BANG: int
    SINGLE_QUOTES: int
    SYMBOL: int
    def __init__(self, input: TokenStream, output: TextIO = ...) -> None: ...
    class MathContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def relation(self): ...
        def getRuleIndex(self): ...
    state: int
    def math(self): ...
    class RelationContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def expr(self): ...
        def relation(self, i: int = None): ...
        def EQUAL(self): ...
        def LT(self): ...
        def LTE(self): ...
        def GT(self): ...
        def GTE(self): ...
        def NEQ(self): ...
        def getRuleIndex(self): ...
    def relation(self, _p: int = 0): ...
    class EqualityContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def expr(self, i: int = None): ...
        def EQUAL(self): ...
        def getRuleIndex(self): ...
    def equality(self): ...
    class ExprContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def additive(self): ...
        def getRuleIndex(self): ...
    def expr(self): ...
    class AdditiveContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def mp(self): ...
        def additive(self, i: int = None): ...
        def ADD(self): ...
        def SUB(self): ...
        def getRuleIndex(self): ...
    def additive(self, _p: int = 0): ...
    class MpContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def unary(self): ...
        def mp(self, i: int = None): ...
        def MUL(self): ...
        def CMD_TIMES(self): ...
        def CMD_CDOT(self): ...
        def DIV(self): ...
        def CMD_DIV(self): ...
        def COLON(self): ...
        def getRuleIndex(self): ...
    def mp(self, _p: int = 0): ...
    class Mp_nofuncContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def unary_nofunc(self): ...
        def mp_nofunc(self, i: int = None): ...
        def MUL(self): ...
        def CMD_TIMES(self): ...
        def CMD_CDOT(self): ...
        def DIV(self): ...
        def CMD_DIV(self): ...
        def COLON(self): ...
        def getRuleIndex(self): ...
    def mp_nofunc(self, _p: int = 0): ...
    class UnaryContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def unary(self): ...
        def ADD(self): ...
        def SUB(self): ...
        def postfix(self, i: int = None): ...
        def getRuleIndex(self): ...
    def unary(self): ...
    class Unary_nofuncContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def unary_nofunc(self): ...
        def ADD(self): ...
        def SUB(self): ...
        def postfix(self): ...
        def postfix_nofunc(self, i: int = None): ...
        def getRuleIndex(self): ...
    def unary_nofunc(self): ...
    class PostfixContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def exp(self): ...
        def postfix_op(self, i: int = None): ...
        def getRuleIndex(self): ...
    def postfix(self): ...
    class Postfix_nofuncContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def exp_nofunc(self): ...
        def postfix_op(self, i: int = None): ...
        def getRuleIndex(self): ...
    def postfix_nofunc(self): ...
    class Postfix_opContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def BANG(self): ...
        def eval_at(self): ...
        def getRuleIndex(self): ...
    def postfix_op(self): ...
    class Eval_atContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def BAR(self): ...
        def eval_at_sup(self): ...
        def eval_at_sub(self): ...
        def getRuleIndex(self): ...
    def eval_at(self): ...
    class Eval_at_subContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def UNDERSCORE(self): ...
        def L_BRACE(self): ...
        def R_BRACE(self): ...
        def expr(self): ...
        def equality(self): ...
        def getRuleIndex(self): ...
    def eval_at_sub(self): ...
    class Eval_at_supContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def CARET(self): ...
        def L_BRACE(self): ...
        def R_BRACE(self): ...
        def expr(self): ...
        def equality(self): ...
        def getRuleIndex(self): ...
    def eval_at_sup(self): ...
    class ExpContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def comp(self): ...
        def exp(self): ...
        def CARET(self): ...
        def atom(self): ...
        def L_BRACE(self): ...
        def expr(self): ...
        def R_BRACE(self): ...
        def subexpr(self): ...
        def getRuleIndex(self): ...
    def exp(self, _p: int = 0): ...
    class Exp_nofuncContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def comp_nofunc(self): ...
        def exp_nofunc(self): ...
        def CARET(self): ...
        def atom(self): ...
        def L_BRACE(self): ...
        def expr(self): ...
        def R_BRACE(self): ...
        def subexpr(self): ...
        def getRuleIndex(self): ...
    def exp_nofunc(self, _p: int = 0): ...
    class CompContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def group(self): ...
        def abs_group(self): ...
        def func(self): ...
        def atom(self): ...
        def floor(self): ...
        def ceil(self): ...
        def getRuleIndex(self): ...
    def comp(self): ...
    class Comp_nofuncContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def group(self): ...
        def abs_group(self): ...
        def atom(self): ...
        def floor(self): ...
        def ceil(self): ...
        def getRuleIndex(self): ...
    def comp_nofunc(self): ...
    class GroupContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def L_PAREN(self): ...
        def expr(self): ...
        def R_PAREN(self): ...
        def L_BRACKET(self): ...
        def R_BRACKET(self): ...
        def L_BRACE(self): ...
        def R_BRACE(self): ...
        def L_BRACE_LITERAL(self): ...
        def R_BRACE_LITERAL(self): ...
        def getRuleIndex(self): ...
    def group(self): ...
    class Abs_groupContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def BAR(self, i: int = None): ...
        def expr(self): ...
        def getRuleIndex(self): ...
    def abs_group(self): ...
    class NumberContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def DIGIT(self, i: int = None): ...
        def getRuleIndex(self): ...
    def number(self): ...
    class AtomContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def LETTER(self): ...
        def SYMBOL(self): ...
        def subexpr(self): ...
        def SINGLE_QUOTES(self): ...
        def number(self): ...
        def DIFFERENTIAL(self): ...
        def mathit(self): ...
        def frac(self): ...
        def binom(self): ...
        def bra(self): ...
        def ket(self): ...
        def getRuleIndex(self): ...
    def atom(self): ...
    class BraContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def L_ANGLE(self): ...
        def expr(self): ...
        def R_BAR(self): ...
        def BAR(self): ...
        def getRuleIndex(self): ...
    def bra(self): ...
    class KetContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def expr(self): ...
        def R_ANGLE(self): ...
        def L_BAR(self): ...
        def BAR(self): ...
        def getRuleIndex(self): ...
    def ket(self): ...
    class MathitContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def CMD_MATHIT(self): ...
        def L_BRACE(self): ...
        def mathit_text(self): ...
        def R_BRACE(self): ...
        def getRuleIndex(self): ...
    def mathit(self): ...
    class Mathit_textContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def LETTER(self, i: int = None): ...
        def getRuleIndex(self): ...
    def mathit_text(self): ...
    class FracContext(ParserRuleContext):
        parser: Incomplete
        upperd: Incomplete
        upper: Incomplete
        lowerd: Incomplete
        lower: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def CMD_FRAC(self): ...
        def L_BRACE(self, i: int = None): ...
        def R_BRACE(self, i: int = None): ...
        def DIGIT(self, i: int = None): ...
        def expr(self, i: int = None): ...
        def getRuleIndex(self): ...
    def frac(self): ...
    class BinomContext(ParserRuleContext):
        parser: Incomplete
        n: Incomplete
        k: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def L_BRACE(self, i: int = None): ...
        def R_BRACE(self, i: int = None): ...
        def CMD_BINOM(self): ...
        def CMD_DBINOM(self): ...
        def CMD_TBINOM(self): ...
        def expr(self, i: int = None): ...
        def getRuleIndex(self): ...
    def binom(self): ...
    class FloorContext(ParserRuleContext):
        parser: Incomplete
        val: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def L_FLOOR(self): ...
        def R_FLOOR(self): ...
        def expr(self): ...
        def getRuleIndex(self): ...
    def floor(self): ...
    class CeilContext(ParserRuleContext):
        parser: Incomplete
        val: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def L_CEIL(self): ...
        def R_CEIL(self): ...
        def expr(self): ...
        def getRuleIndex(self): ...
    def ceil(self): ...
    class Func_normalContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def FUNC_EXP(self): ...
        def FUNC_LOG(self): ...
        def FUNC_LG(self): ...
        def FUNC_LN(self): ...
        def FUNC_SIN(self): ...
        def FUNC_COS(self): ...
        def FUNC_TAN(self): ...
        def FUNC_CSC(self): ...
        def FUNC_SEC(self): ...
        def FUNC_COT(self): ...
        def FUNC_ARCSIN(self): ...
        def FUNC_ARCCOS(self): ...
        def FUNC_ARCTAN(self): ...
        def FUNC_ARCCSC(self): ...
        def FUNC_ARCSEC(self): ...
        def FUNC_ARCCOT(self): ...
        def FUNC_SINH(self): ...
        def FUNC_COSH(self): ...
        def FUNC_TANH(self): ...
        def FUNC_ARSINH(self): ...
        def FUNC_ARCOSH(self): ...
        def FUNC_ARTANH(self): ...
        def getRuleIndex(self): ...
    def func_normal(self): ...
    class FuncContext(ParserRuleContext):
        parser: Incomplete
        root: Incomplete
        base: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def func_normal(self): ...
        def L_PAREN(self): ...
        def func_arg(self): ...
        def R_PAREN(self): ...
        def func_arg_noparens(self): ...
        def subexpr(self): ...
        def supexpr(self): ...
        def args(self): ...
        def LETTER(self): ...
        def SYMBOL(self): ...
        def SINGLE_QUOTES(self): ...
        def FUNC_INT(self): ...
        def DIFFERENTIAL(self): ...
        def frac(self): ...
        def additive(self): ...
        def FUNC_SQRT(self): ...
        def L_BRACE(self): ...
        def R_BRACE(self): ...
        def expr(self, i: int = None): ...
        def L_BRACKET(self): ...
        def R_BRACKET(self): ...
        def FUNC_OVERLINE(self): ...
        def mp(self): ...
        def FUNC_SUM(self): ...
        def FUNC_PROD(self): ...
        def subeq(self): ...
        def FUNC_LIM(self): ...
        def limit_sub(self): ...
        def getRuleIndex(self): ...
    def func(self): ...
    class ArgsContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def expr(self): ...
        def args(self): ...
        def getRuleIndex(self): ...
    def args(self): ...
    class Limit_subContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def UNDERSCORE(self): ...
        def L_BRACE(self, i: int = None): ...
        def LIM_APPROACH_SYM(self): ...
        def expr(self): ...
        def R_BRACE(self, i: int = None): ...
        def LETTER(self): ...
        def SYMBOL(self): ...
        def CARET(self): ...
        def ADD(self): ...
        def SUB(self): ...
        def getRuleIndex(self): ...
    def limit_sub(self): ...
    class Func_argContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def expr(self): ...
        def func_arg(self): ...
        def getRuleIndex(self): ...
    def func_arg(self): ...
    class Func_arg_noparensContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def mp_nofunc(self): ...
        def getRuleIndex(self): ...
    def func_arg_noparens(self): ...
    class SubexprContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def UNDERSCORE(self): ...
        def atom(self): ...
        def L_BRACE(self): ...
        def expr(self): ...
        def R_BRACE(self): ...
        def getRuleIndex(self): ...
    def subexpr(self): ...
    class SupexprContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def CARET(self): ...
        def atom(self): ...
        def L_BRACE(self): ...
        def expr(self): ...
        def R_BRACE(self): ...
        def getRuleIndex(self): ...
    def supexpr(self): ...
    class SubeqContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def UNDERSCORE(self): ...
        def L_BRACE(self): ...
        def equality(self): ...
        def R_BRACE(self): ...
        def getRuleIndex(self): ...
    def subeq(self): ...
    class SupeqContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def UNDERSCORE(self): ...
        def L_BRACE(self): ...
        def equality(self): ...
        def R_BRACE(self): ...
        def getRuleIndex(self): ...
    def supeq(self): ...
    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int): ...
    def relation_sempred(self, localctx: RelationContext, predIndex: int): ...
    def additive_sempred(self, localctx: AdditiveContext, predIndex: int): ...
    def mp_sempred(self, localctx: MpContext, predIndex: int): ...
    def mp_nofunc_sempred(self, localctx: Mp_nofuncContext, predIndex: int): ...
    def exp_sempred(self, localctx: ExpContext, predIndex: int): ...
    def exp_nofunc_sempred(self, localctx: Exp_nofuncContext, predIndex: int): ...
