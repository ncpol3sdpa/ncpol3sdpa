from antlr4 import *
from _typeshed import Incomplete
from io import StringIO as StringIO
from typing import TextIO

def serializedATN(): ...

class AutolevParser(Parser):
    grammarFileName: str
    atn: Incomplete
    decisionsToDFA: Incomplete
    sharedContextCache: Incomplete
    literalNames: Incomplete
    symbolicNames: Incomplete
    RULE_prog: int
    RULE_stat: int
    RULE_assignment: int
    RULE_equals: int
    RULE_index: int
    RULE_diff: int
    RULE_functionCall: int
    RULE_varDecl: int
    RULE_varType: int
    RULE_varDecl2: int
    RULE_ranges: int
    RULE_massDecl: int
    RULE_massDecl2: int
    RULE_inertiaDecl: int
    RULE_matrix: int
    RULE_matrixInOutput: int
    RULE_codeCommands: int
    RULE_settings: int
    RULE_units: int
    RULE_inputs: int
    RULE_id_diff: int
    RULE_inputs2: int
    RULE_outputs: int
    RULE_outputs2: int
    RULE_codegen: int
    RULE_commands: int
    RULE_vec: int
    RULE_expr: int
    ruleNames: Incomplete
    EOF: Incomplete
    T__0: int
    T__1: int
    T__2: int
    T__3: int
    T__4: int
    T__5: int
    T__6: int
    T__7: int
    T__8: int
    T__9: int
    T__10: int
    T__11: int
    T__12: int
    T__13: int
    T__14: int
    T__15: int
    T__16: int
    T__17: int
    T__18: int
    T__19: int
    T__20: int
    T__21: int
    T__22: int
    T__23: int
    T__24: int
    T__25: int
    Mass: int
    Inertia: int
    Input: int
    Output: int
    Save: int
    UnitSystem: int
    Encode: int
    Newtonian: int
    Frames: int
    Bodies: int
    Particles: int
    Points: int
    Constants: int
    Specifieds: int
    Imaginary: int
    Variables: int
    MotionVariables: int
    INT: int
    FLOAT: int
    EXP: int
    LINE_COMMENT: int
    ID: int
    WS: int
    def __init__(self, input: TokenStream, output: TextIO = ...) -> None: ...
    class ProgContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def stat(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    state: int
    def prog(self): ...
    class StatContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def varDecl(self): ...
        def functionCall(self): ...
        def codeCommands(self): ...
        def massDecl(self): ...
        def inertiaDecl(self): ...
        def assignment(self): ...
        def settings(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    def stat(self): ...
    class AssignmentContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def getRuleIndex(self): ...
        def copyFrom(self, ctx: ParserRuleContext): ...
    class VecAssignContext(AssignmentContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def vec(self): ...
        def equals(self): ...
        def expr(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    class RegularAssignContext(AssignmentContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def ID(self): ...
        def equals(self): ...
        def expr(self): ...
        def diff(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    class IndexAssignContext(AssignmentContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def ID(self): ...
        def index(self): ...
        def equals(self): ...
        def expr(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    def assignment(self): ...
    class EqualsContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    def equals(self): ...
    class IndexContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def expr(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    def index(self): ...
    class DiffContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    def diff(self): ...
    class FunctionCallContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ID(self, i: int = None): ...
        def expr(self, i: int = None): ...
        def Mass(self): ...
        def Inertia(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    def functionCall(self): ...
    class VarDeclContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def varType(self): ...
        def varDecl2(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    def varDecl(self): ...
    class VarTypeContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def Newtonian(self): ...
        def Frames(self): ...
        def Bodies(self): ...
        def Particles(self): ...
        def Points(self): ...
        def Constants(self): ...
        def Specifieds(self): ...
        def Imaginary(self): ...
        def Variables(self): ...
        def MotionVariables(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    def varType(self): ...
    class VarDecl2Context(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ID(self): ...
        def INT(self, i: int = None): ...
        def expr(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    def varDecl2(self): ...
    class RangesContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def INT(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    def ranges(self): ...
    class MassDeclContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def Mass(self): ...
        def massDecl2(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    def massDecl(self): ...
    class MassDecl2Context(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ID(self): ...
        def expr(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    def massDecl2(self): ...
    class InertiaDeclContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def Inertia(self): ...
        def ID(self, i: int = None): ...
        def expr(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    def inertiaDecl(self): ...
    class MatrixContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def expr(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    def matrix(self): ...
    class MatrixInOutputContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ID(self, i: int = None): ...
        def FLOAT(self): ...
        def INT(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    def matrixInOutput(self): ...
    class CodeCommandsContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def units(self): ...
        def inputs(self): ...
        def outputs(self): ...
        def codegen(self): ...
        def commands(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    def codeCommands(self): ...
    class SettingsContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ID(self, i: int = None): ...
        def EXP(self): ...
        def FLOAT(self): ...
        def INT(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    def settings(self): ...
    class UnitsContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def UnitSystem(self): ...
        def ID(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    def units(self): ...
    class InputsContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def Input(self): ...
        def inputs2(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    def inputs(self): ...
    class Id_diffContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ID(self): ...
        def diff(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    def id_diff(self): ...
    class Inputs2Context(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def id_diff(self): ...
        def expr(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    def inputs2(self): ...
    class OutputsContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def Output(self): ...
        def outputs2(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    def outputs(self): ...
    class Outputs2Context(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def expr(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    def outputs2(self): ...
    class CodegenContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ID(self, i: int = None): ...
        def functionCall(self): ...
        def matrixInOutput(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    def codegen(self): ...
    class CommandsContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def Save(self): ...
        def ID(self, i: int = None): ...
        def Encode(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    def commands(self): ...
    class VecContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def ID(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    def vec(self): ...
    class ExprContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def getRuleIndex(self): ...
        def copyFrom(self, ctx: ParserRuleContext): ...
    class ParensContext(ExprContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def expr(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    class VectorOrDyadicContext(ExprContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def vec(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    class ExponentContext(ExprContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def expr(self, i: int = None): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    class MulDivContext(ExprContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def expr(self, i: int = None): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    class AddSubContext(ExprContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def expr(self, i: int = None): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    class FloatContext(ExprContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def FLOAT(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    class IntContext(ExprContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def INT(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    class IdEqualsExprContext(ExprContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def expr(self, i: int = None): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    class NegativeOneContext(ExprContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def expr(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    class FunctionContext(ExprContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def functionCall(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    class RangessContext(ExprContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def ranges(self): ...
        def ID(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    class ColonContext(ExprContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def expr(self, i: int = None): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    class IdContext(ExprContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def ID(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    class ExpContext(ExprContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def EXP(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    class MatricesContext(ExprContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def matrix(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    class IndexingContext(ExprContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def ID(self): ...
        def expr(self, i: int = None): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
    def expr(self, _p: int = 0): ...
    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int): ...
    def expr_sempred(self, localctx: ExprContext, predIndex: int): ...
