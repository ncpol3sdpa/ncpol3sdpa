# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml



stages:
  - build
  - test
  - deploy

variables:
  PYTHON_VERSION: "3.13"
  UV_VERSION: "0.5.5"
  BASE_LAYER: bookworm-slim
  IMAGE: ghcr.io/astral-sh/uv:$UV_VERSION-python$PYTHON_VERSION-$BASE_LAYER

image: $IMAGE

before_script:
  - echo "Setting up the environment..."
  - python3 --version


###########################################
#                                         #
#               Build Stage               #
#                                         #
###########################################

uv-install:
  stage: build
  variables:
    UV_CACHE_DIR: .uv-cache
  cache:
    key:
      files:
        - uv.lock
    paths:
      - $UV_CACHE_DIR
  script:
    - uv cache prune --ci
    - uv pip install --system -e .
    

###########################################
#                                         #
#               Test Stage                #
#                                         #
###########################################

pytest:
  stage: test
  script:
    - echo "Running Pytest..."
    - mkdir $HOME/mosek
    - touch $HOME/mosek/mosek.lic
    - echo "$MOSEK_LICENSE" >> $HOME/mosek/mosek.lic
    - echo "Mosek license file created at $HOME/mosek/mosek.lic\n"
    - uv run pytest --durations=10 --cov=src --cov-report=xml:coverage.xml
    - echo "Pytest complete"
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.xml
    expire_in: 1 week

mypy:
  stage: test
  script:
    - echo "Running Mypy..."
    - uv run mypy
    - echo "Mypy complete"
  allow_failure: false

ruff-check-src:
  stage: test
  script:
    - echo "Running Ruff..."
    - uvx ruff check src
    - echo "Ruff complete"
  allow_failure: true

# ruff-check-tests:
#   stage: test
#   script:
#     - echo "Running Ruff..."
#     - uvx ruff check tests
#     - echo "Ruff complete"
#   allow_failure: true

# Add a new job for code quality metrics
code-quality:
  stage: test
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:dind
  script:
    - docker run --env CODECLIMATE_CODE="$PWD" --volume "$PWD":/code --volume /var/run/docker.sock:/var/run/docker.sock pipelinecomponents/codeclimate analyze -f json > gl-code-quality-report.json
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    expire_in: 1 week

# Add a new job for performance metrics
performance:
  stage: test
  script:
    - uv pip install --system pytest-benchmark
    - uv run pytest tests/performance --benchmark-json=benchmark.json
  artifacts:
    paths:
      - benchmark.json
    expire_in: 1 week
  only:
    - main  # Only run on main branch to avoid noise

###########################################
#                                         #
#               Deploy Stage              #
#                                         #
###########################################

# deploy-job:
#   stage: deploy
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."

pages:
  stage: deploy
  script:
  # - pip install -U sphinx
  - uv run sphinx-build --version
  - uv run sphinx-build -b html docs/source public
  artifacts:
    paths:
    - public

# create-pages:
#   stage: deploy
#   image: ruby:3.2
#   script:
#     - gem install bundler
#     - bundle install
#     - bundle exec jekyll build -d public
#   artifacts:
#     paths:
#       - public
#   # only:
#   #   - main